
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)   
	
	РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	
	ВыбратьПодключаемоеОборудование();

КонецПроцедуры

&НаКлиенте 
Процедура ПредложитьВыбратьУстройствоЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено тогда
		ПодключаемоеОборудование = Результат.Значение;
	КонецЕсли;
	
	ОбновитьОтображениеЭлементов();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

/////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ВыбратьПодключаемоеОборудованиеКоманда(Команда)
	ВыбратьПодключаемоеОборудование();
КонецПроцедуры

&НаКлиенте
Процедура НачатьРаботуКассы(Команда)
	
		Если НЕ КассоваяСменаОткрыта() тогда
			
			СообщитьПодробно("Кассовая смена не открыта или истекла.");
			Возврат
			
		КонецЕсли;
		
	Если  ПроверитьКорректностьДанных() тогда
		
		Пока Истина Цикл
			
			ОбработкаПрерыванияПользователя(); 
						
			ПроверитьНаличиеДокументов();	
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСмену(Команда)
	
	ЭтотОбъект.Доступность = Истина;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПодключаемоеОборудование);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСмену(Команда)
	
	ЭтотОбъект.Доступность = Истина;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПодключаемоеОборудование);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиЭлементовФормы

#КонецОбласти


#Область ПроцедурыИФункцииПоПечати

&НаСервере
Процедура ЗаполнениеТаблицыДокументов()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	 |	Б_ОчередьПечати.Документ,
	 |	Б_ОчередьПечати.Статус,
	 |	Б_ОчередьПечати.Документ.Дата КАК ДатаДокумента,
	 |	Б_ОчередьПечати.Документ.НомерЧекаККМ КАК НомерЧекаККМ
	 |ИЗ
	 |	РегистрСведений.Б_ОчередьПечати КАК Б_ОчередьПечати
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	ДатаДокумента";
	ТзнЗапроса =  Запрос.Выполнить().Выгрузить();
	
	ТаблицаДокументов.Загрузить(ТзнЗапроса);
	
КонецПроцедуры

//0 - только пришел с сайта
//1 - в работе
//2 - была ошибка при печати
&НаКлиенте
Процедура ПроверитьНаличиеДокументов()
	
	ЗаполнениеТаблицыДокументов();
	
	Для Каждого ТекСтрока из ТаблицаДокументов Цикл
	
		
		Если ТекСтрока.Статус = 0 тогда
			
			АктивныйДокумент = ТекСтрока.Документ;
			
			ИзменитьЗаписьВРегистре_Б_ОчередьПечати(1);
			
			ОбработатьДокумент();
			
		КонецЕсли;
		
	КонецЦикла;
	
	//пробуем повторно только корявые
	ЗаполнениеТаблицыДокументов();
	
	Для Каждого ТекСтрока из ТаблицаДокументов Цикл
	
		Если ТекСтрока.Статус = 2 тогда
			
			АктивныйДокумент = ТекСтрока.Документ;
			
			ИзменитьЗаписьВРегистре_Б_ОчередьПечати(1);
			
			ОбработатьДокумент();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДокумент()
	
	//0 - печатаем
	//3 - пропускаем с пометкой, что есть чек
	//2 - пропускаем с ошибкой
	
	Статус = 0;
	
	Если НЕ ЕстьРеквизитВОбъекте(АктивныйДокумент, "НомерЧекаККМ") тогда	
		
		СообщитьПодробно("Документ: " + Строка(АктивныйДокумент) + " не поддерживает печать чеков. Документ пропускается.");
		
		Статус = "Пропускаем";
		
	КонецЕсли;
	
	Если Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьРеквизитОбъекта(АктивныйДокумент, "НомерЧекаККМ") <> 0 тогда
		
		СообщитьПодробно("У документа: " + Строка(АктивныйДокумент) + " уже был напечатан чек. Документ пропускается.");
		
		Статус = "Пропускаем";
		
	КонецЕсли;
	
	Если Статус = "Пропускаем" тогда
		ИзменитьЗаписьВРегистре_Б_ОчередьПечати(3);
	ИначеЕсли Статус = "ПомечаемОшибочным" тогда
		ИзменитьЗаписьВРегистре_Б_ОчередьПечати(2);
		СообщитьПодробно("не удалось напечатать чек у документа: " + Строка(АктивныйДокумент) + ". Помечаем его как ошибочным.", Истина);

	Иначе
		СообщитьПодробно("Начало  печати чека у документа: " + Строка(АктивныйДокумент));
		НапечататьЧекДокумента();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекДокумента()
	
	Если ПодключаемоеОборудование <> Неопределено Тогда
		
		ПараметрыФискализацииЧека = ПараметрыЧека(ПодключаемоеОборудование);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторУстройства", ПодключаемоеОборудование);
		
		Оповещение            = Новый ОписаниеОповещения("ПробитьЧекВыполнитьЗавершение",    ЭтотОбъект, ДополнительныеПараметры);
		ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека",     ЭтотОбъект, ДополнительныеПараметры);
		ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, ДополнительныеПараметры);
	
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
			Оповещение,
			УникальныйИдентификатор,
			ПараметрыФискализацииЧека,
			ПодключаемоеОборудование,,
			ПослеОткрытияЧека,
			ПослеОшибкиПечатиЧека);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПараметрыЧека(ИдентификаторУстройства)
	
	ПараметрыФискализацииЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	ПринятоОт = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(АктивныйДокумент.Контрагент, "НаименованиеПолное");
	
	СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
	СтрокаПозицииЧека.Наименование = НСтр("ru = 'Оплата от:'")
	                               + " " + ПринятоОт;
	СтрокаПозицииЧека.Количество   = 1;
	СтрокаПозицииЧека.Цена         = АктивныйДокумент.СуммаДокумента;
	СтрокаПозицииЧека.Сумма        = АктивныйДокумент.СуммаДокумента;
	СтрокаПозицииЧека.НомерСекции  = 2;
	
	ПараметрыФискализацииЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	Если (АктивныйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента ИЛИ АктивныйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиентаПоПлатежнойКарте) Тогда
		ПараметрыФискализацииЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	Иначе
		ПараметрыФискализацииЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств");
	КонецЕсли;
	
	ПараметрыФискализацииЧека.Электронно = Ложь;
	
	ПараметрыФискализацииЧека.ДокументОснование = АктивныйДокумент.Ссылка;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	Если ТипЗнч(АктивныйДокумент) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") тогда
        РеквизитыКассира = РозничныеПродажи.РеквизитыКассира(АктивныйДокумент.Кассир);
    Иначе
        РеквизитыКассира = РозничныеПродажи.РеквизитыКассира(АктивныйДокумент.Ответственный);
    КонецЕсли;	
	
	ПараметрыФискализацииЧека.Кассир = РеквизитыКассира.Наименование;
	ПараметрыФискализацииЧека.Вставить("ИмяКассира", РеквизитыКассира.Наименование);
	ПараметрыФискализацииЧека.КассирИНН = РеквизитыКассира.ИНН;
	
	СведенияОЮрФизЛице = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(АктивныйДокумент.Организация, ТекущаяДатаСеанса());
	
	ПараметрыФискализацииЧека.ОрганизацияНазвание = СведенияОЮрФизЛице.ПолноеНаименование;
	ПараметрыФискализацииЧека.ОрганизацияИНН      = СведенияОЮрФизЛице.ИНН;
	ПараметрыФискализацииЧека.ОрганизацияКПП      = СведенияОЮрФизЛице.КПП;
	ПараметрыФискализацииЧека.НомерКассы          = "00001";
	ПараметрыФискализацииЧека.НомерЧека           = 1;
	ПараметрыФискализацииЧека.НомерСмены          = 1;
	
	ПараметрыФискализацииЧека.АдресМагазина             = СведенияОЮрФизЛице.ФактическийАдрес;
	ПараметрыФискализацииЧека.НаименованиеМагазина      = СведенияОЮрФизЛице.СокращенноеНаименование;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.УчетнаяПолитика.СистемаНалогообложения КАК СистемаНалогообложения,
	|	Т.УчетнаяПолитика.ОбъектНалогообложенияУСН КАК ОбъектНалогообложенияУСН
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&ТекущаяДата, Организация = &Организация) КАК Т
	|");
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Организация", АктивныйДокумент.Организация);
	ДанныеСистемыНалогообложения = Запрос.Выполнить().Выбрать();
	ДанныеСистемыНалогообложения.Следующий();
	
	Если ДанныеСистемыНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
		
		ПараметрыФискализацииЧека.КодСистемыНалогообложения = 0; // Общая
		
	ИначеЕсли ДанныеСистемыНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		
		Если ДанныеСистемыНалогообложения.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
			ПараметрыФискализацииЧека.КодСистемыНалогообложения = 1; // Упрощенная Доход
		ИначеЕсли ДанныеСистемыНалогообложения.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы Тогда
			ПараметрыФискализацииЧека.КодСистемыНалогообложения = 2; // Упрощенная Доход минус Расход
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК Т
	|ГДЕ
	|	Т.ИдентификаторУстройства = &ИдентификаторУстройства
	|");
	Запрос.УстановитьПараметр("ИдентификаторУстройства", ПодключаемоеОборудование);
	ДанныеОборудования = Запрос.Выполнить().Выбрать();
	ДанныеОборудования.Следующий();
	
	ПараметрыФискализацииЧека.СерийныйНомер = ДанныеОборудования.СерийныйНомер;
	
	// Безналичная оплата
	СтрокаОплаты = Новый Структура();
	
	Если ТипЗнч(АктивныйДокумент) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") тогда
	    СтрокаОплаты.Вставить("ТипОплаты", 0);
	Иначе
	    СтрокаОплаты.Вставить("ТипОплаты", 1);
	КонецЕсли;
	
	СтрокаОплаты.Вставить("Сумма",     АктивныйДокумент.СуммаДокумента);
	ПараметрыФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);

	Возврат ПараметрыФискализацииЧека;
	
КонецФункции


&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	
	Если ПараметрыВыполнения.НомерСмены <> 0 Тогда
		ШапкаЧека.НомерСмены = ПараметрыВыполнения.НомерСмены;
	КонецЕсли;
	
	Если ПараметрыВыполнения.НомерЧека <> 0 Тогда
		ШапкаЧека.НомерЧека = ПараметрыВыполнения.НомерЧека;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт

	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	ШапкаЧека.НомерЧека = ШапкаЧека.НомерЧека + 1000000;
	
	Если ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств") Тогда
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
	Иначе
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ПробитьЧекЗавершениеСервер(РезультатВыполнения, Параметры);
	
КонецПроцедуры

&НаСервере
Процедура ПробитьЧекЗавершениеСервер(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ДокументОбъект = АктивныйДокумент.ПолучитьОбъект();
		
		Если ТипЗнч(АктивныйДокумент) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") тогда
			Если НЕ ЗначениеЗаполнено(АктивныйДокумент.Кассир) тогда
				ДокументОбъект.Кассир = ПараметрыСеанса.ТекущийПользователь;	
			КонецЕсли;
	    Иначе
			Если НЕ ЗначениеЗаполнено(АктивныйДокумент.Ответственный) тогда
				ДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;	
			КонецЕсли;
	    КонецЕсли;	

		// Установить полученное значение номера чека реквизиту документа.
		Если РезультатВыполнения.ВыходныеПараметры <> Неопределено Тогда
			ДокументОбъект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		КонецЕсли;
		
		ДокументОбъект.Дата = ТекущаяДата();
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.НомерЧекаККМ) Тогда
			ДокументОбъект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		ДобавитьЗначенияСвойств(РезультатВыполнения.ВыходныеПараметры[4], РезультатВыполнения.ВыходныеПараметры[5], РезультатВыполнения.ВыходныеПараметры[6]);
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение)
		Исключение
			СообщитьПодробно("не удалось напечатать чек у документа: " + Строка(АктивныйДокумент) + ". Помечаем его как ошибочным.", Истина);
			ИзменитьЗаписьВРегистре_Б_ОчередьПечати(2);
		КонецПопытки;
		
		ИзменитьЗаписьВРегистре_Б_ОчередьПечати(3);
		СообщитьПодробно("Завершена печать чека у документа: " + Строка(АктивныйДокумент));
		
	Иначе
	
		ТекстСообщения = НСтр(
			"ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном регистраторе.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
		);
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки
		);
		
		СообщитьПодробно(ТекстСообщения, Истина);
		
		СообщитьПодробно("не удалось напечатать чек у документа: " + Строка(АктивныйДокумент) + ". Помечаем его как ошибочным.", Истина);
		ИзменитьЗаписьВРегистре_Б_ОчередьПечати(2);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТоварамиПараметрыПриПробитииЧека(Документ, ОбщиеПараметры)
    
    СтрокаТаблицыТоваров = Новый СписокЗначений();
    ПринятоОт = Документ.Контрагент.НаименованиеПолное;
    
    НаименованиеТовара = 
        НСтр("ru = 'Оплата от: '")
        + ПринятоОт
        + НСтр("ru = ' Основание: '");

    СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
    СтрокаПозицииЧека.Наименование 	= НаименованиеТовара;
    СтрокаПозицииЧека.Количество 	= 1;
    СтрокаПозицииЧека.Цена     		= Документ.СуммаДокумента; // 5 - Цена за позицию без скидки;
    СтрокаПозицииЧека.Сумма 		= Документ.СуммаДокумента;
    СтрокаПозицииЧека.НомерСекции 	= 2;
    ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);

КонецПроцедуры


#КонецОбласти


#Область ПрочиеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьПодключаемоеОборудование()
	
	ТипОборудования = Новый Массив;
	ТипОборудования.Добавить( "ККТ");
	
	СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования(ТипОборудования);
	
	Если СписокДоступныхУстройств.Количество() = 0 Тогда
		СообщитьПодробно("Нет подключенных ККТ. Продолжение невозможно.");
		Закрыть();
	Иначе
		
		СписокУстройств = Новый СписокЗначений();
		
		Для Каждого Устройства Из СписокДоступныхУстройств Цикл
			СписокУстройств.Добавить(Устройства.Ссылка, Устройства.Наименование);
		КонецЦикла;
		
		Если СписокУстройств.Количество() = 1 Тогда
			
			ПодключаемоеОборудование = СписокУстройств[0].Значение;
			ОбновитьОтображениеЭлементов();
			СообщитьПодробно("Подключенных ККТ всего 1. Будет установлено по умолчанию.");
			
		Иначе
			
		Контекст = Новый Структура;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредложитьВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		СписокУстройств.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите ККТ");
		
	КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьРеквизитВОбъекте(Документ, ИмяРеквизита);
	Возврат Истина;
	//Возврат Б_ОбщиеПроцедурыИФункцииСервер.ЕстьРеквизитВОбъекте(Документ, ИмяРеквизита);
КонецФункции

&НаСервере
Процедура ИзменитьЗаписьВРегистре_Б_ОчередьПечати(Статус)
	
	Выборка = РегистрыСведений.Б_ОчередьПечати.Выбрать(Новый Структура("Документ", АктивныйДокумент));
	Пока Выборка.Следующий() Цикл
		
		лЗапись = Выборка.ПолучитьМенеджерЗаписи();	
		
		Если Статус = 3 тогда  //Удаляем
			лЗапись.Удалить();	
		Иначе                  //Меняем статус
			лЗапись.Статус = Статус; 	
			лЗапись.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗначенияСвойств(ФискальныйПризнак, АдресСайта, РегНомерККТ)
	
	лНабор = Неопределено;	
	
	лНомерЧека = "";
	
	Выборка = РегистрыСведений.Б_ИнформацияОЧеках.Выбрать(Новый Структура("Документ", АктивныйДокумент));
	
	Пока Выборка.Следующий() Цикл
		лНомерЧека = Выборка.НомерЧека;
	КонецЦикла;
	
	Если лНомерЧека = "" тогда
		СообщитьПодробно("Для документа:" + Строка(АктивныйДокумент) + " не найден Ид чека.  Выгрузка свойств чека невозможна.");
		Возврат;	
	КонецЕсли;
	
	НовоеСвойство = РегистрыСведений.Б_ИнформацияОЧеках.СоздатьМенеджерЗаписи();
	НовоеСвойство.Документ 	= АктивныйДокумент;
	НовоеСвойство.НомерЧека	= лНомерЧека;
	НовоеСвойство.ИдСвойства= Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПредопределенныйИдОбъекта("ИдСвойстваФискальныйПризнак");
	НовоеСвойство.Значение 	= ФискальныйПризнак;
	НовоеСвойство.Записать(Истина);
	
	НовоеСвойство = РегистрыСведений.Б_ИнформацияОЧеках.СоздатьМенеджерЗаписи();
	НовоеСвойство.Документ 	= АктивныйДокумент;
	НовоеСвойство.НомерЧека	= лНомерЧека;
	НовоеСвойство.ИдСвойства= Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПредопределенныйИдОбъекта("ИдСвойствАдресСайта");
	НовоеСвойство.Значение 	= АдресСайта;
	НовоеСвойство.Записать(Истина);
	
	НовоеСвойство = РегистрыСведений.Б_ИнформацияОЧеках.СоздатьМенеджерЗаписи();
	НовоеСвойство.Документ 	= АктивныйДокумент;
	НовоеСвойство.НомерЧека	= лНомерЧека;
	НовоеСвойство.ИдСвойства= Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПредопределенныйИдОбъекта("ИдСвойствРегНомерККТ");
	НовоеСвойство.Значение 	= РегНомерККТ;
	НовоеСвойство.Записать(Истина);
	
	НовоеСвойство = РегистрыСведений.Б_ИнформацияОЧеках.СоздатьМенеджерЗаписи();
	НовоеСвойство.Документ 	= АктивныйДокумент;
	НовоеСвойство.НомерЧека	= лНомерЧека;
	НовоеСвойство.ИдСвойства= Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПредопределенныйИдОбъекта("ИдСвойствПечатьЧека");
	НовоеСвойство.Значение 	= "false";
	НовоеСвойство.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеЭлементов()
	
	Если ПодключаемоеОборудование.Пустая() тогда
		Элементы.ОткрытьСмену.Доступность 		= Ложь;
		Элементы.ЗакрытьСмену.Доступность 		= Ложь;
		Элементы.НачатьРаботуКассы.Доступность 	= Ложь;
	Иначе
		Элементы.ОткрытьСмену.Доступность 		= Истина;
		Элементы.ЗакрытьСмену.Доступность 		= Истина;
		Элементы.НачатьРаботуКассы.Доступность 	= Истина;
	КонецЕсли;
	
	Если КассоваяСменаОткрыта() И НЕ РабочееМесто.Пустая() И НЕ ПодключаемоеОборудование.Пустая() тогда
		Элементы.ОткрытьСмену.Видимость = Ложь;
		Элементы.ЗакрытьСмену.Видимость = Истина;
	Иначе
		Элементы.ОткрытьСмену.Видимость = Истина;
		Элементы.ЗакрытьСмену.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьКорректностьДанных()
	
	Результат = Истина;
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) тогда
		Сообщить("Не найдено рабочее место пользователя.");
		Результат = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПодключаемоеОборудование) тогда
		Сообщить("Не указано подключаемое оборудование.");
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция КассоваяСменаОткрыта()
	
	Возврат КассовыеСменыВызовСервера.ПоследняяСменаАктивна(ПодключаемоеОборудование);
	
КонецФункции

Процедура ОперацияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	ТекстСообщения = ?(РезультатВыполнения.Результат, НСтр("ru='Операция успешно завершена.'"), РезультатВыполнения.ОписаниеОшибки);
	СообщитьПодробно(ТекстСообщения);
	
КонецПроцедуры


Процедура СообщитьПодробно(пСобытие, ЗаписьВЖурналРегистрации = Ложь)
	
	//#Если Клиент Тогда
		Сообщить(пСобытие);
	//#КонецЕсли
	
	Б_ОбщиеПроцедурыИФункцииСервер.ОтображениеСостояния(пСобытие);
	
	Если ЗаписьВЖурналРегистрации тогда
		ЗаписьЖурналаРегистрации("СобытияПечатиЧековМодуляБитрикс", УровеньЖурналаРегистрации.Ошибка,,, пСобытие);
	КонецЕсли;
	
	КаталогЛога = Константы.Б_ОбщийКаталогЛога.Получить();
	
	Если НЕ ЗначениеЗаполнено(КаталогЛога) тогда 	
		Возврат;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ПлатформаWindows = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
	
	ИмяЛогФайла = "Receipt_" + Строка(РабочееМесто) + " " + СокрЛП(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd"))+ ".txt";
	ПолноеИмяЛогФайла = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПлатформаWindows, КаталогЛога + "\Receipt_" + Строка(РабочееМесто));
	
	Текст = Новый ЗаписьТекста(ПолноеИмяЛогФайла, КодировкаТекста.ANSI,,истина);
	Текст.ЗаписатьСтроку(Строка(ТекущаяДата()) + "--" + пСобытие);
	Текст.Закрыть(); 
	
КонецПроцедуры


#КонецОбласти
