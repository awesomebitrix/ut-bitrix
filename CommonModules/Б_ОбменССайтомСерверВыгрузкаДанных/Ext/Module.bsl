
#Область ПроцедурыИФункцииФормирвоанияПакетов

			///////////////////////////////////////////////////////////////////
			//			ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЙ ПАКЕТОВ            //
			/////////////////////////////////////////////////////////////////			
			
// Процедура формирует пакеты данных, указанного типа
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена 
//  Операция		 - 	 Тип операции
Процедура ФормированиеПакетовДанных(ПараметрыОбмена, Операция) Экспорт
				
	//Группы товаров, склады, типы цен, ед. изм.	
	Если Операция = "ОбщаяИнформация" Тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакета для общих данных для товаров.", ПараметрыОбмена);	
		
		Для Каждого СтрокаТаблицыКаталогов Из ПараметрыОбмена.ТаблицаКаталогов Цикл
			
			Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
			
			Запрос = ПолучитьЗапросДляВыгрузкиПакетов(ПараметрыОбмена, Операция, ПараметрыОбмена.СтруктураСхемКомпоновки.ОбщаяИнформация, СтрокаТаблицыКаталогов.ХранилищеНастроекКомпоновки.Получить(), ПараметрыОбмена.ПолнаяВыгрузка, СтрокаТаблицыКаталогов);
			
			ТаблицаОбъектовОбменаВыгрузки = Запрос.Выполнить().Выгрузить();			
				
			ЗагрузкаТаблицыДанныхВРегистрПакетов(ТаблицаОбъектовОбменаВыгрузки, ПараметрыОбмена, СтрокаТаблицыКаталогов.ИдентификаторКаталога, ПараметрыОбмена.КоличествоТоваровВПакете, Операция);				

			Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для каталога: " + СтрокаТаблицыКаталогов.Каталог + " Завершено", ПараметрыОбмена, Истина);
			
		КонецЦикла;
		Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакета для для общих данных  для товаров завершено.", ПараметрыОбмена);	
		
	//Свойства	
	ИначеЕсли Операция = "Свойства" Тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для свойств.", ПараметрыОбмена);	
		
			Для Каждого СтрокаТаблицыКаталогов Из ПараметрыОбмена.ТаблицаКаталогов Цикл   //ПараметрыОбмена.ТаблицаКаталогов должна была получиться в момент выгрузки общей информации
				
				Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
				
				Запрос = ПолучитьЗапросДляВыгрузкиПакетов(ПараметрыОбмена, Операция, ПараметрыОбмена.СтруктураСхемКомпоновки.Свойства, СтрокаТаблицыКаталогов.ХранилищеНастроекКомпоновки.Получить(), ПараметрыОбмена.ПолнаяВыгрузка, СтрокаТаблицыКаталогов);
				
				ТаблицаОбъектовОбменаВыгрузки = Запрос.Выполнить().Выгрузить();			
				
				ЗагрузкаТаблицыДанныхВРегистрПакетов(ФильтрацияСвойствПоДополнительнымНастройкам(ТаблицаОбъектовОбменаВыгрузки, ПараметрыОбмена), ПараметрыОбмена, СтрокаТаблицыКаталогов.ИдентификаторКаталога, ПараметрыОбмена.КоличествоСвойствВПакете, Операция);				
				
				Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для каталога: " + СтрокаТаблицыКаталогов.Каталог + " Завершено", ПараметрыОбмена, Истина);
				
			КонецЦикла;

		Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для свойств завершено.", ПараметрыОбмена);	
		
	//Товары	
	ИначеЕсли Операция = "Товары" Тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для товаров.", ПараметрыОбмена);	
		
			Для Каждого СтрокаТаблицыКаталогов Из ПараметрыОбмена.ТаблицаКаталогов Цикл   //ПараметрыОбмена.ТаблицаКаталогов должна была получиться в момент выгрузки общей информации
				
				Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
				
				Запрос = ПолучитьЗапросДляВыгрузкиПакетов(ПараметрыОбмена, Операция, ПараметрыОбмена.СтруктураСхемКомпоновки.Товары, СтрокаТаблицыКаталогов.ХранилищеНастроекКомпоновки.Получить(), ПараметрыОбмена.ПолнаяВыгрузка, СтрокаТаблицыКаталогов);
				
				ТаблицаОбъектовОбменаВыгрузки = запрос.Выполнить().Выгрузить();			
					
				ЗагрузкаТаблицыДанныхВРегистрПакетов(ТаблицаОбъектовОбменаВыгрузки, ПараметрыОбмена, СтрокаТаблицыКаталогов.ИдентификаторКаталога, ПараметрыОбмена.КоличествоТоваровВПакете, Операция);				
				
				Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для каталога: " + СтрокаТаблицыКаталогов.Каталог + " Завершено", ПараметрыОбмена, Истина);
				
			КонецЦикла;
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для товаров завершено.", ПараметрыОбмена);	
		
	//Скидки
	ИначеЕсли Операция = "Скидки" Тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для скидок.", ПараметрыОбмена);	
		
		Запрос = ПолучитьЗапросДляВыгрузкиПакетов(ПараметрыОбмена, Операция, ПараметрыОбмена.СтруктураСхемКомпоновки.Скидки, ПараметрыОбмена.НастройкиКомпоновкиДанныхСкидок, ПараметрыОбмена.ПолнаяВыгрузка);
		
		ТаблицаОбъектовОбменаВыгрузки = запрос.Выполнить().Выгрузить();
		
		ЗагрузкаТаблицыДанныхВРегистрПакетов(ТаблицаОбъектовОбменаВыгрузки, ПараметрыОбмена, "Скидки", ПараметрыОбмена.КоличествоСкидокВПакете, Операция);
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для скидок завершено.", ПараметрыОбмена);	
		
	ИначеЕсли Операция = "КартыЛояльности" Тогда
						
		Б_ОбменССайтомСервер.СообщитьПодробно("Формирование карт лояльности для скидок.", ПараметрыОбмена);	
		
		Запрос = ПолучитьЗапросДляВыгрузкиПакетов(ПараметрыОбмена, Операция, ПараметрыОбмена.СтруктураСхемКомпоновки.ДисконтныеКарты, ПараметрыОбмена.НастройкиКомпоновкиДанныхКартЛояльности, ПараметрыОбмена.ПолнаяВыгрузка);
		
		ТаблицаОбъектовОбменаВыгрузки = запрос.Выполнить().Выгрузить();
		
		ЗагрузкаТаблицыДанныхВРегистрПакетов(ТаблицаОбъектовОбменаВыгрузки, ПараметрыОбмена, "КартыЛояльности", ПараметрыОбмена.КоличествоКартЛояльностиВПакете, Операция);
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для карт лояльности завершено.", ПараметрыОбмена);	
		
	//Пользовательские Справочники
	ИначеЕсли Операция = "ПользовательскиеСправочники" Тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для пользовательских справочников.", ПараметрыОбмена, Истина);
		тзнСправочников = ПолучитьПользовательскиеСправочникиОбменаДляФормированияПакетов(ПараметрыОбмена);
		ЗагрузкаТаблицыДанныхВРегистрПакетов(тзнСправочников, ПараметрыОбмена, "ПользовательскиеСправочники", ПараметрыОбмена.КоличествоЭлементовСправочникаВПакете, Операция);
		Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для пользовательских справочников завершено.", ПараметрыОбмена, Истина);
		
		//Контрагенты 
	ИначеЕсли Операция = "Контрагенты" Тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для контрагентов.", ПараметрыОбмена);	
		
		Запрос = ПолучитьЗапросДляВыгрузкиПакетов(ПараметрыОбмена, Операция, ПараметрыОбмена.СтруктураСхемКомпоновки.Контрагенты, ПараметрыОбмена.НастройкиКомпоновкиДанныхКонтрагентов, ПараметрыОбмена.ПолнаяВыгрузка);
		
		ТаблицаОбъектовОбменаВыгрузки = запрос.Выполнить().Выгрузить();
		
		ЗагрузкаТаблицыДанныхВРегистрПакетов(ТаблицаОбъектовОбменаВыгрузки, ПараметрыОбмена, "Контрагенты", ПараметрыОбмена.КоличествоКонтрагентовВПакете, Операция);
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для контрагентов завершено.", ПараметрыОбмена);	
		
	//Заказы 
	ИначеЕсли Операция = "Документы" Тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для документов", ПараметрыОбмена);	
		
		ТаблицаОбъектовОбменаВыгрузки = ПолучитьТаблицуДанныхДляПакетовКонтейнеровДокументов(ПараметрыОбмена, Операция);
		ЗагрузкаТаблицыДанныхВРегистрПакетов(ТаблицаОбъектовОбменаВыгрузки, ПараметрыОбмена, Операция, ПараметрыОбмена.КоличествоДокументовВПакете, Операция);

		Б_ОбменССайтомСервер.СообщитьПодробно("Формирование пакетов для документов завершено", ПараметрыОбмена);	
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - загружает таблицы данных в регистр сведений, хранящий пакеты данных
//
// Параметры:
//  ТаблицаОбъектовОбменаВыгрузки	 - 	 Таблица значений с данными, которые нужно выгрузить на сайт 
//  ПараметрыОбмена					 - 	 Настройки узла обмена 
//  ИдентификаторКаталога			 - 	 Идентификатор каталога(инфоблока) 
//  КоличествоДанныхВПакете			 - 	 Количество данных в одном пакете 
Процедура ЗагрузкаТаблицыДанныхВРегистрПакетов(ТаблицаОбъектовОбменаВыгрузки, ПараметрыОбмена, ИдентификаторКаталога, КоличествоДанныхВПакете, Операция)
	
	ТаблицаОбъектовОбменаВыгрузки.Колонки.Добавить("Пакет");
	ТаблицаОбъектовОбменаВыгрузки.Колонки.Добавить("Каталог");
	ТаблицаОбъектовОбменаВыгрузки.Колонки.Добавить("НастройкаОбмена");
	ТаблицаОбъектовОбменаВыгрузки.Колонки.Добавить("Операция");
	
	ТаблицаОбъектовОбменаВыгрузки.Сортировать("ТипОбъекта");
	
	РазбивкаТаблицыДанныхНаПакеты(ТаблицаОбъектовОбменаВыгрузки, КоличествоДанныхВПакете, Операция, ПараметрыОбмена, ИдентификаторКаталога);
	
	НаборЗаписей = РегистрыСведений.Б_ПакетныйОбмен.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Каталог.установить(ИдентификаторКаталога);
	НаборЗаписей.Отбор.НастройкаОбмена.установить(ПараметрыОбмена.Ссылка);
	НаборЗаписей.Отбор.Операция.установить(Операция);
	НаборЗаписей.Загрузить(ТаблицаОбъектовОбменаВыгрузки);
	НаборЗаписей.Записать();             
	
КонецПроцедуры

// Процедура - разбивает данные таблицы значений на пакеты данных
//
// Параметры:
//  Таблица				 - 	 Таблица данных с выгружаемыми данными 
//  КоличествоВПакете	 - 	 Количество товаров в одном пакете 
//  Узел				 - 	 Узел настроек обмена 
//  Каталог				 - 	 Идентификатор каталога(инфоблока), в который будет произведена выгрузка данных 
Процедура РазбивкаТаблицыДанныхНаПакеты(Таблица, КоличествоВПакете, Операция, Узел, Каталог)
	
	мОбъектыПакетов = Новый Массив;
	мОбъектыПакетов.Добавить("Номенклатура");
	мОбъектыПакетов.Добавить("Свойство");
	мОбъектыПакетов.Добавить("Скидка");
	мОбъектыПакетов.Добавить("ДисконтнаяКарта");
	мОбъектыПакетов.Добавить("ПользовательскийСправочник");
	мОбъектыПакетов.Добавить("Контрагент");
	мОбъектыПакетов.Добавить("Заказ");
	мОбъектыПакетов.Добавить("Отгрузка");
	мОбъектыПакетов.Добавить("Оплата");
	
	Итератор 	= 0;
	Пакет 		= 1;
	
	Для каждого ТекСтр из Таблица Цикл
		
		Если  мОбъектыПакетов.Найти(ТекСтр.ТипОбъекта) = Неопределено Тогда
			ТекСтр.Пакет 			= 0;
			ТекСтр.Каталог  		= Каталог;
			ТекСтр.НастройкаОбмена 	= Узел.Ссылка;
			ТекСтр.Операция 		= Операция;
			
		Иначе
					
			Итератор = Итератор + 1;

			Если Итератор > КоличествоВПакете Тогда
				Пакет = Пакет + 1;
				Итератор = 1;
			КонецЕсли;
			
			ТекСтр.НастройкаОбмена 	= Узел.Ссылка;
			ТекСтр.Каталог 			= Каталог;
			ТекСтр.Пакет 			= Пакет;
			ТекСтр.Операция 		= Операция;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция - Возвращает данные пользовательских справочников, которые нужно выгрузить на сайт
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена 
// Возвращаемое значение:
//   Таблица значений данных с пользовательскими справочниками 
Функция ПолучитьПользовательскиеСправочникиОбменаДляФормированияПакетов(ПараметрыОбмена)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Объект");
	Результат.Колонки.Добавить("ТипОбъекта");
	Результат.Колонки.Добавить("ПользовательскийСправочник");
	
	тзнСправочников = ПараметрыОбмена.ВыгружаемыеПоляСправочников.Скопировать();
	тзнСправочников.Свернуть("Справочник");
	
	Для каждого ТекСпр из тзнСправочников Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПользовательскийСправочник.Ссылка КАК Объект
		|ИЗ
		|	Справочник." +  ТекСпр.Справочник + " КАК ПользовательскийСправочник
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ПолнаяВыгрузка
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ПользовательскийСправочник.Ссылка В
		|					(ВЫБРАТЬ
		|						ПользовательскийСправочникИзменений.Ссылка
		|					ИЗ
		|						Справочник." +  ТекСпр.Справочник + ".Изменения КАК ПользовательскийСправочникИзменений
		|					ГДЕ
		|						ПользовательскийСправочникИзменений.Узел = &Узел)
		|		КОНЕЦ";
		Запрос.УстановитьПараметр("Узел",ПараметрыОбмена.Ссылка);
		Запрос.УстановитьПараметр("ПолнаяВыгрузка",(НЕ ПараметрыОбмена.ВыгружатьТолькоИзменения ИЛИ ПараметрыОбмена.ВыполнятьПолнуюВыгрузкуПринудительно));
		
		ВыборкаЗначений = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗначений.Следующий() Цикл
			
			НовСтр = результат.Добавить();
			НовСтр.Объект 		= ВыборкаЗначений.Объект;
			НовСтр.ТипОбъекта	= "ПользовательскийСправочник";
			
			НовСтр.ПользовательскийСправочник = ТекСпр.Справочник;
			
		КонецЦикла;

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Процедура -  добавляет отбор по сегменту номеклатуры 
//
// Параметры:
//  НастройкиКД	 - 	 Компоновщик настроек данных, в которых нужно добавить отбор по сегменту номенклатуры 
Процедура УстановкаПараметровИспользованияСегментовНоменклатуры(КомпоновщикНастроек)
	
	ИспользуетсяОтборПоСегментуНоменклатуры = Ложь;
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	
	ПолеСегмент = Новый ПолеКомпоновкиДанных("СегментНоменклатуры");
	
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		Если ТипЗНЧ(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда Продолжить; КонецЕсли; 
		Если ЭлементОтбора.ЛевоеЗначение = ПолеСегмент Тогда 
			Если ЭлементОтбора.Использование Тогда
				ИспользуетсяОтборПоСегментуНоменклатуры = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИспользуетсяОтборПоСегментуНоменклатуры");
	ПараметрСКД.Значение = ИспользуетсяОтборПоСегментуНоменклатуры;
	ПараметрСКД.Использование = Истина;
	
КонецПроцедуры

// Процедура - добавляет отбор по номеклатуре, которая установена в пользовательском дереве групп или в выгружаемых группах товаров  
//
// Параметры:
//  КомпоновщикНастроек	 - 	 Компоновщик настроек данных, в которых нужно добавить отбор по номенклатуре 
//  ПараметрыОбмена		 - 	 Настройки узла обмена 
//  СтрокаКаталога		 - 	 Информация о каталоге(инфоблоке) 
Процедура УстановкаОтбораКомпоновщика(КомпоновщикНастроек, ПараметрыОбмена, СтрокаКаталога) 
	
	мДеревоГрупп 			= СтрокаКаталога.ДеревоГрупп;
	мСписокГруппКаталога 	= СтрокаКаталога.Группы;
	КлассифицироватьПоВидамНоменклатуры = ПараметрыОбмена.КлассифицироватьПоВидамНоменклатуры;
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	
	ОтборПоКаталогу   = "ПрограммныйОтборПоКаталогу";
	ОтборПоДеревуГрупп = "ПрограммныйОтборПоДеревуГрупп";
	
	// Удаляем программные отборы, если были
	
	МассивУдалить = Новый Массив;
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		Если ЭлементОтбора.ИдентификаторПользовательскойНастройки = ОтборПоКаталогу
			ИЛИ ЭлементОтбора.ИдентификаторПользовательскойНастройки = ОтборПоДеревуГрупп
			Тогда
			МассивУдалить.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдалитьЭлемент Из МассивУдалить Цикл
		Отбор.Элементы.Удалить(УдалитьЭлемент);
	КонецЦикла;
	
	//для оптимизации используем таблицы значений, т.к. их можно свернуть.
	СписокНоменклатурыДереваГрупп  = Новый СписокЗначений;
	ТаблицаНоменклатурыДереваГрупп = Новый ТаблицаЗначений;
	ТаблицаНоменклатурыДереваГрупп.Колонки.Добавить("Элемент");
	ТаблицаГруппНоменклатурыДереваГрупп = Новый ТаблицаЗначений;
	ТаблицаГруппНоменклатурыДереваГрупп.Колонки.Добавить("Элемент");
	
	мКлассифицироватьПоДеревуГрупп = НЕ мДеревоГрупп.Строки.Количество() = 0;
	

	Если мКлассифицироватьПоДеревуГрупп Тогда
		
		СписокНоменклатурыДереваГрупп  = Новый СписокЗначений;
		
		//для оптимизации используем таблицы значений, т.к. их можно свернуть.
		ТаблицаТоваровДереваГрупп = Новый ТаблицаЗначений;
		ТаблицаТоваровДереваГрупп.Колонки.Добавить("ИдГруппы");
		ТаблицаТоваровДереваГрупп.Колонки.Добавить("Номенклатура");
		ТаблицаТоваровДереваГрупп.Индексы.Добавить("Номенклатура");
		
		ТаблицаГруппНоменклатурыДереваГрупп = Новый ТаблицаЗначений;
		ТаблицаГруппНоменклатурыДереваГрупп.Колонки.Добавить("ИдГруппы");
		ТаблицаГруппНоменклатурыДереваГрупп.Колонки.Добавить("Номенклатура");
		
		ПодготовкаДанныхДереваГруппРекурсивно(ТаблицаТоваровДереваГрупп, мДеревоГрупп.Строки, ТаблицаГруппНоменклатурыДереваГрупп);
		
		ТаблицаТоваровДереваГрупп.Свернуть("Номенклатура");
		ТаблицаГруппНоменклатурыДереваГрупп.Свернуть("Номенклатура");
		МассивНоменклатурыДереваГрупп = ТаблицаТоваровДереваГрупп.ВыгрузитьКолонку("Номенклатура");
		СписокНоменклатурыДереваГрупп.ЗагрузитьЗначения(МассивНоменклатурыДереваГрупп);

		
		Если СписокНоменклатурыДереваГрупп.Количество() > 0 Тогда
			
			Если НЕ КлассифицироватьПоВидамНоменклатуры Тогда
			
				НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.ИдентификаторПользовательскойНастройки = ОтборПоДеревуГрупп;
				НовыйЭлемент.ЛевоеЗначение 	=  Новый ПолеКомпоновкиДанных("Номенклатура");
				НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				НовыйЭлемент.ПравоеЗначение = СписокНоменклатурыДереваГрупп;
				НовыйЭлемент.Использование 	= Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если мСписокГруппКаталога.Количество() > 0 Тогда
			НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлемент.ИдентификаторПользовательскойНастройки = ОтборПоКаталогу;
			
			Если КлассифицироватьПоВидамНоменклатуры Тогда
				НовыйЭлемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Номенклатура.ВидНоменклатуры");
			Иначе
				НовыйЭлемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Номенклатура");
			КонецЕсли;
			НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
			НовыйЭлемент.ПравоеЗначение = мСписокГруппКаталога;
			НовыйЭлемент.Использование = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Функция - возвращает запрос для выгрузки пакетов данных
//
// Параметры:
//  ПараметрыОбмена							 - 	 Настройки узла обмена 
//  Операция								 - 	 Признак, для каких данных нужно формировать запрос 
//  СхемаВыгрузки							 - 	 Схема компоновки данных выгрузки данных
//  НастройкиКомпоновщикаИзНастройкиОбмена	 - 	 Настройки отборов компоновки данных
//  ПолнаяВыгрузка							 - 	 Признак оповещающий, что это полная выгрузка данных 
//  СтрокаКаталога							 - 	 Информация о инфоблоке, куда должны выгружаться данные(товары, свойства) 
// Возвращаемое значение:
//  Запрос для получения пакетов данных  
Функция ПолучитьЗапросДляВыгрузкиПакетов(ПараметрыОбмена, Операция, СхемаВыгрузки, НастройкиКомпоновщикаИзНастройкиОбмена, ПолнаяВыгрузка, СтрокаКаталога = Неопределено)
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаВыгрузки)); 
	Если ЗначениеЗаполнено(НастройкиКомпоновщикаИзНастройкиОбмена) Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновщикаИзНастройкиОбмена);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаВыгрузки.НастройкиПоУмолчанию);
	КонецЕсли;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПолнаяВыгрузка");
	ПараметрСКД.Значение = ПолнаяВыгрузка;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Узел");
	ПараметрСКД.Значение = ПараметрыОбмена.Ссылка;
	ПараметрСКД.Использование = Истина;
	
	Если Операция = "Контрагенты" Тогда
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НадоВыгружатьКонтрагентов");
		ПараметрСКД.Значение = ПараметрыОбмена.ВыгрузкаКонтрагентов;
		ПараметрСКД.Использование = Истина;
	ИначеЕсли Операция = "Документы" Тогда
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ВыгружатьВсеДокументы");
		ПараметрСКД.Значение = ПараметрыОбмена.ВыгружатьВсеДокументы;
		ПараметрСКД.Использование = Истина;
		
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТочкаАктуальностиДокументов");
		ПараметрСКД.Значение = ПараметрыОбмена.ТочкаАктуальностиВыгрузкиДокументов;
		ПараметрСКД.Использование = Истина;
	ИначеЕсли Операция = "Товары" Тогда
		
		УстановкаПараметровИспользованияСегментовНоменклатуры(КомпоновщикНастроек);
	
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НадоВыгружатьТовары");
		ПараметрСКД.Значение = ПараметрыОбмена.ОбменТоварами;
		ПараметрСКД.Использование = Истина;
		
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
		ПараметрСКД.Значение = ПараметрыОбмена.ДатаФормирования;
		ПараметрСКД.Использование = Истина;
		
		УстановкаОтбораКомпоновщика(КомпоновщикНастроек, ПараметрыОбмена, СтрокаКаталога);   		
		
	ИначеЕсли Операция = "ОбщаяИнформация" Тогда
		
		УстановкаПараметровИспользованияСегментовНоменклатуры(КомпоновщикНастроек);
		
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НадоВыгружатьТовары");
		ПараметрСКД.Значение = ПараметрыОбмена.ОбменТоварами;
		ПараметрСКД.Использование = Истина;
		
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
		ПараметрСКД.Значение = ПараметрыОбмена.ДатаФормирования;
		ПараметрСКД.Использование = Истина;
		
		УстановкаОтбораКомпоновщика(КомпоновщикНастроек, ПараметрыОбмена, СтрокаКаталога);
		
	ИначеЕсли Операция = "Свойства" Тогда
		
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НадоВыгружатьСвойства");
		ПараметрСКД.Значение = ПараметрыОбмена.ВыгружатьСвойства;		
		ПараметрСКД.Использование = Истина;
		
	ИначеЕсли Операция = "Скидки" Тогда
		
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НадоВыгружатьСкидки");
		ПараметрСКД.Значение = ПараметрыОбмена.ВыгрузкаСкидок;
		ПараметрСКД.Использование = Истина;
		
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НадоВыгружатьВидыКартЛояльности");
		ПараметрСКД.Значение = ПараметрыОбмена.ВыгрузкаВидовКартЛояльности;
		ПараметрСКД.Использование = Истина;
	
	ИначеЕсли Операция = "КартыЛояльности" Тогда
	
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НадоВыгружатьКартыЛояльности");
		ПараметрСКД.Значение = ПараметрыОбмена.ВыгрузкаКартЛояльности;
		ПараметрСКД.Использование = Истина;
		
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НадоВыгружатьВидыКартЛояльности");
		ПараметрСКД.Значение = ПараметрыОбмена.ВыгрузкаВидовКартЛояльности;
		ПараметрСКД.Использование = Истина;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	
	Если Операция = "Свойства" Тогда
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаВыгрузки, ПолучитьОтборыСвойствДляФормированияПакетаДанных(КомпоновщикНастроек.ПолучитьНастройки()),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ИначеЕсли  Операция = "ОбщаяИнформация" Тогда
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаВыгрузки, ПолучитьОтборыОбщейИнформацииДляФормированияПакетаДанных(КомпоновщикНастроек.ПолучитьНастройки()),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Иначе
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаВыгрузки, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	КонецЕсли;

	Запрос.Текст = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
	
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	Возврат Запрос; 	
	
КонецФункции

// Функция - возвращает запрос по используемым свойствам
//
// Параметры:
//  ПараметрыОбмена							 - 	 Настройки узла обмена 
//  НастройкиКомпоновщикаИзНастройкиОбмена	 - 	 Настройки отборов компоновки данных
// Возвращаемое значение:
//  Запрос для получения пакетов данных  
Функция ПолучитьЗапросПоИспользуемымСвойствамТоваров(ПараметрыОбмена, НастройкиКомпоновщикаИзНастройкиОбмена)
	
	СхемаВыгрузки = ПараметрыОбмена.СтруктураСхемКомпоновки.Свойства;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПараметрыОбмена.СтруктураСхемКомпоновки.Свойства)); 
	Если ЗначениеЗаполнено(НастройкиКомпоновщикаИзНастройкиОбмена) Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновщикаИзНастройкиОбмена);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаВыгрузки.НастройкиПоУмолчанию);
	КонецЕсли;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПолнаяВыгрузка");
	ПараметрСКД.Значение 		= Истина;
	ПараметрСКД.Использование 	= Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Узел");
	ПараметрСКД.Значение 		= ПараметрыОбмена.Ссылка;
	ПараметрСКД.Использование 	= Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НадоВыгружатьСвойства");
	ПараметрСКД.Значение 		= Истина;		
	ПараметрСКД.Использование 	= Истина;
		
	Запрос = Новый Запрос;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаВыгрузки, ПолучитьОтборыСвойствДляФормированияПакетаДанных(КомпоновщикНастроек.ПолучитьНастройки()),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	Запрос.Текст = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
	
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	Возврат Запрос; 	
	
КонецФункции


// Функция - заполняет отборы и возвращает компоновщик настроек данных для формирования пакета данных свойств товаров и предложений 
//
// Параметры:
//  НастройкиКД	 - 	 Компоновщик настроек данных, в которых нужно добавить отборы 
// Возвращаемое значение:
//   Компоновщик настроек данных с добавленными отборами 
Функция ПолучитьОтборыСвойствДляФормированияПакетаДанных(НастройкиКД)
	
	Для каждого ТекОтбор Из НастройкиКД.Отбор.Элементы Цикл
		
		Если Строка(ТекОтбор.ЛевоеЗначение) <> "Свойство" Тогда
			
			НастройкиКД.Отбор.Элементы.Удалить(ТекОтбор);
			НастройкиКД = ПолучитьОтборыСвойствДляФормированияПакетаДанных(НастройкиКД);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НастройкиКД;
	
КонецФункции

// Функция - заполняет отборы и возвращает компоновщик настроек данных для формирования пакета данных общей информации 
//
// Параметры:
//  НастройкиКД	 - 	 Компоновщик настроек данных, в которых нужно добавить отборы 
// Возвращаемое значение:
//   Компоновщик настроек данных с добавленными отборами 
Функция ПолучитьОтборыОбщейИнформацииДляФормированияПакетаДанных(НастройкиКД)
	
	мМассивИспользуемыхОтборов = Новый Массив;
	
	мМассивИспользуемыхОтборов.Добавить("Склад");
	мМассивИспользуемыхОтборов.Добавить("СегментНоменклатуры");
	мМассивИспользуемыхОтборов.Добавить("Номенклатура");
	мМассивИспользуемыхОтборов.Добавить("Соглашение");
	мМассивИспользуемыхОтборов.Добавить("Остаток");
	                            
	Для каждого ТекОтбор Из НастройкиКД.Отбор.Элементы Цикл
		
		Если мМассивИспользуемыхОтборов.Найти(Строка(ТекОтбор.ЛевоеЗначение)) = Неопределено  Тогда
			
			НастройкиКД.Отбор.Элементы.Удалить(ТекОтбор);
			НастройкиКД = ПолучитьОтборыОбщейИнформацииДляФормированияПакетаДанных(НастройкиКД);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НастройкиКД;
	
КонецФункции


Функция ПолучитьТаблицуДанныхДляПакетовКонтейнеровДокументов(ПараметрыОбмена, Операция)
	
	Запрос = ПолучитьЗапросДляВыгрузкиПакетов(ПараметрыОбмена, Операция, ПараметрыОбмена.СтруктураСхемКомпоновки.Заказы, ПараметрыОбмена.НастройкиКомпоновкиДанныхЗаказов, ПараметрыОбмена.ПолнаяВыгрузка, Неопределено);
	ТаблицаВыгрузкиЗаказов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВыгрузкиОплат 	= ТаблицаВыгрузкиЗаказов.СкопироватьКолонки();
	ТаблицаВыгрузкиОтгрузок = ТаблицаВыгрузкиЗаказов.СкопироватьКолонки();
	
	Если ПараметрыОбмена.ВыгрузкаОплат Тогда
		
		Запрос = ПолучитьЗапросДляВыгрузкиПакетов(ПараметрыОбмена, Операция, ПараметрыОбмена.СтруктураСхемКомпоновки.Оплаты, ПараметрыОбмена.НастройкиКомпоновкиДанныхОплат, ПараметрыОбмена.ПолнаяВыгрузка, Неопределено);
		ТаблицаВыгрузкиОплат = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Если ПараметрыОбмена.ВыгрузкаОтгрузок Тогда
		
		Запрос = ПолучитьЗапросДляВыгрузкиПакетов(ПараметрыОбмена, Операция, ПараметрыОбмена.СтруктураСхемКомпоновки.Отгрузки, ПараметрыОбмена.НастройкиКомпоновкиДанныхОтгрузок, ПараметрыОбмена.ПолнаяВыгрузка, Неопределено);
		ТаблицаВыгрузкиОтгрузок = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВремЗаказы.Объект,
	|	ВремЗаказы.Заказ,
	|	ВремЗаказы.ТипОбъекта
	|ПОМЕСТИТЬ ВремЗаказы
	|ИЗ
	|	&ВремЗаказы КАК ВремЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремОплаты.Объект,
	|	ВремОплаты.Заказ,
	|	ВремОплаты.ТипОбъекта
	|ПОМЕСТИТЬ ВремОплаты
	|ИЗ
	|	&ВремОплаты КАК ВремОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремОтгрузки.Объект,
	|	ВремОтгрузки.Заказ,
	|	ВремОтгрузки.ТипОбъекта
	|ПОМЕСТИТЬ ВремОтгрузки
	|ИЗ
	|	&ВремОтгрузки КАК ВремОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВремЗаказы.Заказ КАК Объект,
	|	ВремЗаказы.ТипОбъекта
	|ИЗ
	|	ВремЗаказы КАК ВремЗаказы
	|ГДЕ
	|	ВремЗаказы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|	И ВремЗаказы.Заказ <> НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВремОплаты.Заказ,
	|	""Заказ""
	|ИЗ
	|	ВремОплаты КАК ВремОплаты
	|ГДЕ
	|	ВремОплаты.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|	И ВремОплаты.Заказ <> НЕОПРЕДЕЛЕНО
	|	И ВремОплаты.Заказ ССЫЛКА Документ.ЗаказКлиента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ВремОтгрузки.Заказ ССЫЛКА Документ.ЗаказКлиента  ИЛИ ВремОтгрузки.Заказ ЕСТЬ NULL
	|				ИЛИ ВремОтгрузки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка) 
	|			ТОГДА ВремОтгрузки.Объект
	|		ИНАЧЕ ВремОтгрузки.Заказ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ВремОтгрузки.Заказ ССЫЛКА Документ.ЗаказКлиента  ИЛИ ВремОтгрузки.Заказ ЕСТЬ NULL
	|				ИЛИ ВремОтгрузки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка) 
	|			ТОГДА ВремОтгрузки.ТипОбъекта
	|		ИНАЧЕ ""Заказ""
	|	КОНЕЦ
	|ИЗ
	|	ВремОтгрузки КАК ВремОтгрузки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ ВремОтгрузки.Заказ ССЫЛКА Документ.ЗаказКлиента  ИЛИ ВремОтгрузки.Заказ ЕСТЬ NULL
	|					ИЛИ ВремОтгрузки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|				ТОГДА ВремОтгрузки.Объект
	|			ИНАЧЕ ВремОтгрузки.Заказ
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА НЕ ВремОтгрузки.Заказ ССЫЛКА Документ.ЗаказКлиента  ИЛИ ВремОтгрузки.Заказ ЕСТЬ NULL
	|					ИЛИ ВремОтгрузки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка) 
	|				ТОГДА ВремОтгрузки.Объект
	|			ИНАЧЕ ВремОтгрузки.Заказ
	|		КОНЕЦ <> НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремОтгрузки";
	
	Запрос.УстановитьПараметр("ВремЗаказы",ТаблицаВыгрузкиЗаказов);
	Запрос.УстановитьПараметр("ВремОплаты",ТаблицаВыгрузкиОплат);
	Запрос.УстановитьПараметр("ВремОтгрузки",ТаблицаВыгрузкиОтгрузок);
	
	ТаблицаОбъектовОбменаВыгрузки = Запрос.Выполнить().Выгрузить();
	ТаблицаОбъектовОбменаВыгрузки.Свернуть("Объект, ТипОбъекта");
	
	Возврат ТаблицаОбъектовОбменаВыгрузки; 
	
КонецФункции
#КонецОбласти


#Область ОбщиеПроцедурыИФункцииОбмена

			///////////////////////////////////////////////////////////////////
			//			       ПРОЦЕДУРЫ И ФУНКЦИИ ОБМЕНА                   //
			/////////////////////////////////////////////////////////////////
			
// Получает тип свойства от типа объекта XDTO.
//
// Параметры:
//	ТипОбъектаXDTO - тип объекта XDTO, от которого требуется получить тип свойства
//	ИмяСвойства - имя свойства, тип которого нужно получить
//
//Возвращаемое значение:
//	ТипОбъектаXDTO.
//
Функция ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТипОбъектаXDTO, ИмяСвойства)
	
	ТипСвойства = ТипОбъектаXDTO.Свойства.Получить(ИмяСвойства).Тип;
	Возврат ТипСвойства;
	
КонецФункции

// Функция - возвращает таблицу пакетов данных по заданному узлу обмена и каталогу 
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  Каталог			 - 	 Идентификатор выгружаемого каталога 
// Возвращаемое значение:
//   Таблица значений с данными пакетов 
Функция ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, Каталог)
	
	Запрос = Новый Запрос;    	
	Запрос.Текст = "ВЫБРАТЬ
	|	Б_ПакетныйОбмен.Объект,
	|	Б_ПакетныйОбмен.Пакет КАК Пакет,
	|	Б_ПакетныйОбмен.ТипОбъекта,
	|	Б_ПакетныйОбмен.ПользовательскийСправочник,
	|	Б_ПакетныйОбмен.Статус
	|ИЗ
	|	РегистрСведений.Б_ПакетныйОбмен КАК Б_ПакетныйОбмен
	|ГДЕ
	|	Б_ПакетныйОбмен.НастройкаОбмена = &Обмен
	|	И Б_ПакетныйОбмен.Каталог = &Каталог
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пакет";
	Запрос.УстановитьПараметр("Обмен", ПараметрыОбмена.Ссылка);
	Запрос.УстановитьПараметр("Каталог", Каталог);
	тзнДанных = Запрос.Выполнить().Выгрузить();
	
	Возврат тзнДанных; 	
	
КонецФункции

// Функция - разбирает данные пакетов таблицы значений  
//
// Параметры:
//  МассивДанных - 	 Таблица значений с данными пакетов 
// Возвращаемое значение:
//  Структура с разобранными данными
Функция РазборМассиваДанныхПоТипамОбъектов(МассивДанных)
	
	Результат 			= Новый Структура;
	
	СпкНоменклатура 	= Новый СписокЗначений;
	СпкСклады 			= Новый СписокЗначений;
	СпкСоглашения		= Новый СписокЗначений;
	СпкСвойства 		= Новый СписокЗначений;
	СпкСвойства 		= Новый СписокЗначений;
	СпкЕдиницы 			= Новый СписокЗначений;
	СпкСкидки 			= Новый СписокЗначений;
	СпкВидыДК 			= Новый СписокЗначений;
	СпкКартыЛояльности	= Новый СписокЗначений;
	
	Для каждого ТекСтр Из МассивДанных Цикл
		Если ТекСтр.ТипОбъекта = "Номенклатура" Тогда
			СпкНоменклатура.Добавить(ТекСтр.Объект);	
		ИначеЕсли ТекСтр.ТипОбъекта = "Склад" Тогда
			СпкСклады.Добавить(ТекСтр.Объект);	
		ИначеЕсли ТекСтр.ТипОбъекта = "Соглашение" Тогда
			СпкСоглашения.Добавить(ТекСтр.Объект);	
		ИначеЕсли ТекСтр.ТипОбъекта = "Свойство" Тогда
			СпкСвойства.Добавить(ТекСтр.Объект);
		ИначеЕсли ТекСтр.ТипОбъекта = "ЕдиницаИзмерения" Тогда
			СпкЕдиницы.Добавить(ТекСтр.Объект);	
		ИначеЕсли ТекСтр.ТипОбъекта = "ВидДисконтнойКарты" Тогда
			СпкВидыДК.Добавить(ТекСтр.Объект);	
		ИначеЕсли ТекСтр.ТипОбъекта = "Скидка" Тогда
			СпкСкидки.Добавить(ТекСтр.Объект);	
		ИначеЕсли ТекСтр.ТипОбъекта = "ДисконтнаяКарта" Тогда
			СпкКартыЛояльности.Добавить(ТекСтр.Объект);	
		КонецЕсли;
	КонецЦикла;
	
	Результат.Вставить("Номенклатура"	, СпкНоменклатура);
	Результат.Вставить("Склады"			, СпкСклады);
	Результат.Вставить("Соглашения"		, СпкСоглашения);
	Результат.Вставить("Свойства"		, СпкСвойства);
	Результат.Вставить("Единицы"		, СпкЕдиницы);
	Результат.Вставить("Скидки"			, СпкСкидки);
	Результат.Вставить("ВидыДК"			, СпкВидыДК);
	Результат.Вставить("КартыЛояльности", СпкКартыЛояльности);
	
	Возврат Результат;
	
КонецФункции

// Процедура - Формирует файлы XML по ранее сфоримрованным пакетам данных. Файлы формируются в зависимости от типа операции
//
// Параметры:
//  ПараметрыОбмена	 - 	Настройки узла обмена  
//  Операция		 - 	Тип операции     
//  ЭтоДозагрузка	 - 	Если истина, то сначало выполянется дозагрузка неотправленных данных     
Процедура ФормированиеФайловXMLОбменаДанных(ПараметрыОбмена, Операция, ЭтоДозагрузка = Ложь) Экспорт
	
	Если Операция = "ОбщаяИнформация" Тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов общей информации в в XML.", ПараметрыОбмена);
		
		СтрокаКаталога = 0;
		
		Для Каждого СтрокаТаблицыКаталогов Из ПараметрыОбмена.ТаблицаКаталогов Цикл
			
			Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакета общей информации каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
			МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, СтрокаТаблицыКаталогов.ИдентификаторКаталога); 
			ВыгрузитьОбщуюИнформацию(ПараметрыОбмена, МассивДанных, Операция, СтрокаТаблицыКаталогов, СтрокаКаталога);
			СтрокаКаталога = СтрокаКаталога + 1;	
			Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакета общей информации каталога: " + СтрокаТаблицыКаталогов.Каталог + " завершена.", ПараметрыОбмена, Истина);
			
		КонецЦикла;	
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов общей информации в XML завершена.", ПараметрыОбмена);
		
	ИначеЕсли Операция = "Свойства" Тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов свойств в XML.", ПараметрыОбмена);
		
		СтрокаКаталога = 0;
		
		Для Каждого СтрокаТаблицыКаталогов Из ПараметрыОбмена.ТаблицаКаталогов Цикл
			
			Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакета свойства каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
			МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, СтрокаТаблицыКаталогов.ИдентификаторКаталога); 
			ВыгрузитьИнформациюОСвойствах(ПараметрыОбмена, МассивДанных, Операция, СтрокаТаблицыКаталогов, СтрокаКаталога);
			СтрокаКаталога = СтрокаКаталога + 1;	
			Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакета свойства каталога: " + СтрокаТаблицыКаталогов.Каталог + " завершена.", ПараметрыОбмена, Истина);
			
		КонецЦикла;	
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов свойств в XML завершена.", ПараметрыОбмена);
		
	ИначеЕсли Операция = "Товары" Тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов товаров в в XML.", ПараметрыОбмена);
		
		СтрокаКаталога = 0;
		
		Для Каждого СтрокаТаблицыКаталогов Из ПараметрыОбмена.ТаблицаКаталогов Цикл
			
			Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
			МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, СтрокаТаблицыКаталогов.ИдентификаторКаталога); 
			ВыгрузитьИнформациюОТоварах(ПараметрыОбмена, МассивДанных, Операция, СтрокаТаблицыКаталогов, СтрокаКаталога);
			СтрокаКаталога = СтрокаКаталога + 1;	
			Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов каталога: " + СтрокаТаблицыКаталогов.Каталог + " завершена.", ПараметрыОбмена, Истина);
			
		КонецЦикла;	
		
		Если НЕ ЭтоДозагрузка И НЕ ПараметрыОбмена.ВыгружатьТолькоИзменения И ПараметрыОбмена.ВыгружатьНаСайт И ПараметрыОбмена.ДеактивироватьТоварыЕслиПолнаяВыгрузка И (ПараметрыОбмена.ВыгружатьТовары ИЛИ ПараметрыОбмена.ВыгружатьПредложения) Тогда
			
			Если ПараметрыОбмена.ДатаДеактивацииПриПакетнойВыгрузке = Неопределено Тогда
				Б_ОбменССайтомСервер.СообщитьПодробно("Отправка запроса на деактивацию невозможна. ", ПараметрыОбмена, Истина);   
				Возврат;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Б_ПакетныйОбмен.Объект,
			|	Б_ПакетныйОбмен.Каталог,
			|	Б_ПакетныйОбмен.Пакет
			|ИЗ
			|	РегистрСведений.Б_ПакетныйОбмен КАК Б_ПакетныйОбмен
			|ГДЕ
			|	Б_ПакетныйОбмен.НастройкаОбмена = &ПараметрыОбмена
			|	И Б_ПакетныйОбмен.Каталог В(&МассивКаталогов)";
			Запрос.УстановитьПараметр("ПараметрыОбмена",ПараметрыОбмена.Ссылка);
			Запрос.УстановитьПараметр("МассивКаталогов",ПараметрыОбмена.ТаблицаКаталогов.ВыгрузитьКолонку("ИдентификаторКаталога"));
			
			ТзнВрем = запрос.Выполнить().Выгрузить();
			
			Если ТзнВрем.Количество() = 0 Тогда
				
				Б_ОбменССайтомСервер.СообщитьПодробно("Деактивация элементов, не попавшие в полную пакетную выгрузку.", ПараметрыОбмена, Истина);   
				
				ПараметрыЗапроса = ПараметрыОбмена.НастройкиПодключения.ПараметрЗапросаHTTP_ДеактивацияДанныхПоДате + ПараметрыОбмена.ДатаДеактивацииПриПакетнойВыгрузке;
				
				Б_ОбменССайтомСервер.ВыгрузитьДанныеНаСайтУпрощенно(ПараметрыОбмена, "catalog", ПараметрыЗапроса);
				
			КонецЕсли;
			
       	КонецЕсли;
		
		Если НЕ ЭтоДозагрузка И ПараметрыОбмена.ВыгружатьНаСайт Тогда
			
			Б_ОбменССайтомСервер.СообщитьПодробно("Отправка запроса об окончании выгрузки информации о товарах.", ПараметрыОбмена, Истина); 
			
			Б_ОбменССайтомСервер.ВыгрузитьДанныеНаСайтУпрощенно(ПараметрыОбмена, "catalog", ПараметрыОбмена.НастройкиПодключения.ПараметрЗапросаHTTP_ОкончаниеВыгрузкиТоваров);
			
       	КонецЕсли;
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов товаров в XML завершена.", ПараметрыОбмена);
		
	ИначеЕсли Операция = "Скидки" Тогда
		
		Если ПараметрыОбмена.ВыгрузкаСкидок ИЛИ ПараметрыОбмена.ВыгрузкаВидовКартЛояльности Тогда
			Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов скидок в XML.", ПараметрыОбмена);
			МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, "Скидки");
			ВыгрузитьИнформациюОСкидках(ПараметрыОбмена,МассивДанных, Операция);
			Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов пользовательских справочников в XML завершена.", ПараметрыОбмена);
		КонецЕсли;
		
	ИначеЕсли Операция = "КартыЛояльности" Тогда
		
		Если ПараметрыОбмена.ВыгрузкаКартЛояльности Тогда
			Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов карт лояльности в XML.", ПараметрыОбмена);
			МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, "КартыЛояльности");
			ВыгрузитьИнформациюОКартахЛояльности(ПараметрыОбмена,МассивДанных, Операция);
			Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов карт лояльности в XML завершена.", ПараметрыОбмена);
		КонецЕсли;
		
	ИначеЕсли Операция = "ПользовательскиеСправочники" Тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов пользовательских справочников в XML.", ПараметрыОбмена);
		МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, "ПользовательскиеСправочники");
		ВыгрузитьПользовательскиеСправочникиXDTO(ПараметрыОбмена,МассивДанных, Операция);
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов пользовательских справочников в XML завершена.", ПараметрыОбмена);
		
	ИначеЕсли Операция = "Контрагенты" Тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов контрагентов в XML.", ПараметрыОбмена);
		
		МассивДанных = ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, "Контрагенты");
		
		ВыгрузитьКонтрагентов(ПараметрыОбмена, МассивДанных, Операция);
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов контрагентов в XML завершена.", ПараметрыОбмена);
		
	ИначеЕсли Операция = "Документы" Тогда
			
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов документов в XML.", ПараметрыОбмена);

		ТаблицаДокументов 	= ПолучитьДанныеИзРегистраПакетов(ПараметрыОбмена, "Документы");
		ВыгрузитьДокументы(ПараметрыОбмена, ТаблицаДокументов);
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов документов в XML завершена.", ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Функция - Записывает файлы XML и отправляет их на сайт
//
// Параметры:
//  ПараметрыОбмена				 - 	 Настройки узла обмена 
//  XDTOКоммерческаяИнформация	 - 	 Объект XDTO, которых будет записан как XML файл 
//  ИмяКаталога					 - 	 Имя каталога, где должен сохраниться XML файл 
//  ИмяФайла					 - 	 Наименование файла XML 
//  Операция					 - 	 Тип выгружаемых данных  
//  Пакет						 - 	 Номер выгружаемого пакета данных  
// Возвращаемое значение:
//   Истина, если данные успешно обработаны сайтом 
Функция ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, ИмяФайла, ПараметрHTTP, Пакет)
	
	ИмяКаталога = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ИмяКаталога); 	
	Успешно = Ложь;
	
	Если НЕ Б_ОбщиеПроцедурыИФункцииСервер.СуществуетФайл(ИмяКаталога) Тогда
		СоздатьКаталог(ИмяКаталога);	
	КонецЕсли;
	
	ПолноеИмяФайла = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows,ИмяКаталога +  "\" + ИмяФайла + "___" + Строка(Новый УникальныйИдентификатор) +  ".xml"); 
	
	МойXML = Новый ЗаписьXML;
	МойXML.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
	МойXML.ЗаписатьОбъявлениеXML();
	
	
	//XDTOКоммерческаяИнформация.Проверить();
	
	ФабрикаXDTO.ЗаписатьXML(МойXML, XDTOКоммерческаяИнформация, "КоммерческаяИнформация"); 
	МойXML.Закрыть();
	
	Если ПараметрыОбмена.ХранитьФайлыОбменаНаСайте И ПараметрыОбмена.ВыгружатьНаСайт И ПараметрыОбмена.ВыгружатьЛогНаСайт Тогда
		
		КаталогХранения 		= Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогЛога + "\reports\" + СокрЛП(ПараметрыОбмена.Ссылка.Код) + "\" + ?(Пакет = 0, "", Строка(Пакет)));
		ПолноеИмяФайлаХранения 	= Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, КаталогХранения +  "\" + ИмяФайла +  ".xml"); 
		
		Если НЕ Б_ОбщиеПроцедурыИФункцииСервер.СуществуетФайл(КаталогХранения) Тогда
			СоздатьКаталог(КаталогХранения);	
		КонецЕсли;

		КопироватьФайл(ПолноеИмяФайла, ПолноеИмяФайлаХранения);
		
	КонецЕсли;	
	
	лПродолжатьПопытки 	= Истина;
	лЧислоПопыток		= 0;
	
	МассивПодкаталогов = Новый Массив;
	
	лВыгружатьКартинкиИФайлы = ?(ИмяФайла = "offers" , ПараметрыОбмена.ВыгружатьКартинкиИФайлыПредложений, ПараметрыОбмена.ВыгружатьКартинкиИФайлы);
		
	Если лВыгружатьКартинкиИФайлы Тогда
		
		МассивПодкаталогов.Добавить(ПараметрыОбмена.ПодкаталогФайлов);
		
	КонецЕсли;
	
	Если ПараметрыОбмена.ВыгружатьНаСайт Тогда
		
		//Отправляем на сервер	
		
		Если ПараметрHTTP = "catalog" Тогда
			
			МассивПодкаталогов = Новый Массив;
			
			Если ПараметрыОбмена.ВыгружатьКартинкиИФайлы Тогда
				
				МассивПодкаталогов.Добавить(ПараметрыОбмена.ПодкаталогФайлов);
				
			КонецЕсли;
		КонецЕсли;
		
		Пока лПродолжатьПопытки цикл
			
			Если лЧислоПопыток > 0 И ПараметрыОбмена.ТаймаутМеждуПовторамиНеудачноОтправленныхПакетах Тогда
				Б_ОбменССайтомСервер.Таймаут(ПараметрыОбмена.ТаймаутМеждуПовторамиНеудачноОтправленныхПакетах);
			КонецЕсли;
			
			Успешно = Б_ОбменССайтомСервер.ВыгрузитьДанныеНаСайт(ПараметрыОбмена, ИмяКаталога, ПолноеИмяФайла, МассивПодкаталогов, Истина, ПараметрHTTP);
			
			Если Успешно ИЛИ лЧислоПопыток = ПараметрыОбмена.ЧислоПовторовПриНеудачноОтправленныхПакетах Тогда
				лПродолжатьПопытки = Ложь;
			КонецЕсли;

			лЧислоПопыток = лЧислоПопыток + 1;
			
		КонецЦикла;
		
		Б_ОбщиеПроцедурыИФункцииСервер.КаталогОчищен(ИмяКаталога, ПараметрыОбмена);	

	КонецЕсли;	
		
	Возврат Успешно;
	
КонецФункции


// Процедура - Удаляет регистрацию измений данных, если они успешно выгружены на сайт
//
// Параметры:
//  Успешно					 - 	 Признак успешности выгрузки данных на сайт 
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Пакет					 - 	 Номер пакета данных 
//  ИдентификаторКаталога	 - 	 Идентификатор каталога(инфоблока), куда были выгружены данные 
//  МассивСтрок				 - 	 Массив данных, для которых нужно удалить регистрацию изменений, если обмен успешен  
//  МассивКартинок			 - 	 Массив картинок, для которых нужно удалить регистрацию изменений, если обмен успешен 
//  МассивФайлов			 - 	 Массив файлов, для которых нужно удалить регистрацию изменений, если обмен успешен 
Процедура УдалениеПакетовИРегистраций(Успешно, ПараметрыОбмена, Операция, Пакет, ИдентификаторКаталога, МассивСтрок, МассивКартинок = Неопределено, МассивФайлов = Неопределено)
	
	Если Успешно ИЛИ НЕ ПараметрыОбмена.ВыгружатьНаСайт Тогда
		НаборЗаписей = РегистрыСведений.Б_ПакетныйОбмен.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пакет.Установить(Пакет);
		НаборЗаписей.Отбор.НастройкаОбмена.Установить(ПараметрыОбмена.Ссылка);
		НаборЗаписей.Отбор.Каталог.Установить(ИдентификаторКаталога);
		НаборЗаписей.Отбор.Операция.Установить(Операция);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	Если Успешно  Тогда
		
		Для Каждого Данные Из МассивСтрок Цикл
			
			ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыОбмена.Ссылка, Данные.Объект);
		
		КонецЦикла; 
		
		Если МассивКартинок <> неопределено Тогда
			Для Каждого Данные Из МассивКартинок Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыОбмена.Ссылка, Данные);
			КонецЦикла;
		КонецЕсли;                    		
		МассивКартинок = Неопределено;
		
		Если МассивФайлов <> неопределено Тогда
			Для Каждого Данные Из МассивФайлов Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыОбмена.Ссылка, Данные);
			КонецЦикла;
		КонецЕсли;
		МассивФайлов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Удаляет регистрацию измений данных общей информации, если она успешно выгружены на сайт
//
// Параметры:
//  Успешно					 - 	 Признак успешности выгрузки данных на сайт 
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Пакет					 - 	 Номер пакета данных 
//  ИдентификаторКаталога	 - 	 Идентификатор каталога(инфоблока), куда были выгружены данные 
//  МассивСтрок				 - 	 Массив данных, для которых нужно удалить регистрацию изменений, если обмен успешен  
Процедура УдалениеПакетовИРегистрацийОбщейИнформации(Успешно, ПараметрыОбмена, Операция, Пакет, ИдентификаторКаталога, МассивСтрок)
	
	Если Успешно ИЛИ НЕ ПараметрыОбмена.ВыгружатьНаСайт Тогда
		НаборЗаписей = РегистрыСведений.Б_ПакетныйОбмен.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пакет.Установить(Пакет);
		НаборЗаписей.Отбор.НастройкаОбмена.Установить(ПараметрыОбмена.Ссылка);
		НаборЗаписей.Отбор.Каталог.Установить(ИдентификаторКаталога);
		НаборЗаписей.Отбор.Операция.Установить(Операция);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	Если Успешно  Тогда
		
		Для Каждого Данные Из МассивСтрок Цикл
			
			Если Данные.ТипОбъекта <> "ТоварДляГруппы" Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыОбмена.Ссылка, Данные.Объект);
			КонецЕсли;
		
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - возвращает объект XDTO "Адрес", заполненный данными из представления адреса 1С
//
// Параметры:
//  ПараметрыОбмена		 - 	 Настройки узла обмена  
//  ПредставлениеАдреса	 - 	 Предоставление адреса в 1С 
// Возвращаемое значение:
//   бъект XDTO "Адрес" 
Функция ПолучитьАдресXDTO(ПараметрыОбмена, ПредставлениеАдреса)
	
	XDTOАдресТип 				= ФабрикаXDTO.Создать("Адрес");
	XDTOАдресноеПолеТип 		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOАдресТип, "АдресноеПоле");
	
	XDTOАдрес					= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOАдресТип);	
	XDTOАдрес.Представление 	= ПредставлениеАдреса.Представление;
		
	СписокПолей = Б_ОбменССайтомСервер.ПолучитьСписокПолейПоСтроке(ПредставлениеАдреса.ЗначенияПолей);
	
	Для Каждого ПолеКИ Из СписокПолей Цикл
		
		Если НЕ ЗначениеЗаполнено(ПолеКИ.Значение) тогда
			Продолжить;
		КонецЕсли;
				
		Если ПолеКИ.Представление = "Индекс" Тогда
			Б_ОбменССайтомСервер.ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Почтовый индекс", ПолеКИ.Значение);	
		ИначеЕсли ПолеКИ.Представление = "НаселенныйПункт" Тогда
			Б_ОбменССайтомСервер.ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Населенный пункт", ПолеКИ.Значение);	
		ИначеЕсли ПолеКИ.Представление = "Регион" Тогда
			Б_ОбменССайтомСервер.ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Регион", ПолеКИ.Значение);	
		ИначеЕсли ПолеКИ.Представление = "Страна" Тогда
			Б_ОбменССайтомСервер.ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Страна", ПолеКИ.Значение);	
		ИначеЕсли ПолеКИ.Представление = "Район" Тогда
			Б_ОбменССайтомСервер.ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Район", ПолеКИ.Значение);	
		ИначеЕсли ПолеКИ.Представление = "Город" Тогда
			Б_ОбменССайтомСервер.ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Город", ПолеКИ.Значение);	
		ИначеЕсли ПолеКИ.Представление = "Улица" Тогда
			Б_ОбменССайтомСервер.ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Улица", ПолеКИ.Значение);	
		ИначеЕсли ПолеКИ.Представление = "Дом" Тогда
			Б_ОбменССайтомСервер.ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Дом", ПолеКИ.Значение);	
		ИначеЕсли ПолеКИ.Представление = "Корпус" Тогда
			Б_ОбменССайтомСервер.ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Корпус", ПолеКИ.Значение);	
		ИначеЕсли ПолеКИ.Представление = "Квартира" Тогда
			Б_ОбменССайтомСервер.ДобавитьАдресноеПолеXDTO(ПараметрыОбмена, XDTOАдрес, XDTOАдресноеПолеТип, "Квартира", ПолеКИ.Значение);	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат XDTOАдрес; 
	
КонецФункции

// Функция - возвращает Объект XDTO "КоммерческаяИнформация"
//
// Параметры:
//  ПараметрыОбмена					 - 	 Настройки узла обмена  
//  XDTOКоммерческаяИнформацияТип	 - 	 Тип объекта XDTO "КоммерческаяИнформация" 
// Возвращаемое значение:
//   Объект XDTO "КоммерческаяИнформация" 
Функция ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип)
	
	XDTOКоммерческаяИнформация 					= ФабрикаXDTO.Создать(XDTOКоммерческаяИнформацияТип); 
	XDTOКоммерческаяИнформация.ВерсияСхемы 		= ПараметрыОбмена.ВерсияСхемы;
	XDTOКоммерческаяИнформация.Ид 				= ПараметрыОбмена.Идентификатор;
	XDTOКоммерческаяИнформация.ДатаФормирования = XMLСтрока(ТекущаяДатаСеанса());
	
	Возврат XDTOКоммерческаяИнформация;
	
КонецФункции

#КонецОбласти


#Область ВыгрузкаИнформацииОСкидках

			///////////////////////////////////////////////////////////////////
			//			 ВЫГРУЗКА ИНФОРМЦИИ О СКИДКАХ			            //
			/////////////////////////////////////////////////////////////////


// Функция - формиурет временные таблицы по информации о скидках пакета
//
// Параметры:
//  ПараметрыОбмена				 - 	 Настройки узла обмена 
//  СписокСкидок				 - 	 Список выгружаемых скидок 
//  СписокВидовДисконтныхКарт	 - 	 Список выгружаемых дисконтных карт 
//  спкНоменклатуры				 - 	 Список используемой номенклатуры 
//  спкКонтрагентов				 - 	 Список используемых контрагентов 
//  спкСоглашений				 - 	 Список используемых соглашений 
// Возвращаемое значение:
//   Менеджер временных таблиц, содержащий информацию о выгружаемых скидках 
Функция СформироватьВременныеТаблицыПоИнформацииОСкидкахПакета(ПараметрыОбмена, СписокСкидок, СписокВидовДисконтныхКарт, спкНоменклатуры, спкКонтрагентов, спкСоглашений)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Узел"	, ПараметрыОбмена.Ссылка);
	Запрос.УстановитьПараметр("ТекДата"	, ТекущаяДата());
	
	Запрос.УстановитьПараметр("СписокСкидок"				, СписокСкидок);
	Запрос.УстановитьПараметр("СписокВидовДисконтныхКарт"	, СписокВидовДисконтныхКарт);
	Запрос.УстановитьПараметр("СкладПоУмолчанию"			, Справочники.Склады.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("СписокКонтрагентов"			, спкКонтрагентов);
	Запрос.УстановитьПараметр("СписокНоменклатуры"			, спкНоменклатуры);
	Запрос.УстановитьПараметр("СписокСоглашений"			, спкСоглашений);
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	                                                                                                ///
	//             ПАКЕТ ЗАПРОСОВ ДЛЯ ПОЛУЧЕНИЯ НОМЕНКЛАТУРЫ С ХАРАКТЕРИСТИКОЙ                         ///
	//                                                                                                ///
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК Идентификатор,
	|	СкидкиНаценки.Ссылка КАК Скидка,
	|	СкидкиНаценки.ВерсияДанных,
	|	СкидкиНаценки.ПометкаУдаления,
	|	СкидкиНаценки.Наименование,
	|	СкидкиНаценки.Родитель.ВариантСовместногоПрименения КАК ВариантСовместногоПрименения,
	|	СкидкиНаценки.ВидЦены,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки,
	|	СкидкиНаценки.СпособПредоставления,
	|	СкидкиНаценки.ТекстСообщения,
	|	СкидкиНаценки.ВидКартыЛояльности,
	|	СкидкиНаценки.СегментПодарков,
	|	СкидкиНаценки.ИспользоватьКратность,
	|	СкидкиНаценки.УсловиеДляСкидкиКоличеством,
	|	СкидкиНаценки.РеквизитДопУпорядочивания КАК Приоритет,
	|	СкидкиНаценки.ВалютаПредоставления.Наименование КАК ВалютаКод,
	|	СкидкиНаценки.Родитель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИспользованиеНаСкладах.Количество, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДействуетНаСкладах,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИспользованиеВТиповыхСоглашениях.Количество, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДействуетВТиповыхСоглашениях,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИспользованиеВИндивидуальныхСоглашениях.Количество, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДействуетВИндивидуальныхСоглашениях,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИспользованиеВВидахКартЛояльности.Количество, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДействуетВКартахЛояльности,
	|	ЕСТЬNULL(ДействиеСкидокНаценокСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ДействиеСкидокНаценокСрезПоследних.Период ЕСТЬ NULL 
	|			ТОГДА ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ДействиеСкидокНаценокСрезПервых.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ ЕСТЬNULL(ДОБАВИТЬКДАТЕ(Таблица.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СкидкиНаценки.ЭтоГруппа
	|			ТОГДА NULL
	|		ИНАЧЕ ЕСТЬNULL(ДействиеСкидокНаценокСрезПоследних.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.НеДействует))
	|	КОНЕЦ КАК Статус
	|ПОМЕСТИТЬ ВремСкидки
	|ИЗ
	|	Справочник.СкидкиНаценки КАК СкидкиНаценки
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекДата, Источник = &СкладПоУмолчанию) КАК ДействиеСкидокНаценокСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МИНИМУМ(Т.Период) КАК Период,
	|				Т.СкидкаНаценка КАК СкидкаНаценка
	|			ИЗ
	|				РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекДата, Источник = &СкладПоУмолчанию) КАК Срез
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценок КАК Т
	|					ПО (Т.СкидкаНаценка = Срез.СкидкаНаценка)
	|						И (Т.Период > Срез.Период)
	|						И (Т.Источник = &СкладПоУмолчанию)
	|						И (Т.Статус <> Срез.Статус)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Т.СкидкаНаценка) КАК Таблица
	|			ПО (Таблица.СкидкаНаценка = ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка)
	|		ПО (ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка = СкидкиНаценки.Ссылка)}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценок.СрезПервых(&ТекДата, Источник = &СкладПоУмолчанию) КАК ДействиеСкидокНаценокСрезПервых
	|		ПО (ДействиеСкидокНаценокСрезПервых.СкидкаНаценка = СкидкиНаценки.Ссылка)}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Т.СкидкаНаценка КАК СкидкаНаценка,
	|			КОЛИЧЕСТВО(Т.Источник) КАК Количество
	|		ИЗ
	|			РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|					&ТекДата,
	|					Источник ССЫЛКА Справочник.Склады
	|						И Источник <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Т
	|		ГДЕ
	|			Т.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Т.СкидкаНаценка) КАК ИспользованиеНаСкладах
	|		ПО (ИспользованиеНаСкладах.СкидкаНаценка = СкидкиНаценки.Ссылка)}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Т.СкидкаНаценка КАК СкидкаНаценка,
	|			КОЛИЧЕСТВО(Т.Источник) КАК Количество
	|		ИЗ
	|			РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекДата, Источник ССЫЛКА Справочник.ВидыКартЛояльности) КАК Т
	|		ГДЕ
	|			Т.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Т.СкидкаНаценка) КАК ИспользованиеВВидахКартЛояльности
	|		ПО (ИспользованиеВВидахКартЛояльности.СкидкаНаценка = СкидкиНаценки.Ссылка)}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Т.СкидкаНаценка КАК СкидкаНаценка,
	|			КОЛИЧЕСТВО(Т.Источник) КАК Количество
	|		ИЗ
	|			РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|					&ТекДата,
	|					Источник ССЫЛКА Справочник.СоглашенияСКлиентами
	|						И ВЫРАЗИТЬ(Источник КАК Справочник.СоглашенияСКлиентами).Типовое) КАК Т
	|		ГДЕ
	|			Т.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Т.СкидкаНаценка) КАК ИспользованиеВТиповыхСоглашениях
	|		ПО (ИспользованиеВТиповыхСоглашениях.СкидкаНаценка = СкидкиНаценки.Ссылка)}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Т.СкидкаНаценка КАК СкидкаНаценка,
	|			КОЛИЧЕСТВО(Т.Источник) КАК Количество
	|		ИЗ
	|			РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|					&ТекДата,
	|					Источник ССЫЛКА Справочник.СоглашенияСКлиентами
	|						И ВЫРАЗИТЬ(Источник КАК Справочник.СоглашенияСКлиентами).Типовое = ЛОЖЬ) КАК Т
	|		ГДЕ
	|			Т.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Т.СкидкаНаценка) КАК ИспользованиеВИндивидуальныхСоглашениях
	|		ПО (ИспользованиеВИндивидуальныхСоглашениях.СкидкаНаценка = СкидкиНаценки.Ссылка)}
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&СписокСкидок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Скидка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНаценкиЦеновыеГруппы.Ссылка КАК Скидка,
	|	СкидкиНаценкиЦеновыеГруппы.ЗначениеСкидкиНаценки,
	|	ВЫБОР
	|		КОГДА Номенклатура.Б_Идентификатор <> """"
	|			ТОГДА Номенклатура.Б_Идентификатор
	|		ИНАЧЕ Номенклатура.Ссылка
	|	КОНЕЦ КАК ИдентификаторНоменклатура
	|ПОМЕСТИТЬ ВремУточненияСкидок
	|ИЗ
	|	Справочник.СкидкиНаценки.ЦеновыеГруппы КАК СкидкиНаценкиЦеновыеГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО СкидкиНаценкиЦеновыеГруппы.ЦеноваяГруппа = Номенклатура.ЦеноваяГруппа
	|ГДЕ
	|	СкидкиНаценкиЦеновыеГруппы.Ссылка В
	|			(ВЫБРАТЬ
	|				ВремСкидки.Скидка
	|			ИЗ
	|				ВремСкидки)
	|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Скидка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНаценкиУсловияПредоставления.Ссылка КАК Скидка,
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.Ссылка КАК Условие,
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.ВариантОпределенияПериодаНакопительнойСкидки КАК ВариантОпределенияПериодаНакопительнойСкидки,
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.ВариантНакопления КАК ВариантНакопления,
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж КАК КритерийОграниченияПримененияЗаОбъемПродаж,
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.ВалютаОграничения КАК ВалютаОграничения,
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.ФормаОплаты КАК ФормаОплаты,
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.ЗначениеУсловияОграничения КАК ЗначениеУсловияОграничения,
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.СегментНоменклатурыОграничения КАК СегментНоменклатурыОграничения,
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.ПериодНакопления КАК ПериодНакопления,
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.ТипСравнения КАК ТипСравнения,
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.ГруппаПользователей КАК ГруппаПользователей,
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.ВидКартыЛояльности КАК ВидКартыЛояльности,
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.УсловиеПредоставления КАК УсловиеПредоставления,
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.ВалютаОграничения.Наименование КАК ВалютаКод,
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.Наименование КАК Наименование,
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.СегментПартнеров КАК СегментПартнеров
	|ПОМЕСТИТЬ ВремУсловияСкидок
	|ИЗ
	|	Справочник.СкидкиНаценки.УсловияПредоставления КАК СкидкиНаценкиУсловияПредоставления
	|ГДЕ
	|	СкидкиНаценкиУсловияПредоставления.Ссылка В
	|			(ВЫБРАТЬ
	|				ВремСкидки.Скидка
	|			ИЗ
	|				ВремСкидки)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Скидка,
	|	Условие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УсловияПредоставленияСкидокНаценокВремяДействия.Ссылка КАК УсловиеСкидки,
	|	УсловияПредоставленияСкидокНаценокВремяДействия.ДеньНедели,
	|	УсловияПредоставленияСкидокНаценокВремяДействия.ВремяНачала,
	|	УсловияПредоставленияСкидокНаценокВремяДействия.ВремяОкончания
	|ПОМЕСТИТЬ ВремВремяДействияУсловийСкидок
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.ВремяДействия КАК УсловияПредоставленияСкидокНаценокВремяДействия
	|ГДЕ
	|	УсловияПредоставленияСкидокНаценокВремяДействия.Ссылка В
	|			(ВЫБРАТЬ
	|				ВремУсловияСкидок.Условие
	|			ИЗ
	|				ВремУсловияСкидок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	УсловиеСкидки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыКартЛояльности.Ссылка КАК Идентификатор,
	|	ВидыКартЛояльности.ВерсияДанных,
	|	ВидыКартЛояльности.ПометкаУдаления,
	|	ВидыКартЛояльности.Наименование
	|ПОМЕСТИТЬ ВремВидыКартЛояльности
	|ИЗ
	|	Справочник.ВидыКартЛояльности КАК ВидыКартЛояльности
	|ГДЕ
	|	ВидыКартЛояльности.Ссылка В(&СписокВидовДисконтныхКарт)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СоглашенияСКлиентами.Б_Идентификатор <> """"
	|			ТОГДА СоглашенияСКлиентами.Б_Идентификатор
	|		ИНАЧЕ СоглашенияСКлиентами.Ссылка
	|	КОНЕЦ КАК Идентификатор,
	|	СоглашенияСКлиентами.ВидЦен КАК ВидЦены
	|ПОМЕСТИТЬ ВремСоглашения
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
	|	И СоглашенияСКлиентами.Типовое
	|	И СоглашенияСКлиентами.ДоступноВнешнимПользователям
	|	И СоглашенияСКлиентами.Ссылка В(&СписокСоглашений)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураСегмента.Сегмент КАК Сегмент,
	|	ВЫБОР
	|		КОГДА НоменклатураСегмента.Номенклатура.Б_Идентификатор <> """"
	|			ТОГДА НоменклатураСегмента.Номенклатура.Б_Идентификатор
	|		ИНАЧЕ НоменклатураСегмента.Номенклатура
	|	КОНЕЦ КАК ИдентификаторНоменклатуры,
	|	ВЫБОР
	|		КОГДА НоменклатураСегмента.Характеристика.Б_Идентификатор <> """"
	|			ТОГДА НоменклатураСегмента.Характеристика.Б_Идентификатор
	|		ИНАЧЕ НоменклатураСегмента.Характеристика
	|	КОНЕЦ КАК ИдентификаторХарактеристики
	|ПОМЕСТИТЬ ВремСегментыНоменклатуры
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|ГДЕ
	|	НоменклатураСегмента.Номенклатура В(&СписокНоменклатуры)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сегмент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.СкидкаНаценка КАК Скидка,
	|	ВЫБОР
	|		КОГДА Т.Источник.Б_Идентификатор = """"
	|			ТОГДА Т.Источник
	|		ИНАЧЕ Т.Источник.Б_Идентификатор
	|	КОНЕЦ КАК Идентификатор
	|ПОМЕСТИТЬ ВремИспользованиеСкидокДляТиповыхСоглашений
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|			&ТекДата,
	|			Источник ССЫЛКА Справочник.СоглашенияСКлиентами
	|				И ВЫРАЗИТЬ(Источник КАК Справочник.СоглашенияСКлиентами).Типовое
	|				И СкидкаНаценка.Ссылка В
	|					(ВЫБРАТЬ
	|						ВремСкидки.Скидка
	|					ИЗ
	|						ВремСкидки)
	|				И Источник В
	|					(ВЫБРАТЬ
	|						ВремСоглашения.Идентификатор
	|					ИЗ
	|						ВремСоглашения)) КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Скидка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.СкидкаНаценка КАК Скидка,
	|	Т.Источник КАК Идентификатор
	|ПОМЕСТИТЬ ВремИспользованиеСкидокДляВидовКартЛояльности
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|			&ТекДата,
	|			Источник ССЫЛКА Справочник.ВидыКартЛояльности
	|				И Источник В
	|					(ВЫБРАТЬ
	|						ВремВидыКартЛояльности.Идентификатор
	|					ИЗ
	|						ВремВидыКартЛояльности)) КАК Т
	|ГДЕ
	|	Т.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Скидка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыСегмента.Сегмент КАК Сегмент,
	|	ВЫБОР
	|		КОГДА Контрагенты.Б_Идентификатор <> """"
	|			ТОГДА Контрагенты.Б_Идентификатор
	|		ИНАЧЕ Контрагенты.Ссылка
	|	КОНЕЦ КАК ИдентификаторКонтрагента
	|ПОМЕСТИТЬ ВремСегментыПартнеров
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|		ПО ПартнерыСегмента.Партнер = Контрагенты.Партнер
	|ГДЕ
	|	Контрагенты.Ссылка В(&СписокКонтрагентов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сегмент";	
	
	лМенеджерВременныхТаблиц 		= Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц 	= лМенеджерВременныхТаблиц; 
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();	
	
	Возврат лМенеджерВременныхТаблиц;
	
КонецФункции

// Процедура - выгружает информацию о скидках и и видах карт лояльности
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена 
//  МассивДанных	 - 	 Таблица значений с данными о выгружаемых скидках 
Процедура ВыгрузитьИнформациюОСкидках(ПараметрыОбмена,МассивДанных, Операция)
				
	СписокВидовКарт		= Новый СписокЗначений;
	спкНоменклатуры		= Новый Массив;
	спкКонтрагентов		= Новый Массив;
	спкСоглашений		= Новый Массив;
	
	Успешно = Ложь;
	
	XDTOКоммерческаяИнформацияТип 	= ПараметрыОбмена.ФайлСхемы.Получить("КоммерческаяИнформация");
	
	лКоличествоСтрок = МассивДанных.Количество();
	КоличествоПакетов = ?(лКоличествоСтрок > 0, МассивДанных[лКоличествоСтрок - 1].Пакет, -1); 
	
	Для Пакет = 0 по КоличествоПакетов Цикл
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Начало выгрузки пакета " + Строка(Пакет), ПараметрыОбмена);
		
		МассивСтрок = МассивДанных.НайтиСтроки(Новый структура("Пакет", Пакет));	
		
		РазбитаяСтруктураДанных = РазборМассиваДанныхПоТипамОбъектов(МассивСтрок);
			
		Если Пакет = 0 Тогда
			СписокВидовКарт 	= РазбитаяСтруктураДанных.ВидыДК;
			
			спкНоменклатуры 	= Б_ОбменССайтомСервер.ПолучитьМассивЭлементовПоОтборуКомпоновки("Справочник.Номенклатура"			, ПараметрыОбмена.НастройкиКомпоновкиДанныхСкидок.Отбор.Элементы[3]);
			спкКонтрагентов 	= Б_ОбменССайтомСервер.ПолучитьМассивЭлементовПоОтборуКомпоновки("Справочник.Контрагенты"			, ПараметрыОбмена.НастройкиКомпоновкиДанныхСкидок.Отбор.Элементы[4]);
			спкСоглашений 		= Б_ОбменССайтомСервер.ПолучитьМассивЭлементовПоОтборуКомпоновки("Справочник.СоглашенияСКлиентами"	, ПараметрыОбмена.НастройкиКомпоновкиДанныхСкидок.Отбор.Элементы[5]);
			
		КонецЕсли;
		
		
		СписокСкидок 		= РазбитаяСтруктураДанных.Скидки;
		
		лМенеджерВременныхТаблиц = СформироватьВременныеТаблицыПоИнформацииОСкидкахПакета(ПараметрыОбмена, СписокСкидок, СписокВидовКарт, спкНоменклатуры, спкКонтрагентов, спкСоглашений);
		
		ИмяКаталога = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ?(Пакет > 0, ПараметрыОбмена.КаталогНаДиске + "\discount\" + Строка(Пакет), ПараметрыОбмена.КаталогНаДиске + "\discount\")); 
				
		XDTOКоммерческаяИнформация 	= ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);

		Если ПараметрыОбмена.ВыгрузкаВидовКартЛояльности И Пакет = 0 Тогда
			ВыгрузитьВидыКартЛояльностиXDTO(ПараметрыОбмена, XDTOКоммерческаяИнформация, XDTOКоммерческаяИнформацияТип, лМенеджерВременныхТаблиц);
		КонецЕсли;
		
		Если ПараметрыОбмена.ВыгрузкаСкидок Тогда
			ВыгрузитьСкидкиXDTO(ПараметрыОбмена, XDTOКоммерческаяИнформация, XDTOКоммерческаяИнформацияТип, лМенеджерВременныхТаблиц);
		КонецЕсли;
		
		лМенеджерВременныхТаблиц.Закрыть();
		
		Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "discount", "catalog", Пакет);		
				
		УдалениеПакетовИРегистраций(Успешно, ПараметрыОбмена, Операция, Пакет, "Скидки", МассивСтрок);
			
		Если Успешно Или НЕ ПараметрыОбмена.ВыгружатьНаСайт Тогда
			Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузки пакета " + Строка(Пакет) + " завершена.", ПараметрыОбмена);
		Иначе
			Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакета " + Строка(Пакет) + " НЕ завершена или завершена с ошибками.", ПараметрыОбмена);
		КонецЕсли;
		
	КонецЦикла;			
				
КонецПроцедуры 

// Процедура - выгружает виды виды карт лояльности в объект XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 Владелец объект XDTO, в который добавляются виды карт лояльности
//  ВладелецТип				 - 	 Тип владельца объекта XDTO, в который добавляются виды карт лояльности  
//  МенеджерВременныхТаблиц	 - 	 Менеджер временных таблиц, содержащий информацию скидках
Процедура ВыгрузитьВидыКартЛояльностиXDTO(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц)
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка видов карт лояльности в XML.", ПараметрыОбмена);
	Итератор = 0;
	
	XDTOВидыДисконтныхКартТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "ВидыДисконтныхКарт");	
	XDTOВидыДисконтныхКарт 	= ФабрикаXDTO.Создать(XDTOВидыДисконтныхКартТип); 
	
	XDTOВидДисконтнойКартыТип = ПараметрыОбмена.ФайлСхемы.Получить("ВидДисконтнойКарты");	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремВидыКартЛояльности КАК ВремВидыКартЛояльности";
	ВыборкаВидов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаВидов.Следующий() Цикл
		
		XDTOВидДисконтнойКарты					= ФабрикаXDTO.Создать(XDTOВидДисконтнойКартыТип); 
		
		XDTOВидДисконтнойКарты.Ид				= XMLСтрока(ВыборкаВидов.Идентификатор);
		XDTOВидДисконтнойКарты.НомерВерсии		= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, ВыборкаВидов.ВерсияДанных, "Видов карт лояльности");
		XDTOВидДисконтнойКарты.ПометкаУдаления	= XMLСтрока(ВыборкаВидов.ПометкаУдаления);
		XDTOВидДисконтнойКарты.Наименование		= XMLСтрока(ВыборкаВидов.Наименование);

		XDTOВидыДисконтныхКарт.ВидДисконтнойКарты.Добавить(XDTOВидДисконтнойКарты);
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка видов карт лояльности в XML завершено. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	
	Запрос = Новый Запрос("УНИЧТОЖИТЬ ВремВидыКартЛояльности");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Владелец.ВидыДисконтныхКарт = XDTOВидыДисконтныхКарт;
	
КонецПроцедуры

// Процедура - выгружает скидки в объект XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 Владелец объект XDTO, в который добавляются скидки
//  ВладелецТип				 - 	 Тип владельца объекта XDTO, в который добавляются скидки  
//  МенеджерВременныхТаблиц	 - 	 Менеджер временных таблиц, содержащий информацию скидках
Процедура ВыгрузитьСкидкиXDTO(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц)
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка скидок в XML.", ПараметрыОбмена);
	Итератор = 0;
	
	XDTOСкидкиТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "Скидки");	
	XDTOСкидки    = ФабрикаXDTO.Создать(XDTOСкидкиТип); 
	
	XDTOСкидкаТип = ПараметрыОбмена.ФайлСхемы.Получить("ИнформацияОСкидке");	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремСкидки КАК ВремСкидки";
	ВыборкаСкидок = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСкидок.Следующий() Цикл
		
		XDTOСкидка		= ФабрикаXDTO.Создать(XDTOСкидкаТип); 
		
		XDTOСкидка.Ид				= XMLСтрока(ВыборкаСкидок.Идентификатор);
		XDTOСкидка.НомерВерсии		= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, ВыборкаСкидок.ВерсияДанных, "Скидок");
		XDTOСкидка.ПометкаУдаления	= XMLСтрока(ВыборкаСкидок.ПометкаУдаления);
		XDTOСкидка.Наименование		= XMLСтрока(ВыборкаСкидок.Наименование);
		
		XDTOСкидка.Приоритет		= XMLСтрока(ВыборкаСкидок.Приоритет);
		
		Если ВыборкаСкидок.Статус = Перечисления.СтатусыДействияСкидок.Действует ИЛИ ВыборкаСкидок.ДействуетВИндивидуальныхСоглашениях ИЛИ ВыборкаСкидок.ДействуетВКартахЛояльности
			ИЛИ ВыборкаСкидок.ДействуетВТиповыхСоглашениях ИЛИ ВыборкаСкидок.ДействуетНаСкладах Тогда 
			XDTOСкидка.Активность		= XMLСтрока(Истина);
		Иначе
			XDTOСкидка.Активность		= XMLСтрока(Ложь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаСкидок.ДатаНачала) Тогда
			XDTOСкидка.ДатаНачала		= XMLСтрока(ВыборкаСкидок.ДатаНачала);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаСкидок.ДатаОкончания) Тогда
			XDTOСкидка.ДатаЗавершения	= XMLСтрока(ВыборкаСкидок.ДатаОкончания);
		КонецЕсли;
		
		Если ВыборкаСкидок.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
			XDTOСкидка.ГруппаСовместногоПрименения		= "Вытеснение";
		ИначеЕсли ВыборкаСкидок.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
			XDTOСкидка.ГруппаСовместногоПрименения		= "Максимум";
		ИначеЕсли ВыборкаСкидок.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум Тогда
			XDTOСкидка.ГруппаСовместногоПрименения		= "Минимум";
		ИначеЕсли ВыборкаСкидок.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Сложение Тогда
			XDTOСкидка.ГруппаСовместногоПрименения		= "Сложение";
		ИначеЕсли ВыборкаСкидок.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда
			XDTOСкидка.ГруппаСовместногоПрименения		= "Умножение";
		КонецЕсли;
		
		XDTOДополнительныеПараметрыТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOСкидкаТип, "ДополнительныеПараметры");	
		XDTOДополнительныеПараметры 		= ФабрикаXDTO.Создать(XDTOДополнительныеПараметрыТип); 
		
		Если ВыборкаСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦены Тогда
			
			лВидЦены = ПолучениеСоглашенияПоВидуЦены(ПараметрыОбмена, МенеджерВременныхТаблиц, ВыборкаСкидок.ВидЦены);
			
			XDTOСкидка.Значение     = XMLСтрока(?(ЗначениеЗаполнено(лВидЦены), лВидЦены, ""));
			XDTOСкидка.ТипСкидки	= "Специальная цена";
			
		ИначеЕсли ВыборкаСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.КартаЛояльности Тогда
			XDTOСкидка.Значение		= XMLСтрока(ВыборкаСкидок.ВидКартыЛояльности);
			XDTOСкидка.ТипСкидки	= "Выдача дисконтной карты"; 		
			
		ИначеЕсли ВыборкаСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Количество Тогда
			ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Условие для скидки количеством", ВыборкаСкидок.УсловиеДляСкидкиКоличеством);
			XDTOСкидка.Значение		= XMLСтрока(ВыборкаСкидок.ЗначениеСкидкиНаценки);
			XDTOСкидка.ТипСкидки	= "Скидка количеством";
			
		ИначеЕсли ВыборкаСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ОкруглениеСуммы Тогда
			
			Если ЗначениеЗаполнено(ВыборкаСкидок.ВалютаКод) Тогда
				ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Валюта", Лев(ВыборкаСкидок.ВалютаКод, 3 ));
			КонецЕсли;
			
			ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Точность округления"			, ВыборкаСкидок.ТочностьОкругления);
			ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Психологическое округление"	, ВыборкаСкидок.ПсихологическоеОкругление);
			ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Округлять в большую сторону"	, ВыборкаСкидок.ОкруглятьВБольшуюСторону);
			
			XDTOСкидка.Значение		= XMLСтрока(ВыборкаСкидок.ЗначениеСкидкиНаценки);
			XDTOСкидка.ТипСкидки	= "Округление суммы документа";
			
		ИначеЕсли ВыборкаСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок Тогда
			
			ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Использовать кратность"		, XMLСтрока(ВыборкаСкидок.ИспользоватьКратность));
			XDTOСкидка.Значение		= XMLСтрока(ВыборкаСкидок.ЗначениеСкидкиНаценки);
			
			Если ЗначениеЗаполнено(ВыборкаСкидок.СегментПодарков) Тогда
				ВыгрузитьПредложенийСегментаДляСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, МенеджерВременныхТаблиц, ВыборкаСкидок.СегментПодарков, "Ограничения по предложениям");
			КонецЕсли;
			
			XDTOСкидка.ТипСкидки	= "Подарок";
			
		ИначеЕсли ВыборкаСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
			XDTOСкидка.Значение		= XMLСтрока(ВыборкаСкидок.ЗначениеСкидкиНаценки);
			XDTOСкидка.ТипСкидки	= "Скидка (наценка) процентом";
			
		ИначеЕсли ВыборкаСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение Тогда
			XDTOСкидка.Значение		= XMLСтрока(ВыборкаСкидок.ТекстСообщения);
			XDTOСкидка.ТипСкидки	= "Выдача сообщения";
			
		ИначеЕсли ВыборкаСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма Тогда  
			
			Если ЗначениеЗаполнено(ВыборкаСкидок.ВалютаКод) Тогда
				ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Валюта", Лев(ВыборкаСкидок.ВалютаКод, 3 ));
			КонецЕсли;
			ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Использовать кратность"		, XMLСтрока(ВыборкаСкидок.ИспользоватьКратность));

			XDTOСкидка.Значение		= XMLСтрока(ВыборкаСкидок.ЗначениеСкидкиНаценки);
			XDTOСкидка.ТипСкидки	= "Скидка (наценка) суммой на документ";
			
		ИначеЕсли ВыборкаСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.СуммаДляКаждойСтроки Тогда
			Если ЗначениеЗаполнено(ВыборкаСкидок.ВалютаКод) Тогда
				ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Валюта", Лев(ВыборкаСкидок.ВалютаКод, 3 ));
			КонецЕсли;
			ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Использовать кратность"		, XMLСтрока(ВыборкаСкидок.ИспользоватьКратность));
			
			XDTOСкидка.Значение		= XMLСтрока(ВыборкаСкидок.ЗначениеСкидкиНаценки);
			XDTOСкидка.ТипСкидки	= "Скидка (наценка) суммой для каждой строки";
		КонецЕсли;	
		
		Если XDTOДополнительныеПараметры.ПараметрУсловия.Количество() > 0 Тогда
			XDTOСкидка.ДополнительныеПараметры = XDTOДополнительныеПараметры;
       	КонецЕсли;
		
		ВыгрузитьУточненияЗначенийСкидки(ПараметрыОбмена, XDTOСкидка, XDTOСкидкаТип, МенеджерВременныхТаблиц, ВыборкаСкидок.Скидка);
		
		ВыгрузитьТиповыеСоглашенияДляСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, МенеджерВременныхТаблиц, ВыборкаСкидок.Скидка, "Ограничения по типам цен");
		ВыгрузитьВидыКартЛояльностиДляСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, МенеджерВременныхТаблиц, ВыборкаСкидок.Скидка, "Ограничения по видам дисконтных карт");
		
		
		ВыгрузитьУсловияСкидки(ПараметрыОбмена, XDTOСкидка, XDTOСкидкаТип, МенеджерВременныхТаблиц, ВыборкаСкидок.Скидка);
		XDTOСкидки.Скидка.Добавить(XDTOСкидка);
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка скидок в XML завершено. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	
	Владелец.Скидки = XDTOСкидки;
	
КонецПроцедуры

// Функция - возвращает первое найденное соглашение по виду цены
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  МенеджерВременныхТаблиц	 - 	 Менеджер временных таблиц, содержащий информацию скидках
//  ВидЦены					 - 	 Вид цены 1С 
// Возвращаемое значение:
//   Соглашение 1С 
Функция ПолучениеСоглашенияПоВидуЦены(ПараметрыОбмена, МенеджерВременныхТаблиц, ВидЦены)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремСоглашения КАК ВремСоглашения
	| ГДЕ
	|ВремСоглашения.ВидЦены = &ВидЦены";
	Запрос.УстановитьПараметр("ВидЦены",ВидЦены);
	ВыборкаСоглашений = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСоглашений.Следующий() Цикл
		Возврат ВыборкаСоглашений.Идентификатор;
	КонецЦикла;
	
	Возврат Справочники.ВидыЦен.ПустаяСсылка();
	
КонецФункции
 
// Процедура - выгружает уточнения значений скидок в XDTO 
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 Владелец объект XDTO, в который добавляются уточнения значений скидок
//  ВладелецТип				 - 	 Тип владельца объекта XDTO, в который добавляются  уточнения значений скидок
//  МенеджерВременныхТаблиц	 - 	 Менеджер временных таблиц, содержащий информацию скидках
//  Скидка					 - 	 Скидка 1С 
Процедура ВыгрузитьУточненияЗначенийСкидки(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц, Скидка)
	
	XDTOУточненияЗначенийСкидокТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "УточненияЗначенийСкидок");	
	XDTOУточненияЗначенийСкидок 	= ФабрикаXDTO.Создать(XDTOУточненияЗначенийСкидокТип); 
	
	XDTOУточнениеЗначенияСкидкиТип	= ПараметрыОбмена.ФайлСхемы.Получить("УточнениеЗначенияСкидки");	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремУточненияСкидок КАК ВремУточненияСкидок	
	| ГДЕ
	|ВремУточненияСкидок.Скидка = &Скидка";
	Запрос.УстановитьПараметр("Скидка", Скидка);
	
	ВыборкаЗначений = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗначений.Следующий() Цикл
		
		XDTOУточнениеЗначенияСкидки 			= ФабрикаXDTO.Создать(XDTOУточнениеЗначенияСкидкиТип); 
		
		XDTOУточнениеЗначенияСкидки.Товар 		= XMLСтрока(ВыборкаЗначений.ИдентификаторНоменклатура);
		XDTOУточнениеЗначенияСкидки.Значение 	= XMLСтрока(ВыборкаЗначений.ЗначениеСкидкиНаценки);
		 
		XDTOУточненияЗначенийСкидок.УточнениеЗначенияСкидки.Добавить(XDTOУточнениеЗначенияСкидки);
		
	КонецЦикла;
	
	Если XDTOУточненияЗначенийСкидок.УточнениеЗначенияСкидки.Количество() > 0 Тогда
		Владелец.УточненияЗначенийСкидок = XDTOУточненияЗначенийСкидок;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - выгружает типовые соглашения для скидки в XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 Владелец объект(Скидка) XDTO, 
//  ВладелецТип				 - 	 Тип владельца объекта(Скидка) XDTO  
//  МенеджерВременныхТаблиц	 - 	 Менеджер временных таблиц, содержащий информацию скидках
//  Скидка					 - 	 Ссылка на скидку 1С 
//  НаименованиеПараметра	 - 	 Наименование параметра 
Процедура ВыгрузитьТиповыеСоглашенияДляСкидки(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц, Скидка, НаименованиеПараметра)
	
	XDTOПараметрУсловияТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "ПараметрУсловия");	
	XDTOПараметрУсловия 	= ФабрикаXDTO.Создать(XDTOПараметрУсловияТип); 
	
	XDTOПараметрУсловия.Наименование 	= НаименованиеПараметра;	
	
	XDTOТипыЦенТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOПараметрУсловияТип, "ТипыЦен");	
	XDTOТипыЦен 	= ФабрикаXDTO.Создать(XDTOТипыЦенТип); 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремИспользованиеСкидокДляТиповыхСоглашений КАК ВремИспользованиеСкидокДляТиповыхСоглашений	
	| ГДЕ
	|ВремИспользованиеСкидокДляТиповыхСоглашений.Скидка = &Скидка";
	Запрос.УстановитьПараметр("Скидка", Скидка);
	
	ВыборкаЗначений = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗначений.Следующий() Цикл
		
		XDTOТипыЦен.ТипЦены.Добавить(XMLСтрока(ВыборкаЗначений.Идентификатор));
		
	КонецЦикла;
	
	Если XDTOТипыЦен.ТипЦены.количество() > 0 Тогда
		XDTOПараметрУсловия.ТипыЦен = XDTOТипыЦен;
		Владелец.ПараметрУсловия.Добавить(XDTOПараметрУсловия);	
	КонецЕсли;

КонецПроцедуры

// Процедура - выгружает виды карт лояльности для скидки в XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 Владелец объект(Скидка) XDTO, 
//  ВладелецТип				 - 	 Тип владельца объекта(Скидка) XDTO  
//  МенеджерВременныхТаблиц	 - 	 Менеджер временных таблиц, содержащий информацию скидках
//  Скидка					 - 	 Ссылка на скидку 1С 
//  НаименованиеПараметра	 - 	 Наименование параметра 
Процедура ВыгрузитьВидыКартЛояльностиДляСкидки(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц, Скидка, НаименованиеПараметра)
	
	
	XDTOПараметрУсловияТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип,  "ПараметрУсловия");	
	XDTOПараметрУсловия 	= ФабрикаXDTO.Создать(XDTOПараметрУсловияТип); 
	
	XDTOПараметрУсловия.Наименование = НаименованиеПараметра;	
	
	XDTOВидыДисконтныхКартТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOПараметрУсловияТип,  "ВидыДисконтныхКарт");	
	XDTOВидыДисконтныхКарт 		= ФабрикаXDTO.Создать(XDTOВидыДисконтныхКартТип); 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремИспользованиеСкидокДляВидовКартЛояльности КАК ВремИспользованиеСкидокДляВидовКартЛояльности	
	| ГДЕ
	|ВремИспользованиеСкидокДляВидовКартЛояльности.Скидка = &Скидка";
	Запрос.УстановитьПараметр("Скидка", Скидка);
	
	ВыборкаЗначений = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗначений.Следующий() Цикл
		
		XDTOВидыДисконтныхКарт.ВидДисконтнойКарты.Добавить(XMLСтрока(ВыборкаЗначений.Идентификатор));
		
	КонецЦикла;
	
	Если XDTOВидыДисконтныхКарт.ВидДисконтнойКарты.количество() > 0 Тогда
		XDTOПараметрУсловия.ВидыДисконтныхКарт = XDTOВидыДисконтныхКарт;
		Владелец.ПараметрУсловия.Добавить(XDTOПараметрУсловия);	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - выгружает предложений сегмента для скидки в XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 Владелец объект XDTO, в который добавляется параметр с предложениями сегмента
//  ВладелецТип				 - 	 Тип владельца объекта XDTO, в который добавляется  параметр с предложениями сегмента
//  МенеджерВременныхТаблиц	 - 	 Менеджер временных таблиц, содержащий информацию скидках
//  Сегмент					 - 	 Сгмент номенклатуры 
//  Наименование			 - 	 Наименование параметра условия 
Процедура ВыгрузитьПредложенийСегментаДляСкидки(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц, Сегмент, Наименование)
	
	XDTOПараметрУсловияТип	= ПараметрыОбмена.ФайлСхемы.Получить("ПараметрУсловия");	
	XDTOПараметрУсловия 	= ФабрикаXDTO.Создать(XDTOПараметрУсловияТип); 
	
	XDTOПараметрУсловия.Наименование 	= Наименование;	
	
	XDTOПредложенияТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOПараметрУсловияТип, "Предложения");	
	XDTOПредложения 	= ФабрикаXDTO.Создать(XDTOПредложенияТип); 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса = "ВЫБРАТЬ *
	|ИЗ
	|	ВремСегментыНоменклатуры КАК ВремСегментыНоменклатуры
	| ГДЕ
	|ВремСегментыНоменклатуры.Сегмент = &Сегмент";
	Запрос.УстановитьПараметр("Сегмент", Сегмент);
	
	Запрос.Текст = ТекстЗапроса;
	
	тзнТоваров = Запрос.Выполнить().Выгрузить();
	тзнТоваров.Свернуть("ИдентификаторНоменклатуры, ИдентификаторХарактеристики");
	
	Для каждого ТекСтрока из тзнТоваров Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.ИдентификаторХарактеристики) Тогда
			лИд 	= XMLСтрока(ТекСтрока.ИдентификаторНоменклатуры) + "#" + XMLСтрока(ТекСтрока.ИдентификаторХарактеристики); 
		Иначе
			лИд 	= XMLСтрока(ТекСтрока.ИдентификаторНоменклатуры); 
		КонецЕсли;
		
		XDTOПредложения.Предложение.Добавить(лИд);
		
	КонецЦикла;
	
	Если XDTOПредложения.Предложение.количество() > 0 Тогда
		XDTOПараметрУсловия.Предложения = XDTOПредложения;
	КонецЕсли;

	Владелец.ПараметрУсловия.Добавить(XDTOПараметрУсловия);	
	
КонецПроцедуры

// Процедура - выгрузка условия скидки XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 Владелец объект XDTO, в который добавляются условия скидки
//  ВладелецТип				 - 	 Тип владельца объекта XDTO, в который добавляются условия скидки  
//  МенеджерВременныхТаблиц	 - 	 Менеджер временных таблиц, содержащий информацию скидках
//  Скидка					 - 	 Скидка 1С 
Процедура ВыгрузитьУсловияСкидки(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц, Скидка)
	
	XDTOУсловияТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "Условия");	
	XDTOУсловия		= ФабрикаXDTO.Создать(XDTOУсловияТип); 
	
	XDTOУсловиеТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOУсловияТип, "Условие");	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремУсловияСкидок КАК ВремУсловияСкидок	
	| ГДЕ
	|ВремУсловияСкидок.Скидка = &Скидка";
	Запрос.УстановитьПараметр("Скидка", Скидка);
	
	ВыборкаЗначений = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗначений.Следующий() Цикл
		
		Если ВыборкаЗначений.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты ИЛИ ВыборкаЗначений.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ОграничениеПоГруппеПользователей Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаЗначений.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж И ВыборкаЗначений.ВариантНакопления = Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоТорговомуСоглашению Тогда
			Продолжить;
		КонецЕсли;
		
		XDTOДополнительныеПараметрыТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOУсловиеТип, "ДополнительныеПараметры");	
		XDTOДополнительныеПараметры 	= ФабрикаXDTO.Создать(XDTOДополнительныеПараметрыТип); 
		
		XDTOУсловие 				= ФабрикаXDTO.Создать(XDTOУсловиеТип); 
		XDTOУсловие.Наименование	= ВыборкаЗначений.Наименование;
		
		Если ВыборкаЗначений.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи Тогда
			
			XDTOУсловие.ТипУсловия = "За время продажи";	
			
			ВыгрузитьВремяПродажДляУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, МенеджерВременныхТаблиц, ВыборкаЗначений.Условие, "Ограничение по времени продаж");
			
		ИначеЕсли ВыборкаЗначений.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж Тогда
			
			XDTOУсловие.ТипУсловия = "За накопленный объем продаж";	
			
			ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Мерило для оценки", Строка(ВыборкаЗначений.КритерийОграниченияПримененияЗаОбъемПродаж));
			ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Тип сравнения", ?(ВыборкаЗначений.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.НеБолее, "Не более","Не менее"));
			ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Значение условия ограничения", XMLСтрока(ВыборкаЗначений.ЗначениеУсловияОграничения));
			
			Если ВыборкаЗначений.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантыОпределенияПериодаНакопительнойСкидки.ПрошлыйПериод Тогда
				лВариантОпределенияПериода = "Прошлый период";
			ИначеЕсли ВыборкаЗначений.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантыОпределенияПериодаНакопительнойСкидки.ПрошлыйСкользящийПериод Тогда
				лВариантОпределенияПериода = "Прошлый скользящий период";
			ИначеЕсли ВыборкаЗначений.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантыОпределенияПериодаНакопительнойСкидки.СНачалаТекущегоПериода Тогда
				лВариантОпределенияПериода = "С начала текущего периода";
			Иначе
				лВариантОпределенияПериода = "Весь период";
			КонецЕсли;
			
			ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Вариант определения периода накопительной скидки", лВариантОпределенияПериода);

			Если ЗначениеЗаполнено(ВыборкаЗначений.ПериодНакопления) Тогда
				ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Периодичность", Строка(ВыборкаЗначений.ПериодНакопления));
			КонецЕсли;
			
			Если ВыборкаЗначений.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма И ЗначениеЗаполнено(ВыборкаЗначений.ВалютаКод) Тогда
				ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Валюта", Лев(ВыборкаЗначений.ВалютаКод, 3));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаЗначений.СегментНоменклатурыОграничения) Тогда
				ВыгрузитьПредложенийСегментаДляСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, МенеджерВременныхТаблиц, ВыборкаЗначений.СегментНоменклатурыОграничения, "Ограничения по предложениям");
			КонецЕсли;
			
		ИначеЕсли ВыборкаЗначений.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНаличиеКартыЛояльности Тогда
			
			XDTOУсловие.ТипУсловия = "За наличие вида дисконтной карты";	
			ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Вид дисконтной карты", XMLСтрока(ВыборкаЗначений.ВидКартыЛояльности));
			
		ИначеЕсли ВыборкаЗначений.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.КартаЛояльностиНеЗарегистрирована Тогда
			
			XDTOУсловие.ТипУсловия = "За не наличие вида дисконтной карты";	
			ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Вид дисконтной карты", XMLСтрока(ВыборкаЗначений.ВидКартыЛояльности));
			
		ИначеЕсли ВыборкаЗначений.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПервуюПродажуПартнеру Тогда
			XDTOУсловие.ТипУсловия = "За первую продажу клиенту";	
			
		ИначеЕсли ВыборкаЗначений.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПробнуюПродажу Тогда
			XDTOУсловие.ТипУсловия = "За пробную продажу";	
			
			Если ЗначениеЗаполнено(ВыборкаЗначений.СегментНоменклатурыОграничения) Тогда
				ВыгрузитьПредложенийСегментаДляСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, МенеджерВременныхТаблиц, ВыборкаЗначений.СегментНоменклатурыОграничения, "Ограничения по предложениям");
			КонецЕсли;
			
		ИначеЕсли ВыборкаЗначений.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж Тогда
			
			XDTOУсловие.ТипУсловия = "За разовый объем продаж";	

			ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Мерило для оценки", Строка(ВыборкаЗначений.КритерийОграниченияПримененияЗаОбъемПродаж));
			ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Область ограничения", ?(ВыборкаЗначений.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе, "В документе", "В строке"));
			ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Тип сравнения", ?(ВыборкаЗначений.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.НеБолее, "Не более","Не менее"));
			ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Значение условия ограничения", XMLСтрока(ВыборкаЗначений.ЗначениеУсловияОграничения));
			
			Если ВыборкаЗначений.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма И ЗначениеЗаполнено(ВыборкаЗначений.ВалютаКод) Тогда
				ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Валюта", Лев(ВыборкаЗначений.ВалютаКод, 3));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаЗначений.СегментНоменклатурыОграничения) Тогда
				ВыгрузитьПредложенийСегментаДляСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, МенеджерВременныхТаблиц, ВыборкаЗначений.СегментНоменклатурыОграничения, "Ограничения по предложениям");
			КонецЕсли;
			
		ИначеЕсли ВыборкаЗначений.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты Тогда
			
			XDTOУсловие.ТипУсловия = "За форму оплаты";
			
			Если ВыборкаЗначений.ФормаОплаты =  Перечисления.ФормыОплаты.Наличная Тогда
				лФормаОплаты = "Наличная";	
			ИначеЕсли ВыборкаЗначений.ФормаОплаты =  Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
				лФормаОплаты = "Платежная карта";	
			Иначе
				лФормаОплаты = "Безналичная";
			КонецЕсли;
			
			ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, "Форма оплаты", лФормаОплаты);
			
		ИначеЕсли ВыборкаЗначений.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ВхождениеПартнераВСегмент Тогда
			
			XDTOУсловие.ТипУсловия = "Для определенных клиентов";
			
			Если ЗначениеЗаполнено(ВыборкаЗначений.СегментПартнеров) Тогда
				ВыгрузитьКлиентовСегментаДляСкидки(ПараметрыОбмена, XDTOДополнительныеПараметры, XDTOДополнительныеПараметрыТип, МенеджерВременныхТаблиц, ВыборкаЗначений.СегментПартнеров, "Ограничения по клиентам");
			КонецЕсли;
			
		КонецЕсли;
		
		Если XDTOДополнительныеПараметры.ПараметрУсловия.Количество() > 0 Тогда
			XDTOУсловие.ДополнительныеПараметры = XDTOДополнительныеПараметры;
       	КонецЕсли;
		
		XDTOУсловия.Условие.Добавить(XDTOУсловие);
		
	КонецЦикла;
	
	Если XDTOУсловия.Условие.Количество() > 0 Тогда
		Владелец.Условия = XDTOУсловия;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - добавляет параметр в условие скидки
//
// Параметры:
//  ПараметрыОбмена		 - 	 Настройки узла обмена 
//  Владелец			 - 	 Владелец объект XDTO, в который добавляется параметр условия скидки
//  ВладелецТип			 - 	 Тип владельца объекта XDTO, в который добавляется параметр условия скидки  
//  НаименованиеУсловия	 - 	 Наименование условия 
//  ЗначениеУсловия		 - 	 Значение условия скидки 
Процедура ДобавлениеПараметраВУсловияСкидки(ПараметрыОбмена, Владелец, ВладелецТип, НаименованиеУсловия, ЗначениеУсловия)

	XDTOПараметрУсловияТип	= ПараметрыОбмена.ФайлСхемы.Получить("ПараметрУсловия");	
	XDTOПараметрУсловия 	= ФабрикаXDTO.Создать(XDTOПараметрУсловияТип); 
	
	XDTOПараметрУсловия.Наименование 	= НаименованиеУсловия;	
	XDTOПараметрУсловия.Значение		= ЗначениеУсловия;	
	
	Владелец.ПараметрУсловия.Добавить(XDTOПараметрУсловия);	
	
КонецПроцедуры

// Процедура - выгрузка время продаж для параметра условия скидки XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 Владелец объект XDTO, в который добавляются параметры условия скидки
//  ВладелецТип				 - 	 Тип владельца объекта XDTO, в который добавляются параметры условия скидки  
//  МенеджерВременныхТаблиц	 - 	 Менеджер временных таблиц, содержащий информацию скидках
//  УсловиеСкидки			 - 	 Условие скидки 1С 
//  Наименование			 - 	 Наименование условия скидки 
Процедура ВыгрузитьВремяПродажДляУсловияСкидки(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц, УсловиеСкидки, Наименование)
	
	XDTOПараметрУсловияТип	= ПараметрыОбмена.ФайлСхемы.Получить("ПараметрУсловия");
	XDTOПараметрУсловия 	= ФабрикаXDTO.Создать(XDTOПараметрУсловияТип); 
	
	XDTOПараметрУсловия.Наименование 	= Наименование;	
	
	XDTOГрафикВыполненияТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOПараметрУсловияТип, "ГрафикВыполнения");	
	XDTOГрафикВыполнения 	= ФабрикаXDTO.Создать(XDTOГрафикВыполненияТип); 
	
	XDTOГрафикТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOГрафикВыполненияТип, "График");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремВремяДействияУсловийСкидок КАК ВремВремяДействияУсловийСкидок
	| ГДЕ
	|ВремВремяДействияУсловийСкидок.УсловиеСкидки = &УсловиеСкидки";
	Запрос.УстановитьПараметр("УсловиеСкидки", УсловиеСкидки);
	
	ВыборкаЗначений = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗначений.Следующий() Цикл
		
		XDTOГрафик = ФабрикаXDTO.Создать(XDTOГрафикТип); 
		
		лНомерДня = 1;
		
		Если ВыборкаЗначений.ДеньНедели = Перечисления.ДниНедели.Вторник Тогда
			лНомерДня = 2;
		ИначеЕсли ВыборкаЗначений.ДеньНедели = Перечисления.ДниНедели.Среда Тогда
			лНомерДня = 3;
		ИначеЕсли ВыборкаЗначений.ДеньНедели = Перечисления.ДниНедели.Четверг Тогда
			лНомерДня = 4;
		ИначеЕсли ВыборкаЗначений.ДеньНедели = Перечисления.ДниНедели.Пятница Тогда
			лНомерДня = 5;
		ИначеЕсли ВыборкаЗначений.ДеньНедели = Перечисления.ДниНедели.Суббота Тогда
			лНомерДня = 6;
		ИначеЕсли ВыборкаЗначений.ДеньНедели = Перечисления.ДниНедели.Воскресенье Тогда
			лНомерДня = 7;
		КонецЕсли;
		
		XDTOГрафик.НомерДня 		= лНомерДня;
		XDTOГрафик.ВремяНачала 		= XMLСтрока(ВыборкаЗначений.ВремяНачала);
		XDTOГрафик.ВремяЗавершения 	= XMLСтрока(ВыборкаЗначений.ВремяОкончания);
		
		XDTOГрафикВыполнения.График.Добавить(XDTOГрафик);
		
	КонецЦикла;
	
	Если XDTOГрафикВыполнения.График.Количество() > 0 Тогда
		XDTOПараметрУсловия.ГрафикВыполнения = XDTOГрафикВыполнения;	
	КонецЕсли;

	Владелец.ПараметрУсловия.Добавить(XDTOПараметрУсловия);	
	
КонецПроцедуры

// Процедура - выгрузка клиентов сегмента для параметра условия скидки XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 Владелец объект XDTO, в который добавляются клиенты сегмента 
//  ВладелецТип				 - 	 Тип владельца объекта XDTO, в который добавляются клиенты сегмента  
//  МенеджерВременныхТаблиц	 - 	 Менеджер временных таблиц, содержащий информацию скидках
//  Сегмент					 - 	 Сегмент партнера 
//  НаименованиеПараметра	 - 	 Наименование партнера 
Процедура ВыгрузитьКлиентовСегментаДляСкидки(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц, Сегмент, НаименованиеПараметра)
	
	XDTOПараметрУсловияТип	= ПараметрыОбмена.ФайлСхемы.Получить("ПараметрУсловия");	
	XDTOПараметрУсловия 	= ФабрикаXDTO.Создать(XDTOПараметрУсловияТип); 
	
	XDTOПараметрУсловия.Наименование 	= НаименованиеПараметра;	
	
	XDTOКонтрагентыТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOПараметрУсловияТип, "Контрагенты");	
	XDTOКонтрагенты	= ФабрикаXDTO.Создать(XDTOКонтрагентыТип); 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса = "ВЫБРАТЬ *
	|ИЗ
	|	ВремСегментыПартнеров КАК ВремСегментыПартнеров
	| ГДЕ
	|ВремСегментыПартнеров.Сегмент = &Сегмент";
	Запрос.УстановитьПараметр("Сегмент", Сегмент);
	
	Запрос.Текст = ТекстЗапроса;
	
	тзнТоваров = Запрос.Выполнить().Выгрузить();
	тзнТоваров.Свернуть("ИдентификаторКонтрагента");
	
	Для каждого ТекСтрока из тзнТоваров Цикл
		
		XDTOКонтрагенты.Контрагент.Добавить(XMLСтрока(ТекСтрока.ИдентификаторКонтрагента));
		
	КонецЦикла;
	
	Если XDTOКонтрагенты.Контрагент.количество() > 0 Тогда
		XDTOПараметрУсловия.Контрагенты = XDTOКонтрагенты;
	КонецЕсли;

	Владелец.ПараметрУсловия.Добавить(XDTOПараметрУсловия);	
	
КонецПроцедуры

#КонецОбласти


#Область ВыгрузкаИнформацииОКартахЛояльности

			///////////////////////////////////////////////////////////////////
			//			 ВЫГРУЗКА ИНФОРМЦИИ О КАРТАХ ЛОЯЛЬНОСТИ	            //
			/////////////////////////////////////////////////////////////////

// Функция - возвращает менеджер временных таблиц с данными окартах лояльности
//
// Параметры:
//  ПараметрыОбмена		 - 	 Настройки узла обмена 
//  СписокКартЛояльности - 	 Список карт лояльности, которые необходимо выгрузить 
//  СписокВидовКарт		 - 	 Список видов карт лояльности, которые необходимо выгрузить 
// Возвращаемое значение:
//   Менеджер временных таблиц с данными о картах лояльности 
Функция СформироватьВременныеТаблицыПоКартамЛояльностиПакета(ПараметрыОбмена, СписокКартЛояльности, СписокВидовКарт)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Узел"	, ПараметрыОбмена.Ссылка);
	Запрос.УстановитьПараметр("ТекДата"	, ТекущаяДата());
	
	Запрос.УстановитьПараметр("СписокКартЛояльности", СписокКартЛояльности);
	Запрос.УстановитьПараметр("СписокВидовКарт"		, СписокВидовКарт);

	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	                                                                                                ///
	//             ПАКЕТ ЗАПРОСОВ ДЛЯ ПОЛУЧЕНИЯ НОМЕНКЛАТУРЫ С ХАРАКТЕРИСТИКОЙ                         ///
	//                                                                                                ///
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	КартыЛояльности.Владелец КАК ВидКарты,
	|	КартыЛояльности.Штрихкод,
	|	КартыЛояльности.МагнитныйКод,
	|	КартыЛояльности.Статус,
	|	КартыЛояльности.Контрагент,
	|	КартыЛояльности.Ссылка КАК Идентификатор,
	|	КартыЛояльности.Наименование,
	|	КартыЛояльности.ВерсияДанных,
	|	КартыЛояльности.ПометкаУдаления,
	|	КартыЛояльности.Партнер
	|ПОМЕСТИТЬ ВремКартыЛояльности
	|ИЗ
	|	Справочник.КартыЛояльности КАК КартыЛояльности
	|ГДЕ
	|	КартыЛояльности.Ссылка В(&СписокКартЛояльности)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыКартЛояльности.Ссылка КАК Идентификатор,
	|	ВидыКартЛояльности.ВерсияДанных,
	|	ВидыКартЛояльности.Наименование,
	|	ВидыКартЛояльности.ПометкаУдаления
	|ПОМЕСТИТЬ ВремВидыКартЛояльности
	|ИЗ
	|	Справочник.ВидыКартЛояльности КАК ВидыКартЛояльности
	|ГДЕ
	|	ВидыКартЛояльности.Ссылка В(&СписокВидовКарт)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремКартыЛояльности.Партнер КАК Партнер,
	|	Контрагенты.Ссылка КАК Контрагент
	|ПОМЕСТИТЬ ВремКонтрагентыПартнеровКартЛояльности
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремКартыЛояльности КАК ВремКартыЛояльности
	|		ПО Контрагенты.Партнер = ВремКартыЛояльности.Партнер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер";	
	
	лМенеджерВременныхТаблиц 		= Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц 	= лМенеджерВременныхТаблиц; 
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();	
	
	Возврат лМенеджерВременныхТаблиц;
	
КонецФункции

// Процедура - выгружает информацию о картах лояльности
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена 
//  МассивДанных	 - 	 Таблица значений с данными о картах лояльности 
Процедура ВыгрузитьИнформациюОКартахЛояльности(ПараметрыОбмена,МассивДанных, Операция)
				
	СписокВидовКарт		= Новый СписокЗначений;
	Успешно = Ложь;
	
	XDTOКоммерческаяИнформацияТип 	= ПараметрыОбмена.ФайлСхемы.Получить("КоммерческаяИнформация");
	
	лКоличествоСтрок = МассивДанных.Количество();
	КоличествоПакетов = ?(лКоличествоСтрок > 0, МассивДанных[лКоличествоСтрок - 1].Пакет, -1); 
	
	Для Пакет = 0 по КоличествоПакетов Цикл
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Начало выгрузки пакета " + Строка(Пакет), ПараметрыОбмена);
		
		МассивСтрок = МассивДанных.НайтиСтроки(Новый структура("Пакет", Пакет));	
		
		РазбитаяСтруктураДанных = РазборМассиваДанныхПоТипамОбъектов(МассивСтрок);
			
		Если Пакет = 0 Тогда
			СписокВидовКарт 	= РазбитаяСтруктураДанных.ВидыДК;	
		КонецЕсли;
		
		СписокКартЛояльности 		= РазбитаяСтруктураДанных.КартыЛояльности;
		
		лМенеджерВременныхТаблиц = СформироватьВременныеТаблицыПоКартамЛояльностиПакета(ПараметрыОбмена, СписокКартЛояльности, СписокВидовКарт);
		
		ИмяКаталога = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ?(Пакет > 0, ПараметрыОбмена.КаталогНаДиске + "\discountCard\" + Строка(Пакет), ПараметрыОбмена.КаталогНаДиске + "\discountCard\")); 
				
		XDTOКоммерческаяИнформация = ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);

		Если ПараметрыОбмена.ВыгрузкаВидовКартЛояльности И Пакет = 0 Тогда
			ВыгрузитьВидыКартЛояльностиXDTO(ПараметрыОбмена, XDTOКоммерческаяИнформация, XDTOКоммерческаяИнформацияТип, лМенеджерВременныхТаблиц);
		КонецЕсли;
		
		Если ПараметрыОбмена.ВыгрузкаКартЛояльности Тогда
			ВыгрузитьКартыЛояльностиXDTO(ПараметрыОбмена, XDTOКоммерческаяИнформация, XDTOКоммерческаяИнформацияТип, лМенеджерВременныхТаблиц);
		КонецЕсли;

		
		лМенеджерВременныхТаблиц.Закрыть();
		
		Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "discountCard", "catalog", Пакет);		
		
		УдалениеПакетовИРегистраций(Успешно, ПараметрыОбмена, Операция, Пакет, "КартыЛояльности", МассивСтрок);
			
		Если Успешно Или НЕ ПараметрыОбмена.ВыгружатьНаСайт Тогда
			Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузки пакета " + Строка(Пакет) + " завершена.", ПараметрыОбмена);
		Иначе
			Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакета " + Строка(Пакет) + " НЕ завершена или завершена с ошибками.", ПараметрыОбмена);
		КонецЕсли;
		
	КонецЦикла;			
				
КонецПроцедуры 

// Процедура - выгружает карты лояльности в объект XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 Владелец объект XDTO, в который добавляются карты лояльности 
//  ВладелецТип				 - 	 Тип владельца объекта XDTO, в который добавляются карты лояльности  
//  МенеджерВременныхТаблиц	 - 	 Менеджер временных таблиц с данными о картах лояльности 
Процедура ВыгрузитьКартыЛояльностиXDTO(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц)
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка карт лояльности в XML.", ПараметрыОбмена);
	Итератор = 0;
	
	XDTOДисконтныеКартыТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "ДисконтныеКарты");	
	XDTOДисконтныеКарты 	= ФабрикаXDTO.Создать(XDTOДисконтныеКартыТип); 
	
	XDTOДисконтнаяКартаТип = ПараметрыОбмена.ФайлСхемы.Получить("ДисконтнаяКарта");	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремКартыЛояльности КАК ВремКартыЛояльности";
	ВыборкаКарт = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаКарт.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаКарт.Контрагент) И ЗначениеЗаполнено(ВыборкаКарт.Партнер) Тогда
			
			ЗапросК = Новый Запрос;
			ЗапросК.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			ЗапросК.Текст = "ВЫБРАТЬ *
			|ИЗ
			|	ВремКонтрагентыПартнеровКартЛояльности КАК ВремКонтрагентыПартнеровКартЛояльности
			|ГДЕ
			|ВремКонтрагентыПартнеровКартЛояльности.Партнер = &Партнер";
			ЗапросК.УстановитьПараметр("Партнер",ВыборкаКарт.Партнер);
			
			ВыборкаКонтрагентов = ЗапросК.Выполнить().Выбрать();
			
			Пока ВыборкаКонтрагентов.Следующий() Цикл 
			
				XDTOДисконтнаяКарта					= ФабрикаXDTO.Создать(XDTOДисконтнаяКартаТип); 
				
				XDTOДисконтнаяКарта.Ид					= XMLСтрока(ВыборкаКарт.Идентификатор) + "_" +XMLСтрока(ВыборкаКонтрагентов.Контрагент);
				XDTOДисконтнаяКарта.НомерВерсии			= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, ВыборкаКарт.ВерсияДанных, "Карт лояльности");
				XDTOДисконтнаяКарта.ПометкаУдаления		= XMLСтрока(ВыборкаКарт.ПометкаУдаления);
				XDTOДисконтнаяКарта.Наименование		= XMLСтрока(ВыборкаКарт.Наименование);
				XDTOДисконтнаяКарта.ВидДисконтнойКарты	= XMLСтрока(ВыборкаКарт.ВидКарты);
				XDTOДисконтнаяКарта.Штрихкод			= XMLСтрока(ВыборкаКарт.Штрихкод);
				
				XDTOДисконтнаяКарта.Контрагент			= ВыгрузитьКонтрагентаВДокументXDTO(ПараметрыОбмена, XDTOДисконтнаяКартаТип, ВыборкаКонтрагентов.Контрагент);
				
				XDTOДисконтныеКарты.ДисконтнаяКарта.Добавить(XDTOДисконтнаяКарта);
				
				Итератор = Итератор + 1;

			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(ВыборкаКарт.Контрагент) Тогда
			
			XDTOДисконтнаяКарта					= ФабрикаXDTO.Создать(XDTOДисконтнаяКартаТип); 
			
			XDTOДисконтнаяКарта.Ид					= XMLСтрока(ВыборкаКарт.Идентификатор) + "_" +XMLСтрока(ВыборкаКарт.Контрагент);
			XDTOДисконтнаяКарта.НомерВерсии			= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, ВыборкаКарт.ВерсияДанных, "Карт лояльности");
			XDTOДисконтнаяКарта.ПометкаУдаления		= XMLСтрока(ВыборкаКарт.ПометкаУдаления);
			XDTOДисконтнаяКарта.Наименование		= XMLСтрока(ВыборкаКарт.Наименование);
			XDTOДисконтнаяКарта.ВидДисконтнойКарты	= XMLСтрока(ВыборкаКарт.ВидКарты);
			XDTOДисконтнаяКарта.Штрихкод			= XMLСтрока(ВыборкаКарт.Штрихкод);
			
			XDTOДисконтнаяКарта.Контрагент			= ВыгрузитьКонтрагентаВДокументXDTO(ПараметрыОбмена, XDTOДисконтнаяКартаТип, ВыборкаКарт.Контрагент);
			
			XDTOДисконтныеКарты.ДисконтнаяКарта.Добавить(XDTOДисконтнаяКарта);
			
			Итератор = Итератор + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка карт лояльности в XML завершено. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	
	Если XDTOДисконтныеКарты.ДисконтнаяКарта.Количество() > 0 Тогда
		Владелец.ДисконтныеКарты = XDTOДисконтныеКарты;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ВыгрузкаПользовательскихСправочников

			///////////////////////////////////////////////////////////////////
			//			 ВЫГРУЗКА ПОЛЬЗОВАТЕЛЬСКИХ СПРАВОЧНИКОВ             //
			/////////////////////////////////////////////////////////////////

// Процедура - выгружает пользовательские справочники в объект XDTO
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена 
//  МассивДанных	 - 	 Таблица значений с данными о выгружаемых пользовательских справочников 
Процедура ВыгрузитьПользовательскиеСправочникиXDTO(ПараметрыОбмена, МассивДанных, Операция)
	
	лКоличествоСтрок = МассивДанных.Количество();
	КоличествоПакетов = ?(лКоличествоСтрок > 0, МассивДанных[лКоличествоСтрок - 1].Пакет, 0); 
	Для Пакет = 1 по КоличествоПакетов Цикл
		
		Итератор = 0;
		МассивСтрок = МассивДанных.НайтиСтроки(Новый структура("Пакет", Пакет));	
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			Б_ОбменССайтомСервер.СообщитьПодробно("Начало выгрузки пакета " + Строка(Пакет) + " пользовательскиих справочников", ПараметрыОбмена);
			
			ФабрикаXDTO 		= СоздатьФабрикуXDTO(ПараметрыОбмена.ФайлСхемы); 
			
			XDTOКоммерческаяИнформацияТип 	= ПараметрыОбмена.ФайлСхемы.Получить("КоммерческаяИнформация");  
			XDTOКоммерческаяИнформация 		= ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);
			
			XDTOПользовательскиеСправочникиТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOКоммерческаяИнформацияТип, "ПользовательскиеСправочники");
			XDTOСправочникТип	= ПараметрыОбмена.ФайлСхемы.Получить("Справочник"); 
			
			XDTOЭлементыСправочникаТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOСправочникТип, "ЭлементыСправочника");
			XDTOЭлементСправочникаТип	= ПараметрыОбмена.ФайлСхемы.Получить("ЭлементСправочника");
			
			ТипpЗначенийРеквизитов	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOЭлементСправочникаТип, "ЗначенияРеквизитов");
			ТипpЗначенияРеквизита	= ПараметрыОбмена.ФайлСхемы.Получить("ЗначениеРеквизита");
			
			XDTOРеквизитыТип		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOСправочникТип, "Реквизиты");
			XDTOРеквизитТип			= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOРеквизитыТип, "Реквизит");
			
			ТаблицаСправочников 	= ПараметрыОбмена.ВыгружаемыеПоляСправочников;
			лТаблицаСправочников 	= ТаблицаСправочников.Скопировать();
			лТаблицаСправочников.Свернуть("Справочник");
			Если лТаблицаСправочников.Количество() > 0 Тогда
				
				XDTOПользовательскиеСправочники		= ФабрикаXDTO.Создать(XDTOПользовательскиеСправочникиТип); 
				
				Если (ПараметрыОбмена.ВыгружатьТолькоИзменения И НЕ ПараметрыОбмена.ВыполнятьПолнуюВыгрузкуПринудительно) ИЛИ (ПараметрыОбмена.КоличествоЭлементовСправочникаВПакете <> 0) Тогда
					XDTOПользовательскиеСправочники.СодержитТолькоИзменения = XMLСтрока(Истина);
				Иначе
					XDTOПользовательскиеСправочники.СодержитТолькоИзменения = XMLСтрока(Ложь);
				КонецЕсли;
			
				Для каждого ТекСпр из лТаблицаСправочников Цикл
					
					лЕстьЭлементыСправочника = Ложь;
					
					XDTOСправочник				= ФабрикаXDTO.Создать(XDTOСправочникТип); 
					XDTOСправочник.Ид 			= ТекСпр.Справочник;	
					XDTOСправочник.Наименование = Метаданные.Справочники[ТекСпр.Справочник].Синоним;	
					
					лРеквезитыСпр 	= ТаблицаСправочников.НайтиСтроки(Новый Структура("Справочник", ТекСпр.Справочник));
					
					XDTOРеквизитыСправочника	= ФабрикаXDTO.Создать(XDTOРеквизитыТип); 
					
					Для каждого ТекРек из лРеквезитыСпр Цикл
						
						Если ТекРек.Выгружаемо Тогда
							
							XDTOРеквизитСправочника	= ФабрикаXDTO.Создать(XDTOРеквизитТип); 
							
							XDTOРеквизитСправочника.Ид = ТекРек.Поле;

							Если ТекРек.Поле = "Код" Тогда
								XDTOРеквизитСправочника.ТипЗначений = "Строка";	
								XDTOРеквизитСправочника.Наименование = ТекРек.Поле;
							ИначеЕсли ТекРек.Поле = "Наименование" Тогда
								XDTOРеквизитСправочника.ТипЗначений = "Строка";	
								XDTOРеквизитСправочника.Наименование = ТекРек.Поле;
							ИначеЕсли ТекРек.Поле = "ПометкаУдаления" Тогда
								XDTOРеквизитСправочника.ТипЗначений = "Булево";	
								XDTOРеквизитСправочника.Наименование = ТекРек.Поле;
							ИначеЕсли ТекРек.Поле = "Владелец" Тогда
								XDTOРеквизитСправочника.ТипЗначений = "Строка";	
								XDTOРеквизитСправочника.Наименование = ТекРек.Поле;
							ИначеЕсли ТекРек.Поле = "Родитель" Тогда
								XDTOРеквизитСправочника.ТипЗначений = "Строка";	
								XDTOРеквизитСправочника.Наименование = ТекРек.Поле;
							Иначе  
								лРеквизит 		= Метаданные.Справочники[ТекСпр.Справочник].Реквизиты[ТекРек.Поле];
								лТипыРеквизита 	= лРеквизит.Тип.Типы();
								
								XDTOРеквизитСправочника.Наименование = лРеквизит.Синоним;
								Если лТипыРеквизита.Количество() > 0 Тогда
										
									лТипРеквизита = лТипыРеквизита[0];
									
									Если лТипРеквизита = Тип("Число") Тогда
										XDTOРеквизитСправочника.ТипЗначений = "Число";	
									ИначеЕсли лТипРеквизита = Тип("Дата") Тогда
										XDTOРеквизитСправочника.ТипЗначений = "Дата";	
									ИначеЕсли лТипРеквизита = Тип("Булево") Тогда
										XDTOРеквизитСправочника.ТипЗначений = "Булево";	
									Иначе
										XDTOРеквизитСправочника.ТипЗначений = "Строка";	
									КонецЕсли;  									
								Иначе
									XDTOРеквизитСправочника.ТипЗначений = "Строка";	
								КонецЕсли;
							КонецЕсли;	
							
							Если ТекРек.ВыгружатьКакСтрока Тогда
								XDTOРеквизитСправочника.ТипЗначений = "Строка";		
							КонецЕсли;
							
							XDTOРеквизитыСправочника.Реквизит.Добавить(XDTOРеквизитСправочника);
						КонецЕсли;
						
					КонецЦикла;
					
					XDTOСправочник.Реквизиты	= XDTOРеквизитыСправочника;
					
					XDTOЭлементыСправочника		= ФабрикаXDTO.Создать(XDTOЭлементыСправочникаТип); 
					
					Для каждого ТекЭлСпр из МассивСтрок Цикл 
						Если ТекЭлСпр.ПользовательскийСправочник = ТекСпр.Справочник Тогда
							
								лЕстьЭлементыСправочника = Истина;
								Итератор = Итератор + 1;
								
								XDTOЭлементСправочника	= ФабрикаXDTO.Создать(XDTOЭлементСправочникаТип); 
								
								XDTOЭлементСправочника.Ид 			= XMLСтрока(ТекЭлСпр.Объект.Ссылка);
								XDTOЭлементСправочника.НомерВерсии 	= XMLСтрока(ТекЭлСпр.Объект.ВерсияДанных);
								
								ЗначенияРеквизитов 		= ФабрикаXDTO.Создать(ТипpЗначенийРеквизитов);
								
								Для каждого ТекРек из лРеквезитыСпр Цикл
									
									Если ТекРек.Выгружаемо Тогда
										
										лЗначРек 	= ТекЭлСпр.Объект[ТекРек.Поле];
										Если ЗначениеЗаполнено(лЗначРек) Тогда
											
											лЗначВХМЛ 	= ?(ТекРек.ВыгружатьКакСтрока = Ложь, XMLСтрока(лЗначРек), Строка(лЗначРек));
											Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитов, ТипpЗначенияРеквизита, ТекРек.Поле, лЗначВХМЛ);
										Иначе
											Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитов, ТипpЗначенияРеквизита, ТекРек.Поле, "");
										КонецЕсли;
										
									КонецЕсли;
									
								КонецЦикла;
								
								XDTOЭлементСправочника.ЗначенияРеквизитов = ЗначенияРеквизитов; 
								XDTOЭлементыСправочника.ЭлементСправочника.Добавить(XDTOЭлементСправочника);	
						КонецЕсли;	
					КонецЦикла;
					
					Если лЕстьЭлементыСправочника Тогда
						XDTOСправочник.ЭлементыСправочника = XDTOЭлементыСправочника;
						
						XDTOПользовательскиеСправочники.Справочник.Добавить(XDTOСправочник);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;	
			
			XDTOКоммерческаяИнформация.ПользовательскиеСправочники = XDTOПользовательскиеСправочники; 
			
			ИмяКаталога = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогНаДиске + "\references\" +  Строка(Пакет)); 
			
			Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "references", "catalog", Пакет);		
			
			УдалениеПакетовИРегистраций(Успешно, ПараметрыОбмена, Операция, Пакет, "ПользовательскиеСправочники", МассивСтрок);
			
			Если Успешно  Или НЕ ПараметрыОбмена.ВыгружатьНаСайт Тогда
				Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакета " + Строка(Пакет) + " пользовательскиих справочников завершена. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
			Иначе
				Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакета " + Строка(Пакет) + " пользовательскиих справочников НЕ завершена или завершена с ошибками. НЕ Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

#КонецОбласти


#Область ВыгрузкаКонтрагентов

			///////////////////////////////////////////////////////////////////
			//			 			ВЫГРУЗКА КОНТРАГЕНТОВ                   //
			/////////////////////////////////////////////////////////////////

// Функция - возвращает  объект XDTO с типом банк
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена 
//  СчетБанка		 - 	 Информация о счете банка 
//  ВидБанка		 - 	 Вид банка 
// Возвращаемое значение:
//   Объект XDTO банка 
Функция ВыгрузитьБанкXDTO(ПараметрыОбмена, СчетБанка, ВидБанка)
	
	XDTOБанкТип				= ПараметрыОбмена.ФайлСхемы.Получить("Банк");
	XDTOАдресТип			= ПараметрыОбмена.ФайлСхемы.Получить("Адрес");
	
	XDTOБанк				= ФабрикаXDTO.Создать(XDTOБанкТип);
	
	Если Не ЗначениеЗаполнено(?(ВидБанка = "Банк", СчетБанка.Банк, СчетБанка.БанкДляРасчетов)) Тогда
		Возврат XDTOБанк;
	КонецЕсли;
	
	XDTOБанк.Наименование 			= ?(ВидБанка = "Банк", СчетБанка.НаименованиеБанка, СчетБанка.НаименованиеБанкаДляРасчетов);	
	XDTOБанк.СчетКорреспондентский 	= ?(ВидБанка = "Банк", СчетБанка.КоррСчетБанка, СчетБанка.КоррСчетБанкаДляРасчетов);
	
	лАдрес = ?(ВидБанка = "Банк", СчетБанка.АдресБанка, СчетБанка.АдресБанкаДляРасчетов);
	Если Не ПустаяСтрока(лАдрес) Тогда
		
		XDTOАдрес				= ФабрикаXDTO.Создать(XDTOАдресТип);
		XDTOАдрес.Представление = лАдрес;
		XDTOБанк.Адрес			= XDTOАдрес;
		
	КонецЕсли;
	
	Бик = ?(ВидБанка = "Банк", СчетБанка.БИКБанка, СчетБанка.БИКБанкаДляРасчетов);
	
	Если СтрДлина(СокрЛП(Бик)) = 9 Тогда
		XDTOБанк.БИК 				= ?(ВидБанка = "Банк", СчетБанка.БИКБанка, СчетБанка.БИКБанкаДляРасчетов);	
	КонецЕсли;
	
	Возврат XDTOБанк;
	
КонецФункции
			
// Процедура - выгружает банковские счета в XDTO
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена 
//  Владелец		 - 	 Владелец объект(Контрагент) XDTO, 
//  ВладелецТип		 - 	 Тип владельца объекта(Контрагент) XDTO  
//  ТаблицаСчетов	 - 	 Таблица значений, содержащая банковские счета контрагента 
Процедура ВыгрузитьБанковскийСчетXDTO(ПараметрыОбмена, Владелец, ВладелецТип, ТаблицаСчетов)
	
	XDTOРасчетныеСчетаТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип,  "РасчетныеСчета");
	XDTOРасчетныйСчетТип	= ПараметрыОбмена.ФайлСхемы.Получить("РасчетныйСчет"); 
	
	XDTOРасчетныеСчета		= ФабрикаXDTO.Создать(XDTOРасчетныеСчетаТип); 
	
	Для каждого ТекСчет из ТаблицаСчетов Цикл
	
		XDTOРасчетныйСчет		= ФабрикаXDTO.Создать(XDTOРасчетныйСчетТип); 
		
		XDTOРасчетныйСчет.НомерСчета		= XMLСтрока(ТекСчет.НомерСчета);
		XDTOРасчетныйСчет.БанкКорреспондент = ВыгрузитьбанкXDTO(ПараметрыОбмена, ТекСчет, "БанкДляРасчетов");
		XDTOРасчетныйСчет.Банк				= ВыгрузитьбанкXDTO(ПараметрыОбмена, ТекСчет, "Банк");
	   	XDTOРасчетныеСчета.РасчетныйСчет.Добавить(XDTOРасчетныйСчет);
		
	КонецЦикла;
	
	Владелец.РасчетныеСчета = XDTOРасчетныеСчета;
	
Конецпроцедуры
			
// Процедура - выгружает  контрагентов
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена 
//  МассивДанных	 - 	 Таблица значений с данными о контрагентах 
Процедура ВыгрузитьКонтрагентов(ПараметрыОбмена, МассивДанных, Операция)
	
	лКоличествоСтрок = МассивДанных.Количество();
	КоличествоПакетов = ?(лКоличествоСтрок > 0, МассивДанных[лКоличествоСтрок - 1].Пакет, 0); 
	
	Если КоличествоПакетов > 0 Тогда
		
		МенеджерВременныхТаблицКонтрагентов = Новый МенеджерВременныхТаблиц;
		
		ОбщийЗапрос = Новый Запрос;
		ОбщийЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтрагентов;
		ОбщийЗапрос.УстановитьПараметр("МассивДанных",МассивДанных);
		
		ОбщийЗапрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Покупатель.Ссылка КАК Контрагент,
		|	ВЫБОР
		|		КОГДА Покупатель.Б_Идентификатор = """"
		|			ТОГДА Покупатель.Ссылка
		|		ИНАЧЕ Покупатель.Б_Идентификатор
		|	КОНЕЦ КАК Идентификатор
		|ПОМЕСТИТЬ ВремКонтрагенты
		|ИЗ
		|	Справочник.Контрагенты КАК Покупатель
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МассивДанных.Объект,
		|	МассивДанных.Пакет
		|ПОМЕСТИТЬ ВремМассивДанных
		|ИЗ
		|	&МассивДанных КАК МассивДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчетаКонтрагентов.НомерСчета,
		|	БанковскиеСчетаКонтрагентов.Банк,
		|	БанковскиеСчетаКонтрагентов.Банк.Код КАК БИКБанка,
		|	БанковскиеСчетаКонтрагентов.Банк.КоррСчет КАК КоррСчетБанка,
		|	БанковскиеСчетаКонтрагентов.Банк.Адрес КАК АдресБанка,
		|	БанковскиеСчетаКонтрагентов.Банк.Город КАК ГородБанка,
		|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Код КАК БИКБанкаДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов.КоррСчет КАК КоррСчетБанкаДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Город КАК ГородБанкаДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Адрес КАК АдресБанкаДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.Банк.Наименование КАК НаименованиеБанка,
		|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Наименование КАК НаименованиеБанкаДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.Владелец КАК Владелец
		|ПОМЕСТИТЬ ВремБанковскиеСчета
		|ИЗ
		|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Владелец
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА КонтактныеЛицаПартнеров.Б_Идентификатор = """"
		|			ТОГДА КонтактныеЛицаПартнеров.Ссылка
		|		ИНАЧЕ КонтактныеЛицаПартнеров.Б_Идентификатор
		|	КОНЕЦ КАК ИдентификаторКонтактногоЛица,
		|	КонтактныеЛицаПартнеров.Владелец КАК ВладелецКонтактногоЛица,
		|	КонтактныеЛицаПартнеров.Наименование КАК НаименованиеКонтактногоЛица
		|ПОМЕСТИТЬ ВремКонтактныеЛица
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВладелецКонтактногоЛица
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПокупательКонтактнаяИнформация.Ссылка КАК Покупатель,
		|	ПокупательКонтактнаяИнформация.Тип,
		|	ПокупательКонтактнаяИнформация.Вид,
		|	ПокупательКонтактнаяИнформация.Представление,
		|	ПокупательКонтактнаяИнформация.ЗначенияПолей,
		|	ПокупательКонтактнаяИнформация.Страна,
		|	ПокупательКонтактнаяИнформация.Регион,
		|	ПокупательКонтактнаяИнформация.Город,
		|	ПокупательКонтактнаяИнформация.АдресЭП,
		|	ПокупательКонтактнаяИнформация.ДоменноеИмяСервера,
		|	ПокупательКонтактнаяИнформация.НомерТелефона,
		|	ПокупательКонтактнаяИнформация.НомерТелефонаБезКодов
		|ПОМЕСТИТЬ ВремКонтактнаяИнформация
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК ПокупательКонтактнаяИнформация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Покупатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВремМассивДанных.Объект КАК Объект,
			|	ВремМассивДанных.Пакет КАК Пакет,
			|	ВремКонтрагенты.Идентификатор КАК ИдентификаторПокупателя,
			|	ВремКонтрагенты.Контрагент.ВерсияДанных КАК ВерсияДанныхПокупателя,
			|	ВремКонтрагенты.Контрагент.ПометкаУдаления КАК ПометкаУдаленияПокупателя,
			|	"""" КАК КодПокупателя,
			|	ВремКонтрагенты.Контрагент.Наименование КАК НаименованиеПокупателя,
			|	ВремКонтрагенты.Контрагент.ИНН КАК ИННПокупателя,
			|	ВремКонтрагенты.Контрагент.КодПоОКПО КАК КодПоОКПОПокупателя,
			|	"""" КАК КомментарийПокупателя,
			|	ВремКонтрагенты.Контрагент.КПП КАК КПППокупателя,
			|	ВремКонтрагенты.Контрагент.НаименованиеПолное КАК НаименованиеПолноеПокупателя,
			|	ВремМассивДанных.Объект КАК Покупатель,
			|	ВремМассивДанных.Объект КАК Контрагент,
			|	""Контрагенты"" КАК ТипПокупателя,
			
			|	ВремКонтрагенты.Контрагент.ЮрФизЛицо КАК ЮрФизЛицоПокупателя
			|ПОМЕСТИТЬ МассивДанныхСПакетами
			|ИЗ
			|	ВремМассивДанных КАК ВремМассивДанных
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВремКонтрагенты КАК ВремКонтрагенты
			|		ПО (ВремКонтрагенты.Контрагент = ВремМассивДанных.Объект)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Пакет
			|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВремКонтрагенты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВремМассивДанных";
		
		ОбщийЗапрос.Выполнить();
		
		ФабрикаXDTO 		= СоздатьФабрикуXDTO(ПараметрыОбмена.ФайлСхемы); 
		
	КонецЕсли;
	
	Для Пакет = 1 по КоличествоПакетов Цикл
		
		Итератор = 0;
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтрагентов;
		Запрос.Текст = "ВЫБРАТЬ *
		|ИЗ
		|	МассивДанныхСПакетами КАК МассивДанныхСПакетами
		|ГДЕ
		|	МассивДанныхСПакетами.Пакет В(&Пакет)";
		Запрос.УстановитьПараметр("Пакет", Пакет);
		МассивСтрок = Запрос.Выполнить().Выгрузить();
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			Б_ОбменССайтомСервер.СообщитьПодробно("Начало выгрузки пакета " + Строка(Пакет) + " контрагентов", ПараметрыОбмена);
			
			XDTOКоммерческаяИнформацияТип 	= ПараметрыОбмена.ФайлСхемы.Получить("КоммерческаяИнформация");  
			XDTOКоммерческаяИнформация 		= ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип); 
			
			XDTOКонтрагентыТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOКоммерческаяИнформацияТип, "Контрагенты");
			XDTOКонтрагентТип	= ПараметрыОбмена.ФайлСхемы.Получить("Контрагент"); 
			
			XDTOКонтрагенты	= ФабрикаXDTO.Создать(XDTOКонтрагентыТип); 
			
			
			Если (ПараметрыОбмена.ВыгружатьТолькоИзменения И НЕ ПараметрыОбмена.ВыполнятьПолнуюВыгрузкуПринудительно) ИЛИ (ПараметрыОбмена.КоличествоКонтрагентовВПакете <> 0) Тогда
				XDTOКонтрагенты.СодержитТолькоИзменения = XMLСтрока(Истина);
			Иначе
				XDTOКонтрагенты.СодержитТолькоИзменения = XMLСтрока(Ложь);
			КонецЕсли;
			
			Для каждого ТекЭлСпр из МассивСтрок Цикл 
			
				Итератор = Итератор + 1;

				XDTOКонтрагент = ВыгрузитьКонтрагентаXDTO(ПараметрыОбмена, XDTOКонтрагентТип, ТекЭлСпр, МенеджерВременныхТаблицКонтрагентов);
					
				XDTOКонтрагенты.Контрагент.Добавить(XDTOКонтрагент);		
			КонецЦикла;
			
			XDTOКоммерческаяИнформация.Контрагенты = XDTOКонтрагенты; 
			
			ИмяКаталога = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогНаДиске + "\contragents\" + Строка(Пакет)); 
			
			Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "contragents", "sale", Пакет);		
			
			УдалениеПакетовИРегистраций(Успешно, ПараметрыОбмена, Операция, Пакет, "Контрагенты", МассивСтрок);
			
			Если Успешно Или НЕ ПараметрыОбмена.ВыгружатьНаСайт Тогда
				Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакета " + Строка(Пакет) + " контрагентов завершена. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
			Иначе
				Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакета " + Строка(Пакет) + " контрагентов НЕ завершена или завершена с ошибками. НЕ Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоПакетов > 0 Тогда
		МенеджерВременныхТаблицКонтрагентов.Закрыть();;
	КонецЕсли;

КонецПроцедуры 

// Функция - выгружает контрагента в XDTO
//
// Параметры:
//  ПараметрыОбмена						 - 	 Настройки узла обмена 
//  XDTOКонтрагентТип					 - 	 XDTO тип контрагента 
//  Контрагент							 - 	 Контрагент, выгружаемх в XDTO 
//  МенеджерВременныхТаблицКонтрагентов	 - 	 Менеджер временных таблиц, содержащий данные о контрагенте 
// Возвращаемое значение:
//   XDTO объект с типом "Контрагент" 
Функция ВыгрузитьКонтрагентаXDTO(ПараметрыОбмена, XDTOКонтрагентТип, Контрагент, МенеджерВременныхТаблицКонтрагентов)
	
	лКонтрагент = Справочники.Контрагенты.ПустаяСсылка(); //пеерменная необходим для поиска расчетных счетов.
	лПартнер 	= Справочники.Партнеры.ПустаяСсылка(); //пеерменная необходим для поиска контактных лиц.
	
	XDTOКонтактнаяИнформацияТип 			= ПараметрыОбмена.ФайлСхемы.Получить("КонтактнаяИнформация");
	XDTOКонтактТип 							= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOКонтактнаяИнформацияТип, "Контакт");
	
	XDTOПредставителиТип 					= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOКонтрагентТип, "Представители");
	XDTOПредставительТип 					= ПараметрыОбмена.ФайлСхемы.Получить("Представитель");
	
	XDTOКонтрагент	= ФабрикаXDTO.Создать(XDTOКонтрагентТип); 
	
	XDTOКонтрагент.Ид 				= XMLСтрока(Контрагент.ИдентификаторПокупателя);
	XDTOКонтрагент.НомерВерсии 		= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, Контрагент.ВерсияДанныхПокупателя, "Контрагентов"); 
	XDTOКонтрагент.ПометкаУдаления 	= XMLСтрока(Контрагент.ПометкаУдаленияПокупателя);
	XDTOКонтрагент.Наименование 	= Контрагент.НаименованиеПокупателя;
	
	Если Контрагент.ЮрФизЛицоПокупателя 		= Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		XDTOКонтрагент.ОфициальноеНаименование	= Контрагент.НаименованиеПолноеПокупателя;
	Иначе
		XDTOКонтрагент.ПолноеНаименование		= Контрагент.НаименованиеПолноеПокупателя;
	КонецЕсли;
	
	XDTOКонтрагент.Роль 	= "Покупатель";
	
		XDTOКонтрагент.ИНН		= Контрагент.ИННПокупателя;
		XDTOКонтрагент.КПП		= Контрагент.КПППокупателя;
		XDTOКонтрагент.КодПоОКПО= Контрагент.КодПоОКПОПокупателя;
		
		лКонтрагент 			= Контрагент.Покупатель;
		лПартнер				= Контрагент.Покупатель.Партнер;
	
	//выгрузка банковских счетов
	Запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтрагентов;
	Запрос.Текст = "ВЫБРАТЬ 
	|	*
	|ИЗ
	|	ВремБанковскиеСчета КАК ВремБанковскиеСчета
	|ГДЕ
	|	ВремБанковскиеСчета.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", лКонтрагент);
	
	тзнВрем = Запрос.Выполнить().Выгрузить();
	
	Если тзнВрем.Количество() > 0 Тогда
		
		ВыгрузитьБанковскийСчетXDTO(ПараметрыОбмена, XDTOКонтрагент, XDTOКонтрагентТип, тзнВрем);
		
	КонецЕсли;
	
	//выгрузка контактов
	Запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтрагентов;
	Запрос.Текст = "ВЫБРАТЬ 
	|	*
	|ИЗ
	|	ВремКонтактныеЛица КАК ВремКонтактныеЛица
	|ГДЕ
	|	ВремКонтактныеЛица.ВладелецКонтактногоЛица = &Владелец";
	Запрос.УстановитьПараметр("Владелец", лПартнер);
	
	тзнВрем = Запрос.Выполнить().Выгрузить();
	
	Если тзнВрем.Количество() > 0 Тогда
		
		XDTOПредставители = ФабрикаXDTO.Создать(XDTOПредставителиТип);
		
		Для каждого ТекКонтакт из тзнВрем Цикл 
			
			XDTOПредставитель 				= ФабрикаXDTO.Создать(XDTOПредставительТип);
			XDTOПредставитель.Отношение 	= "Контактное лицо";
			XDTOПредставитель.Ид 			= XMLСтрока(ТекКонтакт.ИдентификаторКонтактногоЛица);
			XDTOПредставитель.Наименование 	= ТекКонтакт.НаименованиеКонтактногоЛица;
			
			XDTOПредставители.Представитель.Добавить(XDTOПредставитель);
			
		КонецЦикла;
		
		Если XDTOПредставители.Представитель.количество() > 0 Тогда
			XDTOКонтрагент.Представители = XDTOПредставители;
		КонецЕсли;

	КонецЕсли;
	
	//выгрузка контактной информации
	Запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтрагентов;
	Запрос.Текст = "ВЫБРАТЬ 
	|	*
	|ИЗ
	|	ВремКонтактнаяИнформация КАК ВремКонтактнаяИнформация
	|ГДЕ
	|	ВремКонтактнаяИнформация.Покупатель = &Покупатель";
	Запрос.УстановитьПараметр("Покупатель", лКонтрагент);
	                                  
	тзнВрем = Запрос.Выполнить().Выгрузить();
	
	Если тзнВрем.Количество() > 0 Тогда
		
		XDTOКонтактнаяИнформация = ФабрикаXDTO.Создать(XDTOКонтактнаяИнформацияТип);
		
		Для каждого ТекКонтИнформация из тзнВрем Цикл 
			
			Если ТекКонтИнформация.Вид 			= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
				XDTOКонтрагент.АдресРегистрации	= ПолучитьАдресXDTO(ПараметрыОбмена, ТекКонтИнформация);
			ИначеЕсли ТекКонтИнформация.Вид 	= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
				XDTOКонтрагент.Адрес			= ПолучитьАдресXDTO(ПараметрыОбмена, ТекКонтИнформация);
			ИначеЕсли ТекКонтИнформация.Вид 	= Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
				XDTOКонтактнаяИнформация.Контакт.Добавить(Б_ОбменССайтомСервер.ПолучитьКонтактнуюИнформациюXDTO(ПараметрыОбмена, XDTOКонтактТип, "Телефон рабочий", ТекКонтИнформация.Представление));
			ИначеЕсли ТекКонтИнформация.Вид 	= Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
				
				Если СокрЛП(ТекКонтИнформация.Представление) <> "@Mail.ru" Тогда	
					XDTOКонтактнаяИнформация.Контакт.Добавить(Б_ОбменССайтомСервер.ПолучитьКонтактнуюИнформациюXDTO(ПараметрыОбмена, XDTOКонтактТип, "Электронная почта", ТекКонтИнформация.Представление));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
			
		Если XDTOКонтактнаяИнформация.Контакт.количество() > 0 Тогда
			XDTOКонтрагент.Контакты = XDTOКонтактнаяИнформация;
		КонецЕсли;

	КонецЕсли;
	
	Возврат XDTOКонтрагент;
	
КонецФункции

#КонецОбласти


#Область ВыгрузкаКлассификатора

			///////////////////////////////////////////////////////////////////
			//			     	  ВЫГРУЗКА КЛАССИФИКАТОРА                   //
			/////////////////////////////////////////////////////////////////
			
// Процедура - выгружает склады в XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 Владелец объект XDTO, в который добавляются склады 
//  ВладелецТип				 - 	 Тип владельца объекта XDTO, в который добавляются склады  
//  МенеджерВременныхТаблиц	 - 	 Менеджер временных таблиц с данными о общей информации 
Процедура ВыгрузитьСкладыXDTO(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц)
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка складов в XML.", ПараметрыОбмена);
	Итератор = 0;

	XDTOСкладыТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "Склады");	
	XDTOСклады 		= ФабрикаXDTO.Создать(XDTOСкладыТип); 
	
	XDTOСкладТип 	= ПараметрыОбмена.ФайлСхемы.Получить("Склад");	
	
	//Временная таблица формируется в функции СформироватьВременныеТаблицыПоИнформацииОТоварахПакета
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремСклады КАК ВремСклады";
	ЗапросПоСкладам = Запрос.Выполнить();
	
	Если ЗапросПоСкладам.Пустой() Тогда
		Возврат;
	Иначе
	
		ВыборкаСкладов = ЗапросПоСкладам.Выбрать();
		Пока ВыборкаСкладов.Следующий() Цикл
			
			XDTOСклад 					= ФабрикаXDTO.Создать(XDTOСкладТип); 
			
			XDTOСклад.Ид				= XMLСтрока(ВыборкаСкладов.Идентификатор);
			XDTOСклад.НомерВерсии		= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, ВыборкаСкладов.ВерсияДанных, "Складов");
			XDTOСклад.ПометкаУдаления	= XMLСтрока(ВыборкаСкладов.ПометкаУдаления);
			XDTOСклад.Наименование		= ВыборкаСкладов.Наименование;
			
			XDTOСклады.Склад.Добавить(XDTOСклад);
			
			Итератор = Итератор + 1;
		КонецЦикла;
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка складов в XML завершено. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
		
		Запрос = Новый Запрос("УНИЧТОЖИТЬ ВремСклады");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();

		Если XDTOСклады.Склад.Количество() > 0 Тогда
			Владелец.Склады = XDTOСклады;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - выгружает единицы измерения в XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 Владелец объект XDTO, в который добавляются единицы измерения 
//  ВладелецТип				 - 	 Тип владельца объекта XDTO, в который добавляются единицы измерения  
//  МенеджерВременныхТаблиц	 - 	 Менеджер временных таблиц с данными о общей информации
Процедура ВыгрузитьЕдиницыИзмеренияXDTO(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц)
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка единиц измерения в XML.", ПараметрыОбмена);
	Итератор = 0;
	
	XDTOЕдиницыИзмеренияТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "ЕдиницыИзмерения");	
	XDTOЕдиницыИзмерения 	= ФабрикаXDTO.Создать(XDTOЕдиницыИзмеренияТип); 
	
	XDTOЕдиницаИзмеренияТип = ПараметрыОбмена.ФайлСхемы.Получить("ЕдиницаИзмерения");	
	
	//Временная таблица формируется в функции СформироватьВременныеТаблицыПоИнформацииОТоварахПакета
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремЕдиницыИзмерения КАК ВремЕдиницыИзмерения";
	ВыборкаЕдиниц = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЕдиниц.Следующий() Цикл
		
		XDTOЕдиницаИзмерения		= ФабрикаXDTO.Создать(XDTOЕдиницаИзмеренияТип); 
		
		XDTOЕдиницаИзмерения.Ид					= XMLСтрока(ВыборкаЕдиниц.ИдентификаторЕдиницыИзмерения);
		XDTOЕдиницаИзмерения.НомерВерсии		= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, ВыборкаЕдиниц.ВерсияДанных, "Единиц измерений");
		XDTOЕдиницаИзмерения.НаименованиеКраткое= Лев(ВыборкаЕдиниц.Наименование,4);
		XDTOЕдиницаИзмерения.ПометкаУдаления	= XMLСтрока(ВыборкаЕдиниц.ПометкаУдаления);
		XDTOЕдиницаИзмерения.Код				= Лев(ВыборкаЕдиниц.Код,4);
		XDTOЕдиницаИзмерения.НаименованиеПолное = ВыборкаЕдиниц.НаименованиеПолное;
		XDTOЕдиницаИзмерения.МеждународноеСокращение = Лев(ВыборкаЕдиниц.МеждународноеСокращение,3);

		XDTOЕдиницыИзмерения.ЕдиницаИзмерения.Добавить(XDTOЕдиницаИзмерения);
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка единиц измерения в XML завершено. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	
	Запрос = Новый Запрос("УНИЧТОЖИТЬ ВремЕдиницыИзмерения");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Владелец.ЕдиницыИзмерения = XDTOЕдиницыИзмерения;
	
КонецПроцедуры

// Процедура - выгружает соглашения в XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 Владелец объект XDTO, в который добавляются соглашения(типы цен) 
//  ВладелецТип				 - 	 Тип владельца объекта XDTO, в который добавляются соглашения(типы цен) 
//  МенеджерВременныхТаблиц	 - 	 Менеджер временных таблиц с данными о общей информации 
Процедура ВыгрузитьСоглашенияXDTO(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц)
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка типов цен в XML.", ПараметрыОбмена);
	Итератор = 0;
	
	XDTOТипыЦенТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "ТипыЦен");	
	XDTOТипыЦен 	= ФабрикаXDTO.Создать(XDTOТипыЦенТип); 
	
	XDTOТипЦеныТип 	= ПараметрыОбмена.ФайлСхемы.Получить("ТипЦены");	
	
	XDTOНалогТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOТипЦеныТип, "Налог");	
	
	//Временная таблица формируется в функции СформироватьВременныеТаблицыПоИнформацииОТоварахПакета
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремСоглашения КАК ВремСоглашения";
	ВыборкаСоглашений = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСоглашений.Следующий() Цикл
		
		XDTOТипЦены 				= ФабрикаXDTO.Создать(XDTOТипЦеныТип); 
		
		XDTOТипЦены.Ид				= XMLСтрока(ВыборкаСоглашений.ИдентификаторСоглашения);
		XDTOТипЦены.НомерВерсии		= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, ВыборкаСоглашений.ВерсияДанных, "Типов цен");
		XDTOТипЦены.Наименование	= ВыборкаСоглашений.Наименование;
		XDTOТипЦены.ПометкаУдаления	= XMLСтрока(ВыборкаСоглашений.ПометкаУдаления);
		XDTOТипЦены.Валюта			= Лев(ВыборкаСоглашений.ВалютаКод, 3 );
		
		XDTOНалог				= ФабрикаXDTO.Создать(XDTOНалогТип);
		XDTOНалог.Наименование 	= ПараметрыОбмена.НаименованиеНалога;
		XDTOНалог.УчтеноВСумме 	= XMLСтрока(ВыборкаСоглашений.ЦенаВключаетНДС);
		
		XDTOТипЦены.Налог.Добавить(XDTOНалог);
		
		XDTOТипыЦен.ТипЦены.Добавить(XDTOТипЦены);
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка типов цен в XML завершено. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	
	Запрос = Новый Запрос("УНИЧТОЖИТЬ ВремСоглашения");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Владелец.ТипыЦен = XDTOТипыЦен;
	
КонецПроцедуры

// Процедура - выгружает свойства в XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 Владелец объект XDTO, в который добавляются соглашения(типы цен) 
//  ВладелецТип				 - 	 Тип владельца объекта XDTO, в который добавляются соглашения(типы цен) 
//  МенеджерВременныхТаблиц	 - 	 Менеджер временных таблиц с данными о общей информации 
//  тзнСвойств				 - 	 Таблица значений выгружаемых свойств 
//  ТипОбъекта				 - 	 Тип объекта, для которого вфыгружаются свойства 
Процедура ВыгрузитьСвойстваXDTO(ПараметрыОбмена, Владелец, ВладелецТип, МенеджерВременныхТаблиц, Пакет, тзнСвойств, ТипОбъекта)
	
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка свойств в XML.", ПараметрыОбмена);
		Итератор = 0;
		
		XDTOСвойстваТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "Свойства");
		XDTOСвойства 	= ФабрикаXDTO.Создать(XDTOСвойстваТип); 
		
		XDTOСвойствоТип = ПараметрыОбмена.ФайлСхемы.Получить("Свойство");
		
		XDTOВариантыЗначенийТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOСвойствоТип, "ВариантыЗначений");
		XDTOСправочникТип 		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOВариантыЗначенийТип, "Справочник");
		
		ЗапросЗначенийСвойств = Новый Запрос;
		ЗапросЗначенийСвойств.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

		Для каждого ТекСвойство из тзнСвойств Цикл
		
			Итератор = Итератор + 1;
			
			лУчитываетсяВЦене = Ложь;
			
			XDTOСвойство 				= ФабрикаXDTO.Создать(XDTOСвойствоТип);  
			XDTOСвойство.Ид 			= XMLСтрока(ТекСвойство.Идентификатор);
			XDTOСвойство.НомерВерсии 	= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, ТекСвойство.ВерсияДанных, "Свойств");
			XDTOСвойство.ПометкаУдаления= XMLСтрока(ТекСвойство.ПометкаУдаления);
			XDTOСвойство.Наименование	= Лев(ТекСвойство.Наименование, 250);
			
			XDTOСвойство.Внешний		= XMLСтрока(?(ЗначениеЗаполнено(ТекСвойство.ВыгружатьВХИ), ТекСвойство.ВыгружатьВХИ, Ложь));
			лУчитываетсяВЦене			= ?(ЗначениеЗаполнено(ТекСвойство.ВлияетНаЦену), ТекСвойство.ВлияетНаЦену, Ложь);
			XDTOСвойство.Информационное	= XMLСтрока(НЕ лУчитываетсяВЦене);
			
			Типы = ТекСвойство.СвойствоНоменклатуры.ТипЗначения.Типы();
			
			XDTOСвойство.ТипЗначений = "Строка";
			
			Если НЕ Типы.Количество() <> 1 Тогда
				
				Тип = Типы[0];
				
				Если Тип = Тип("Число") Тогда
					XDTOСвойство.ТипЗначений = "Число";
				ИначеЕсли Тип = Тип("Дата") Тогда
					XDTOСвойство.ТипЗначений = "Строка";
				ИначеЕсли Тип = Тип("Булево") Тогда
					
					XDTOСвойство.ТипЗначений = "Справочник";
					
					XDTOВариантыЗначений = ФабрикаXDTO.Создать(XDTOВариантыЗначенийТип);  
					
						XDTOСправочник = ФабрикаXDTO.Создать(XDTOСправочникТип);  
						XDTOСправочник.ИдЗначения	= "true";
						XDTOСправочник.Значение		= "Да";
						XDTOВариантыЗначений.Справочник.Добавить(XDTOСправочник);
						
						XDTOСправочник = ФабрикаXDTO.Создать(XDTOСправочникТип);  
						XDTOСправочник.ИдЗначения	= "false";
						XDTOСправочник.Значение		= "Нет";  					
						XDTOВариантыЗначений.Справочник.Добавить(XDTOСправочник);
					
					XDTOСвойство.ВариантыЗначений = XDTOВариантыЗначений;
					
				Иначе
					
					Если Б_ОбменССайтомСервер.ТипЗначенияСправочник(Тип) Тогда
						
						XDTOСвойство.ТипЗначений = "Справочник";
						
							XDTOВариантыЗначений = ФабрикаXDTO.Создать(XDTOВариантыЗначенийТип);  
							
							ОбъектПоТипу = Новый(Тип);
							ТипЗначенияСправочник = ОбъектПоТипу.Метаданные().Имя;
							
							Если ТипЗначенияСправочник = "ЗначенияСвойствОбъектов" Тогда
								
									ЗапросЗначенийСвойств.Текст = "ВЫБРАТЬ *
									|ИЗ
									|	ВремЗначенияСвойств КАК ВремЗначенияСвойств
									|ГДЕ
									|	ВремЗначенияСвойств.СвойствоНоменклатуры = &Свойство";
									
									ЗапросЗначенийСвойств.УстановитьПараметр("Свойство",ТекСвойство.СвойствоНоменклатуры);		  
									
								ВыборкаЗначенийСвойств = ЗапросЗначенийСвойств.Выполнить().Выбрать();		
								
								Пока ВыборкаЗначенийСвойств.Следующий() Цикл
									
										XDTOСправочник = ФабрикаXDTO.Создать(XDTOСправочникТип);  
										XDTOСправочник.ИдЗначения	= XMLСтрока(ВыборкаЗначенийСвойств.ИдентификаторЗначенияСвойства);
										XDTOСправочник.Значение		= Лев(ВыборкаЗначенийСвойств.НаименованиеЗначенияСвойства, 1000);
									
									XDTOВариантыЗначений.Справочник.Добавить(XDTOСправочник);
									
								КонецЦикла;
								
							ИначеЕсли ТипЗначенияСправочник = "Файлы" Тогда
								
								XDTOСвойство.Внешний	= XMLСтрока(Истина);
								
								Запрос = Новый запрос;
								лМенеджерВременныхТаблицФайлов = Новый МенеджерВременныхТаблиц;
								Запрос.МенеджерВременныхТаблиц 	= лМенеджерВременныхТаблицФайлов; 
								Запрос.Текст = "ВЫБРАТЬ
								|	ХранимыеФайлыВерсий.ВерсияФайла КАК ВерсияФайла,
								|	ХранимыеФайлыВерсий.ХранимыйФайл
								|ПОМЕСТИТЬ ВремФайлы
								|ИЗ
								|	РегистрСведений.ХранимыеФайлыВерсий КАК ХранимыеФайлыВерсий
								|
								|ИНДЕКСИРОВАТЬ ПО
								|	ВерсияФайла";
								Запрос.Выполнить();
								

									Запрос = Новый Запрос;
									Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
									|	ПользовательскийСправочник.Ссылка КАК ИдентификаторЗначенияСвойства,
									|	ПользовательскийСправочник.Наименование КАК НаименованиеЗначенияСвойства
									|ИЗ
									|	Справочник.Файлы КАК ПользовательскийСправочник";
								
								ВыборкаФайлов = Запрос.Выполнить().Выбрать();
								
								Пока ВыборкаФайлов.Следующий() Цикл
									
									Запрос = Новый Запрос;
									Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблицФайлов;
									Запрос.Текст = "ВЫБРАТЬ
									|	ВремФайлы.ВерсияФайла,
									|	ВремФайлы.ХранимыйФайл
									|ИЗ
									|	ВремФайлы
									|ГДЕ
									|	ВремФайлы.ВерсияФайла = &ВерсияФайла";
									Запрос.УстановитьПараметр("ВерсияФайла",ВыборкаФайлов.ИдентификаторЗначенияСвойства.ТекущаяВерсия);
									тзнФайла = Запрос.Выполнить().Выгрузить();
									Если тзнФайла.Количество() > 0 Тогда
										
										ТекФайл = тзнФайла[0];
										
										СтруктураИнформации = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ВыборкаФайлов.ИдентификаторЗначенияСвойства, ВыборкаФайлов.ИдентификаторЗначенияСвойства.ТекущаяВерсия);

										РасширениеФайла 	= СтруктураИнформации.Расширение;
		
										ИмяПоНоменклатуре 	= Строка(ВыборкаФайлов.ИдентификаторЗначенияСвойства.УникальныйИдентификатор());
									
										ИмяФайла		 	= ИмяПоНоменклатуре + "." + НРег(РасширениеФайла);
										КаталогПоИмени   	= Лев(ИмяПоНоменклатуре, 2);
										КаталогФайла	 	= Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, (ПараметрыОбмена.КаталогНаДиске + "\properties\" + Строка(Пакет) + "\"+ ПараметрыОбмена.ПодкаталогФайлов + "\" + КаталогПоИмени));
										СоздатьКаталог(КаталогФайла);
										ПолноеИмяФайла 		= Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, (КаталогФайла + "\" + ИмяФайла));						
										
										ДвоичныеДанныеФайла = ТекФайл.ХранимыйФайл.Получить();
										ДвоичныеДанныеФайла.Записать(ПолноеИмяФайла);
									
										XDTOСправочник = ФабрикаXDTO.Создать(XDTOСправочникТип);  
										XDTOСправочник.ИдЗначения	= XMLСтрока(ВыборкаФайлов.ИдентификаторЗначенияСвойства);
										XDTOСправочник.Значение		= Лев(ВыборкаФайлов.НаименованиеЗначенияСвойства, 1000);
										XDTOСправочник.Картинка		= ПараметрыОбмена.ПодкаталогФайлов + "/" + КаталогПоИмени + "/" + ИмяФайла;
										
										XDTOВариантыЗначений.Справочник.Добавить(XDTOСправочник);
									КонецЕсли;	
								КонецЦикла;
								
								лМенеджерВременныхТаблицФайлов.Закрыть();
								
							Иначе
								
								Б_ОбменССайтомСервер.СообщитьПодробно("Для свойства " + Строка(ТекСвойство.СвойствоНоменклатуры) + " тип значений " + ТипЗначенияСправочник + ". Значения свойств могут очень долго выгружаться(зависит от количества). Если это свойство не нужно - укажите в отборах.", ПараметрыОбмена);
								
									Запрос = Новый Запрос;
									Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
									|	ПользовательскийСправочник.Ссылка КАК ИдентификаторЗначенияСвойства,
									|	ПользовательскийСправочник.Наименование КАК НаименованиеЗначенияСвойства
									|ИЗ
									|	Справочник." +  ТипЗначенияСправочник + " КАК ПользовательскийСправочник";
								
								ВыборкаЗначенийСвойств = Запрос.Выполнить().Выбрать();
								
								Пока ВыборкаЗначенийСвойств.Следующий() Цикл
									
										XDTOСправочник = ФабрикаXDTO.Создать(XDTOСправочникТип);  
										XDTOСправочник.ИдЗначения	= XMLСтрока(ВыборкаЗначенийСвойств.ИдентификаторЗначенияСвойства);
										XDTOСправочник.Значение		= Лев(ВыборкаЗначенийСвойств.НаименованиеЗначенияСвойства, 1000);
									
									XDTOВариантыЗначений.Справочник.Добавить(XDTOСправочник);
									
								КонецЦикла;
								
							КонецЕсли;	
						Если XDTOВариантыЗначений.Справочник.Количество() > 0 Тогда	
							XDTOСвойство.ВариантыЗначений = XDTOВариантыЗначений;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если XDTOСвойство.ТипЗначений <> "Справочник" И лУчитываетсяВЦене Тогда
				
				XDTOСвойство.ТипЗначений = "Справочник";

				XDTOВариантыЗначений = ФабрикаXDTO.Создать(XDTOВариантыЗначенийТип);  
				
				//Запрос вытащил сюда, чтобы не лишний раз не засорять память. Вызов этого запроса должен быть редкий.
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	НоменклатураДополнительныеРеквизиты.Значение,
				|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство
				|ПОМЕСТИТЬ ВремВсеЗначенияСвойств
				|ИЗ
				|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
				|ГДЕ
				|	НоменклатураДополнительныеРеквизиты.Свойство = &Свойство
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение,
				|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство
				|ИЗ
				|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
				|ГДЕ
				|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство = &Свойство
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ПРЕДСТАВЛЕНИЕ(ВремВсеЗначенияСвойств.Значение) КАК Значение,
				|	ВремВсеЗначенияСвойств.Свойство
				|ИЗ
				|	ВремВсеЗначенияСвойств КАК ВремВсеЗначенияСвойств
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВремВсеЗначенияСвойств";
				Запрос.УстановитьПараметр("Свойство",ТекСвойство.СвойствоНоменклатуры);
				ВыборкаЗначенийСвойств = Запрос.Выполнить().Выбрать();
				
				Пока ВыборкаЗначенийСвойств.Следующий() Цикл
					
					XDTOСправочник = ФабрикаXDTO.Создать(XDTOСправочникТип);  
					XDTOСправочник.ИдЗначения	= XMLСтрока(Лев(ВыборкаЗначенийСвойств.Значение, 40));
					XDTOСправочник.Значение		= Лев(ВыборкаЗначенийСвойств.Значение, 1000);
					
					XDTOВариантыЗначений.Справочник.Добавить(XDTOСправочник);
					
				КонецЦикла;
				
					Если XDTOВариантыЗначений.Справочник.Количество() > 0 Тогда	
						XDTOСвойство.ВариантыЗначений = XDTOВариантыЗначений;
					КонецЕсли;
				
			КонецЕсли;
			
			XDTOСвойства.Свойство.Добавить(XDTOСвойство);
			
		КонецЦикла;
		
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка свойств в XML завершено. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
		
		Владелец.Свойства = XDTOСвойства;
		
	
КонецПроцедуры

// Функция - Получить запрос используемых значений свойств
//
// Параметры:
//  МенеджерВременныхТаблицЗначенийСвойств	 - 	 Менеджер временных таблиц, содержащий информацию о свойствах товаров и предложений 
//  Свойство								 - 	 Ссылка на свойство 1С 
//  ТипСправочника							 - 	 Справочник, где хранятся значения свойств 
// Возвращаемое значение:
//   Запрос для получения только используемых значений свойств 
Функция ПолучитьЗапросИспользуемыхЗначенийСвойств(МенеджерВременныхТаблицЗначенийСвойств, Свойство, ТипСправочника = "")
	
	Если ТипСправочника = "ЗначенияСвойствОбъектов" Тогда
		
		Текст = 	"	ВЫБОР
		|		КОГДА ВремТабЗначенийСвойств.Значение.Б_Идентификатор = """"
		|			ТОГДА ВремТабЗначенийСвойств.Значение.Ссылка
		|		ИНАЧЕ ВремТабЗначенийСвойств.Значение.Б_Идентификатор
		|	КОНЕЦ КАК ИдентификаторЗначенияСвойства";
		
	Иначе
		
		Текст = 	"	ВремТабЗначенийСвойств.Значение.Ссылка КАК ИдентификаторЗначенияСвойства";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицЗначенийСвойств; 
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВремТабЗначенийСвойств.Свойство,
	|	ВремТабЗначенийСвойств.Значение.Наименование КАК НаименованиеЗначенияСвойства,
	|	" + Текст + "
	|ИЗ
	|	ВремТабЗначенийСвойств КАК ВремТабЗначенийСвойств
	|ГДЕ
	|	ВремТабЗначенийСвойств.Свойство = &Свойство";

	Запрос.УстановитьПараметр("Свойство", Свойство);		  

    Возврат Запрос;
	
КонецФункции

#КонецОбласти


#Область ВыгрузкаГруппТоваров

			///////////////////////////////////////////////////////////////////
			//				ВЫГРУЗКА ГРУПП ТОВАРОВ                          //
			/////////////////////////////////////////////////////////////////
			
			
// Процедура - выгружает группы товаров в объект XDTO владельца
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 XDTO объект, в который добавляются группы номенклатуры 
//  ВладелецТип				 - 	 Тип XDTO объекта, в который добавляются группы номенклатуры 
//  СтрокаТаблицыКаталогов	 - 	 Информация о каталоге(инфоблоке), куда нужно выгружать группы 
Процедура ВыгрузитьГруппы(ПараметрыОбмена, Владелец, ВладелецТип, СтрокаТаблицыКаталогов)
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка групп в XML.", ПараметрыОбмена);
	
	XDTOГруппыТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "Группы");
	XDTOГруппы 		= ФабрикаXDTO.Создать(XDTOГруппыТип); 

	Итератор = 0;
	ДеревоГрупп = СтрокаТаблицыКаталогов.ДеревоГрупп;                                        
	
	Если ДеревоГрупп.Строки.Количество() > 0 Тогда
		
		ВыгрузитьГруппыРекурсивноПоДеревуГруппXDTO(ПараметрыОбмена, XDTOГруппы, ДеревоГрупп.Строки, Итератор);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Узел",ПараметрыОбмена.Ссылка);
		Запрос.УстановитьПараметр("Каталог",СтрокаТаблицыКаталогов.ИдентификаторКаталога);
		Запрос.УстановитьПараметр("ТипОбъекта","ТоварДляГруппы");
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	Б_ПакетныйОбмен.Объект,
		|	ВЫРАЗИТЬ(Б_ПакетныйОбмен.Объект КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры,
		|	ВЫРАЗИТЬ(Б_ПакетныйОбмен.Объект КАК Справочник.Номенклатура).Наименование КАК Наименование
		|ПОМЕСТИТЬ ВремНоменклатура
		|ИЗ
		|	РегистрСведений.Б_ПакетныйОбмен КАК Б_ПакетныйОбмен
		|ГДЕ
		|	Б_ПакетныйОбмен.НастройкаОбмена = &Узел
		|	И Б_ПакетныйОбмен.Каталог = &Каталог
		|	И Б_ПакетныйОбмен.ТипОбъекта = &ТипОбъекта ;";
		
		ТекстЗапросаГруппыНоменклатуры =
		"ВЫБРАТЬ
		|	ВремНоменклатура.Объект КАК Объект,
		|	ВремНоменклатура.Наименование КАК Наименование,
		|	ВремНоменклатура.Объект.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	ВремНоменклатура КАК ВремНоменклатура
		|ИТОГИ ПО
		|	Объект ТОЛЬКО ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		ТекстЗапросаВидыНоменклатуры =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВремНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры
		|ИЗ
		|	ВремНоменклатура КАК ВремНоменклатура
		|ИТОГИ ПО
		|	ВидНоменклатуры ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Если ПараметрыОбмена.КлассифицироватьПоВидамНоменклатуры Тогда
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаВидыНоменклатуры;	
		Иначе
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаГруппыНоменклатуры;	
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		ДеревоГрупп = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Если ПараметрыОбмена.КлассифицироватьПоВидамНоменклатуры Тогда			
			ВыгрузитьГруппыРекурсивноПоВидамНоменклатурыXDTO(ПараметрыОбмена, XDTOГруппы, ДеревоГрупп.Строки, СтрокаТаблицыКаталогов.Группы, Итератор);			
		Иначе			
			ВыгрузитьГруппыРекурсивноXDTO(ПараметрыОбмена, XDTOГруппы, ДеревоГрупп.Строки, СтрокаТаблицыКаталогов.Группы, Итератор);			
		КонецЕсли;
		
	КонецЕсли;
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка групп в XML завершено. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);
	
	Если XDTOГруппы.Группа.количество() > 0 Тогда
		Владелец.Группы = XDTOГруппы;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - рекурсивно выгружает пользовательские группы номенклатуры в объект XDTO группы 
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена 
//  Владелец		 - 	 Объект XDTO, владелец выбранных групп
//  ДеревоГрупп		 - 	 Строка дерева групп, содержащая подчиненные деревья с группами 
//  Итератор		 - 	 Счетчик количества выгруженных групп 
Процедура ВыгрузитьГруппыРекурсивноПоДеревуГруппXDTO(ПараметрыОбмена, Владелец, ДеревоГрупп, Итератор);
	
	XDTOГруппаТип 	= ПараметрыОбмена.ФайлСхемы.Получить("Группа");
	XDTOГруппыТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOГруппаТип, "Группы");

	Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		XDTOГруппа 					= ФабрикаXDTO.Создать(XDTOГруппаТип); 
        XDTOГруппа.Ид 				= XMLСтрока(СтрокаДерева.ИдГруппы);
		XDTOГруппа.НомерВерсии 		= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, "123", "Групп");
		XDTOГруппа.ПометкаУдаления 	= XMLСтрока(Ложь);
        XDTOГруппа.Наименование 	= Лев(СтрокаДерева.Группа, 250);
		
		XDTOГруппы 		= ФабрикаXDTO.Создать(XDTOГруппыТип); 

		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			
			ВыгрузитьГруппыРекурсивноПоДеревуГруппXDTO(ПараметрыОбмена, XDTOГруппы, СтрокаДерева.Строки, Итератор);
			Если XDTOГруппы.Группа.количество() > 0 Тогда
				XDTOГруппа.Группы = XDTOГруппы;
			КонецЕсли;
		КонецЕсли;

		Итератор = Итератор + 1;
		Владелец.Группа.Добавить(XDTOГруппа);
		
	КонецЦикла;

КонецПроцедуры

// Процедура - рекурсивно выгружает группы номенклатуры в объект XDTO группы 
//
// Параметры:
//  ПараметрыОбмена				 - 	 Настройки узла обмена 
//  Владелец					 - 	 бъект XDTO, владелец выбранных групп 
//  ДеревоГрупп					 - 	 Строка дерева групп, содержащая подчиненные деревья с группами 
//  СписокГрупп					 - 	 Список групп, которые принудительно являются группой верхнего уровня
//  Итератор					 - 	 Счетчик количества выгруженных групп 
//  СоздаватьНовыйУровеньГрупп	 - 	 Признак, нужно ли создавать новый уровень групп 
//  ТекущийРодитель				 - 	 Текущий родитель.
Процедура ВыгрузитьГруппыРекурсивноXDTO(ПараметрыОбмена, Владелец, ДеревоГрупп, СписокГрупп, Итератор, СоздаватьНовыйУровеньГрупп = Истина, ТекущийРодитель = НеОпределено);

	XDTOГруппаТип 	= ПараметрыОбмена.ФайлСхемы.Получить("Группа");
	XDTOГруппыТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOГруппаТип, "Группы");
	
	Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		Если СтрокаДерева.Объект.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.ЭтоГруппа <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Объект = ТекущийРодитель Тогда
			Продолжить;
		КонецЕсли;
				
		XDTOГруппы 		= ФабрикаXDTO.Создать(XDTOГруппыТип); 

		Если Б_ОбменССайтомСервер.ЭтоГруппаВерхнегоУровня(СтрокаДерева.Объект, СписокГрупп) Тогда
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				
				Если Б_ОбменССайтомСервер.НужноВыгружатьГруппу(СписокГрупп, СтрокаДерева.Объект) Тогда
					ВыгрузитьГруппыРекурсивноXDTO(ПараметрыОбмена, XDTOГруппы, СтрокаДерева.Строки, СписокГрупп, Итератор, Ложь);
					
					XDTOГруппа 					= ФабрикаXDTO.Создать(XDTOГруппаТип); 
					
					XDTOГруппа.Ид 				= XMLСтрока(?(СтрокаДерева.Объект.Б_Идентификатор = "", СтрокаДерева.Объект, ПолучитьИдентификаторГруппы(XMLСтрока(СтрокаДерева.Объект.Б_Идентификатор))));
					XDTOГруппа.НомерВерсии 		= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, СтрокаДерева.Объект.ВерсияДанных, "Групп");
					XDTOГруппа.ПометкаУдаления 	= XMLСтрока(СтрокаДерева.Объект.ПометкаУдаления);
					XDTOГруппа.Наименование 	= Лев(СтрокаДерева.Объект.Наименование, 250);
					
					XDTOГруппа.Группы 			= XDTOГруппы;
					
					Итератор = Итератор + 1;
					Владелец.Группа.Добавить(XDTOГруппа);
					
				Иначе
					ВыгрузитьГруппыРекурсивноXDTO(ПараметрыОбмена, Владелец, СтрокаДерева.Строки, СписокГрупп, Итератор, Ложь);
				КонецЕсли;
			КонецЕсли;

		Иначе
			
			XDTOГруппа 					= ФабрикаXDTO.Создать(XDTOГруппаТип); 
			XDTOГруппа.Ид 				= XMLСтрока(?(СтрокаДерева.Объект.Б_Идентификатор = "", СтрокаДерева.Объект, ПолучитьИдентификаторГруппы(СтрокаДерева.Объект.Б_Идентификатор)));
			XDTOГруппа.НомерВерсии 		= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, СтрокаДерева.Объект.ВерсияДанных, "Групп");
			XDTOГруппа.ПометкаУдаления 	= XMLСтрока(СтрокаДерева.Объект.ПометкаУдаления);
			XDTOГруппа.Наименование 	= Лев(СтрокаДерева.Объект.Наименование, 250);
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				ВыгрузитьГруппыРекурсивноXDTO(ПараметрыОбмена, XDTOГруппы, СтрокаДерева.Строки, СписокГрупп, Итератор,, СтрокаДерева.Объект);
				Если XDTOГруппы.Группа.количество() > 0 Тогда
					XDTOГруппа.Группы = XDTOГруппы;
				КонецЕсли;
			КонецЕсли;
			
			Итератор = Итератор + 1;
			Владелец.Группа.Добавить(XDTOГруппа);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Процедура - рекурсивно выгружает виды номенклатуры в объект XDTO группы 
//
// Параметры:
//  ПараметрыОбмена				 - 	 Настройки узла обмена 
//  Владелец					 - 	 бъект XDTO, владелец выбранных групп 
//  ДеревоГрупп					 - 	 Строка дерева групп, содержащая подчиненные деревья с группами 
//  СписокГрупп					 - 	 Список групп, которые принудительно являются группой верхнего уровня
//  Итератор					 - 	 Счетчик количества выгруженных групп 
//  СоздаватьНовыйУровеньГрупп	 - 	 Признак, нужно ли создавать новый уровень групп 
//  ТекущийРодитель				 - 	 Текущий родитель.
Процедура ВыгрузитьГруппыРекурсивноПоВидамНоменклатурыXDTO(ПараметрыОбмена, Владелец, ДеревоГрупп, СписокГрупп, Итератор, СоздаватьНовыйУровеньГрупп = Истина, ТекущийРодитель = НеОпределено);
	
	XDTOГруппаТип 	= ПараметрыОбмена.ФайлСхемы.Получить("Группа");
	XDTOГруппыТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOГруппаТип, "Группы");
	
	Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		Если СтрокаДерева.ВидНоменклатуры = ТекущийРодитель Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.ВидНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;
		
		XDTOГруппы 		= ФабрикаXDTO.Создать(XDTOГруппыТип); 
		
		Если Б_ОбменССайтомСервер.ЭтоГруппаВерхнегоУровня(СтрокаДерева.ВидНоменклатуры, СписокГрупп) Тогда
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				
				Если Б_ОбменССайтомСервер.НужноВыгружатьГруппу(СписокГрупп, СтрокаДерева.ВидНоменклатуры) Тогда
					ВыгрузитьГруппыРекурсивноПоВидамНоменклатурыXDTO(ПараметрыОбмена, XDTOГруппы, СтрокаДерева.Строки, СписокГрупп, Итератор, Ложь);
					
					XDTOГруппа 					= ФабрикаXDTO.Создать(XDTOГруппаТип); 
					XDTOГруппа.Ид 				= XMLСтрока(?(СтрокаДерева.ВидНоменклатуры.Б_Идентификатор = "", СтрокаДерева.ВидНоменклатуры, СтрокаДерева.ВидНоменклатуры.Б_Идентификатор));
					XDTOГруппа.НомерВерсии 		= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, СтрокаДерева.ВидНоменклатуры.ВерсияДанных, "Групп");
					XDTOГруппа.ПометкаУдаления 	= XMLСтрока(СтрокаДерева.ВидНоменклатуры.ПометкаУдаления);
					XDTOГруппа.Наименование 	= Лев(СтрокаДерева.ВидНоменклатуры.Наименование, 250);
					
					XDTOГруппа.Группы 			= XDTOГруппы;
					
					Итератор = Итератор + 1;
					Владелец.Группа.Добавить(XDTOГруппа);
					
				Иначе
					ВыгрузитьГруппыРекурсивноПоВидамНоменклатурыXDTO(ПараметрыОбмена, Владелец, СтрокаДерева.Строки, СписокГрупп, Итератор, Ложь);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если Б_ОбменССайтомСервер.НужноВыгружатьГруппу(СписокГрупп, СтрокаДерева.ВидНоменклатуры) Тогда
				XDTOГруппа 					= ФабрикаXDTO.Создать(XDTOГруппаТип); 
				XDTOГруппа.Ид 				= XMLСтрока(?(СтрокаДерева.ВидНоменклатуры.Б_Идентификатор = "", СтрокаДерева.ВидНоменклатуры, СтрокаДерева.ВидНоменклатуры.Б_Идентификатор));
				XDTOГруппа.НомерВерсии 		= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, СтрокаДерева.ВидНоменклатуры.ВерсияДанных, "Групп");
				XDTOГруппа.ПометкаУдаления 	= XMLСтрока(СтрокаДерева.ВидНоменклатуры.ПометкаУдаления);
				XDTOГруппа.Наименование 	= Лев(СтрокаДерева.ВидНоменклатуры.Наименование, 250);
				
				Если СтрокаДерева.Строки.Количество() > 0 Тогда
					ВыгрузитьГруппыРекурсивноПоВидамНоменклатурыXDTO(ПараметрыОбмена, XDTOГруппы, СтрокаДерева.Строки, СписокГрупп, Итератор,, СтрокаДерева.ВидНоменклатуры);
					Если XDTOГруппы.Группа.количество() > 0 Тогда
						XDTOГруппа.Группы = XDTOГруппы;
					КонецЕсли;
				КонецЕсли;
				
				Итератор = Итератор + 1;
				Владелец.Группа.Добавить(XDTOГруппа);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИдентификаторГруппы(ИдГруппы)
	
	Результат = ИдГруппы;
	
	Если СтрДлина(Результат) > 2 Тогда
		
		Если Лев(Результат, 2) = "G_" Тогда
			
			Результат = Прав(Результат, СтрДлина(Результат)-2)
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат XMLСтрока(Результат);
	
КонецФункции

#КонецОбласти


#Область ВыгрузкаИнформацииИТоварах

			///////////////////////////////////////////////////////////////////
			//			    ВЫГРУЗКА ИНФОРМАЦИИ О ТОВАРАХ                   //
			/////////////////////////////////////////////////////////////////

			
// Процедура - выгружает общую информацию в XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  МассивДанных			 - 	 Массив выгружаеммых данных 
//  СтрокаТаблицыКаталогов	 - 	 Информация о каталоге(инфоблоке), куда выгружается информация 
//  НомерСтроки				 - 	 Номер каталога 
Процедура ВыгрузитьОбщуюИнформацию(ПараметрыОбмена, МассивДанных, Операция, СтрокаТаблицыКаталогов, НомерСтроки)
	
	СписокТоваров 		= Новый СписокЗначений;
	СписокСкладов 		= Новый СписокЗначений;
	СписокСоглашений	= Новый СписокЗначений;
	
	Успешно = Ложь;
	
	XDTOКоммерческаяИнформацияТип 	= ПараметрыОбмена.ФайлСхемы.Получить("КоммерческаяИнформация");
	XDTOКаталогТип 					= ПараметрыОбмена.ФайлСхемы.Получить("Каталог");
	XDTOКлассификаторТип 			= ПараметрыОбмена.ФайлСхемы.Получить("Классификатор");
	XDTOПакетПредложенийТип 		= ПараметрыОбмена.ФайлСхемы.Получить("ПакетПредложений");
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
	
	МассивСтрок = МассивДанных.НайтиСтроки(Новый структура("Пакет", 0));	
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		РазбитаяСтруктураДанных = РазборМассиваДанныхПоТипамОбъектов(МассивСтрок);
		
		НовСтрокаКэша = ПараметрыОбмена.КэшДанных.Добавить();
		НовСтрокаКэша.ИдентификаторКаталога 		= СтрокаТаблицыКаталогов.ИдентификаторКаталога;
		НовСтрокаКэша.ОбщийСписокСкладов 			= РазбитаяСтруктураДанных.Склады;
		НовСтрокаКэша.ОбщийСписокСоглашений 		= РазбитаяСтруктураДанных.Соглашения;
		НовСтрокаКэша.ОбщийСписокЕдиницИзмерений 	= РазбитаяСтруктураДанных.Единицы;
	
		лМенеджерВременныхТаблиц 	= СформироватьВременныеТаблицыПоОбщейИнформации(ПараметрыОбмена, РазбитаяСтруктураДанных.Склады, РазбитаяСтруктураДанных.Соглашения, РазбитаяСтруктураДанных.Единицы);
		
		XDTOКаталог 				= ФабрикаXDTO.Создать(XDTOКаталогТип); 
		XDTOКаталог.Ид				= СтрокаТаблицыКаталогов.ИдентификаторКаталога;
		XDTOКаталог.ИдКлассификатора= СтрокаТаблицыКаталогов.ИдентификаторКаталога;
		XDTOКаталог.Наименование	= СтрокаТаблицыКаталогов.Каталог;
		XDTOКаталог.Описание 		= СтрокаТаблицыКаталогов.Каталог;
		XDTOКаталог.СодержитТолькоИзменения = XMLСтрока(Истина);
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка справочных данных.", ПараметрыОбмена);
		
		ИмяКаталога = ПараметрыОбмена.КаталогНаДиске; 
		
		
		//выгрузка классификатора
		
		XDTOКоммерческаяИнформация 	= ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);
		
		XDTOКлассификатор 				= ФабрикаXDTO.Создать(XDTOКлассификаторТип); 
		XDTOКлассификатор.Ид            = СтрокаТаблицыКаталогов.ИдентификаторКаталога;
		XDTOКлассификатор.Наименование  = СтрокаТаблицыКаталогов.Каталог;
		XDTOКлассификатор.СодержитТолькоИзменения 	= XMLСтрока(Истина);
		
		ВыгрузитьГруппы(ПараметрыОбмена, XDTOКлассификатор, XDTOКлассификаторТип, СтрокаТаблицыКаталогов);   
		
		ВыгрузитьЕдиницыИзмеренияXDTO(ПараметрыОбмена, XDTOКлассификатор, XDTOКлассификаторТип, лМенеджерВременныхТаблиц);
		
		Если ПараметрыОбмена.ВыгружатьОстаткиПоСкладам Тогда
			ВыгрузитьСкладыXDTO(ПараметрыОбмена, XDTOКлассификатор, XDTOКлассификаторТип, лМенеджерВременныхТаблиц);
		КонецЕсли;
		Если ПараметрыОбмена.ВыгружатьЦены Тогда
			ВыгрузитьСоглашенияXDTO(ПараметрыОбмена, XDTOКлассификатор, XDTOКлассификаторТип, лМенеджерВременныхТаблиц);
		КонецЕсли;
		
		XDTOКоммерческаяИнформация.Классификатор 	= XDTOКлассификатор;
		XDTOКоммерческаяИнформация.Каталог 			= XDTOКаталог;
		
		Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "import" + ?(НомерСтроки > 0 ,Строка(НомерСтроки), ""), "catalog", 0);		
		
		УдалениеПакетовИРегистрацийОбщейИнформации(Успешно, ПараметрыОбмена, Операция, 0, СтрокаТаблицыКаталогов.ИдентификаторКаталога, МассивСтрок);
		
		лМенеджерВременныхТаблиц.Закрыть();
		
		
	КонецЕсли;
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Завершение выгрузки пакета с общей информацией каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
	
КонецПроцедуры

// Функция - формирует временные таблицы с информацией о общей информации
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена 
//  СписокСкладов	 - 	 Список выгружаемых складов 
//  СписокСоглашений - 	 Список выгружаемых соглашений 
//  СписокЕдиниц	 - 	 Список выгружаемых единиц измерений 
// Возвращаемое значение:
//   Менеджер временных таблиц, хранящий информацию о общей информации 
Функция СформироватьВременныеТаблицыПоОбщейИнформации(ПараметрыОбмена, СписокСкладов, СписокСоглашений, СписокЕдиниц)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Узел"	, ПараметрыОбмена.Ссылка);
	Запрос.УстановитьПараметр("ТекДата"	, ТекущаяДата());
	
	Запрос.УстановитьПараметр("СписокСкладов"	, СписокСкладов);
	Запрос.УстановитьПараметр("СписокСоглашений", СписокСоглашений);
	Запрос.УстановитьПараметр("СписокЕдиниц" 	, СписокЕдиниц);
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	                                                                                                ///
	//             ПАКЕТ ЗАПРОСОВ ДЛЯ ПОЛУЧЕНИЯ НОМЕНКЛАТУРЫ С ХАРАКТЕРИСТИКОЙ                         ///
	//                                                                                                ///
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад,
	|	ВЫБОР
	|		КОГДА Склады.Б_Идентификатор = """"
	|			ТОГДА Склады.Ссылка
	|		ИНАЧЕ Склады.Б_Идентификатор
	|	КОНЕЦ КАК Идентификатор,
	|	Склады.ВерсияДанных,
	|	Склады.Наименование,
	|	Склады.ПометкаУдаления
	|ПОМЕСТИТЬ ВремСклады
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|	И Склады.Ссылка В(&СписокСкладов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоглашенияСКлиентами.Ссылка КАК Ссылка,
	|	СоглашенияСКлиентами.НалогообложениеНДС КАК НалогообложениеНДС,
	|	СоглашенияСКлиентами.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	СоглашенияСКлиентами.ВидЦен КАК ВидЦен,
	|	СоглашенияСКлиентами.Валюта КАК Валюта,
	|	СоглашенияСКлиентами.Валюта.Наименование КАК ВалютаКод,
	|	ВЫБОР
	|		КОГДА СоглашенияСКлиентами.Б_Идентификатор = """"
	|			ТОГДА СоглашенияСКлиентами.Ссылка
	|		ИНАЧЕ СоглашенияСКлиентами.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторСоглашения,
	|	ВЫБОР
	|		КОГДА СоглашенияСКлиентами.ВидЦен.Б_Идентификатор = """"
	|			ТОГДА СоглашенияСКлиентами.ВидЦен.Ссылка
	|		ИНАЧЕ СоглашенияСКлиентами.ВидЦен.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторВидаЦены,
	|	СоглашенияСКлиентами.ВерсияДанных,
	|	СоглашенияСКлиентами.ПометкаУдаления,
	|	СоглашенияСКлиентами.Наименование
	|ПОМЕСТИТЬ ВремСоглашения
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.Ссылка В(&СписокСоглашений)
	|{ГДЕ
	|	СоглашенияСКлиентами.Ссылка.* КАК Соглашение}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ЕдиницыИзмерения.Б_Идентификатор = """"
	|			ТОГДА ЕдиницыИзмерения.Ссылка
	|		ИНАЧЕ ЕдиницыИзмерения.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторЕдиницыИзмерения,
	|	ЕдиницыИзмерения.ВерсияДанных,
	|	ЕдиницыИзмерения.ПометкаУдаления,
	|	ЕдиницыИзмерения.Код,
	|	ЕдиницыИзмерения.Наименование,
	|	ЕдиницыИзмерения.НаименованиеПолное,
	|	ЕдиницыИзмерения.МеждународноеСокращение
	|ПОМЕСТИТЬ ВремЕдиницыИзмерения
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Ссылка В(&СписокЕдиниц)
	|	И ЕдиницыИзмерения.Ссылка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЕдиницаИзмерения";
	
	
	лМенеджерВременныхТаблиц 		= Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц 	= лМенеджерВременныхТаблиц; 
	Запрос.Текст = ТекстЗапроса;
	запрос.Выполнить();	
	
	Возврат лМенеджерВременныхТаблиц;
	
КонецФункции

// Процедура - выгружает информацию о свойствах в XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  МассивДанных			 - 	 Массив выгружаеммых данных 
//  СтрокаТаблицыКаталогов	 - 	 Информация о каталоге(инфоблоке), куда выгружается информация 
//  НомерСтроки				 - 	 Номер каталога 
Процедура ВыгрузитьИнформациюОСвойствах(ПараметрыОбмена, МассивДанных, Операция, СтрокаТаблицыКаталогов, НомерСтроки)
	
	Успешно = Ложь;
	
	XDTOКоммерческаяИнформацияТип 	= ПараметрыОбмена.ФайлСхемы.Получить("КоммерческаяИнформация");
	XDTOКаталогТип 					= ПараметрыОбмена.ФайлСхемы.Получить("Каталог");
	XDTOКлассификаторТип 			= ПараметрыОбмена.ФайлСхемы.Получить("Классификатор");
	XDTOПакетПредложенийТип 		= ПараметрыОбмена.ФайлСхемы.Получить("ПакетПредложений");
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
	
	лКоличествоСтрок = МассивДанных.Количество();
	КоличествоПакетов = ?(лКоличествоСтрок > 0, МассивДанных[лКоличествоСтрок - 1].Пакет, -1); 
	
	Для Пакет = 1 по КоличествоПакетов Цикл
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Начало выгрузки пакета " + Строка(Пакет) + " каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена);
		
		МассивСтрок = МассивДанных.НайтиСтроки(Новый структура("Пакет", Пакет));	
		
		Если МассивСтрок.Количество() > 0 Тогда
							
			ИмяКаталога = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ?(Пакет > 0, ПараметрыОбмена.КаталогНаДиске + "\properties\" + Строка(Пакет), ПараметрыОбмена.КаталогНаДиске)); 
			
			РазбитаяСтруктураДанных = РазборМассиваДанныхПоТипамОбъектов(МассивСтрок);
			
			СписокСвойств 			= РазбитаяСтруктураДанных.Свойства;
			
			лМенеджерВременныхТаблиц = СформироватьВременныеТаблицыПоСвойствамПакета(ПараметрыОбмена, СписокСвойств);
			
			//Выгружаем свойства товаров 
			ЗапросСвойств = Новый Запрос;
			ЗапросСвойств.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
			
			ЗапросСвойств.Текст = "ВЫБРАТЬ *
			|ИЗ
			|	ВремСвойства КАК ВремСвойства
			|ГДЕ
			| ВремСвойства.НеВыгружатьВСвойстваТоваров <> Истина";
			тзнСвойств = ЗапросСвойств.Выполнить().Выгрузить();
				
			Если тзнСвойств.Количество() > 0 Тогда	
				XDTOКоммерческаяИнформация 	= ФабрикаXDTO.Создать(XDTOКоммерческаяИнформацияТип);
				XDTOКоммерческаяИнформация.ВерсияСхемы 		= ПараметрыОбмена.ВерсияСхемы;
				XDTOКоммерческаяИнформация.Ид 				= ПараметрыОбмена.Идентификатор;
				XDTOКоммерческаяИнформация.ДатаФормирования = XMLСтрока(ТекущаяДата());

				XDTOКаталог 				= ФабрикаXDTO.Создать(XDTOКаталогТип); 
				XDTOКаталог.Ид				= СтрокаТаблицыКаталогов.ИдентификаторКаталога;
				XDTOКаталог.ИдКлассификатора= СтрокаТаблицыКаталогов.ИдентификаторКаталога;
				XDTOКаталог.Наименование	= СтрокаТаблицыКаталогов.Каталог;
				XDTOКаталог.Описание 		= СтрокаТаблицыКаталогов.Каталог;
				XDTOКаталог.СодержитТолькоИзменения = XMLСтрока(Истина);
				
				XDTOКлассификатор 				= ФабрикаXDTO.Создать(XDTOКлассификаторТип); 
				XDTOКлассификатор.Ид            = СтрокаТаблицыКаталогов.ИдентификаторКаталога;
				XDTOКлассификатор.Наименование  = СтрокаТаблицыКаталогов.Каталог;
				XDTOКлассификатор.СодержитТолькоИзменения 	= XMLСтрока(Истина);
				
				ВыгрузитьСвойстваXDTO(ПараметрыОбмена, XDTOКлассификатор, XDTOКлассификаторТип, лМенеджерВременныхТаблиц, Пакет, тзнСвойств, "Товар");
				
				XDTOКоммерческаяИнформация.Классификатор 	= XDTOКлассификатор;
				XDTOКоммерческаяИнформация.Каталог 			= XDTOКаталог;
				
				Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "import" + ?(НомерСтроки > 0 ,Строка(НомерСтроки), ""), "catalog", Пакет);				
			КонецЕсли;	
			
			//Выгружаем свойства предложений 
			ЗапросСвойств = Новый Запрос;
			ЗапросСвойств.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
			
			ЗапросСвойств.Текст = "ВЫБРАТЬ *
			|ИЗ
			|	ВремСвойства КАК ВремСвойства
			|ГДЕ
			| ВремСвойства.НеВыгружатьВСвойстваПредложений <> Истина";	
			тзнСвойств = ЗапросСвойств.Выполнить().Выгрузить();
				
			Если тзнСвойств.Количество() > 0 Тогда	
				
				XDTOКоммерческаяИнформация 	= ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);

				XDTOПакетПредложений						= ФабрикаXDTO.Создать(XDTOПакетПредложенийТип);  
				XDTOПакетПредложений.Ид						= СтрокаТаблицыКаталогов.ИдентификаторКаталога + "#";
				XDTOПакетПредложений.Наименование			= "Пакет предложений (" + СтрокаТаблицыКаталогов.Каталог + ")";
				XDTOПакетПредложений.ИдКаталога				= СтрокаТаблицыКаталогов.ИдентификаторКаталога;
				XDTOПакетПредложений.ИдКлассификатора		= СтрокаТаблицыКаталогов.ИдентификаторКаталога;
				XDTOПакетПредложений.СодержитТолькоИзменения= XMLСтрока(Истина);
					
				XDTOКоммерческаяИнформация.ПакетПредложений = XDTOПакетПредложений;
				
				XDTOКлассификатор 				= ФабрикаXDTO.Создать(XDTOКлассификаторТип); 
				XDTOКлассификатор.Ид            = СтрокаТаблицыКаталогов.ИдентификаторКаталога;
				XDTOКлассификатор.Наименование  = СтрокаТаблицыКаталогов.Каталог;
				XDTOКлассификатор.СодержитТолькоИзменения 	= XMLСтрока(Истина);
				
				ВыгрузитьСвойстваXDTO(ПараметрыОбмена, XDTOКлассификатор, XDTOКлассификаторТип, лМенеджерВременныхТаблиц, Пакет, тзнСвойств, "Предложения");
				
				XDTOКоммерческаяИнформация.Классификатор 	= XDTOКлассификатор;
				
				Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "offers" + ?(НомерСтроки > 0 ,Строка(НомерСтроки), ""), "catalog", Пакет);		
				
			КонецЕсли;	
			
			УдалениеПакетовИРегистраций(Успешно, ПараметрыОбмена, Операция, Пакет, СтрокаТаблицыКаталогов.ИдентификаторКаталога, МассивСтрок);
				
			лМенеджерВременныхТаблиц.Закрыть();
			
		КонецЕсли;
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Завершение выгрузки пакета " + Строка(Пакет) + " каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция - формирует временные таблицы с информацией о свойствах пакета
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена 
//  СписокСвойств	 - 	 Список свойств пакета 
// Возвращаемое значение:
//   Менеджер временных таблиц, хранящий информацию о товарах 
Функция СформироватьВременныеТаблицыПоСвойствамПакета(ПараметрыОбмена, СписокСвойств)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Узел"	, ПараметрыОбмена.Ссылка);
	Запрос.УстановитьПараметр("ТекДата"	, ТекущаяДата());
	
	Запрос.УстановитьПараметр("СписокСвойств"	, СписокСвойств);
	Запрос.УстановитьПараметр("НастройкиСвойств", ПараметрыОбмена.НастройкаСвойствТоваровИХарактеристик);
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	                                                                                                ///
	//             ПАКЕТ ЗАПРОСОВ ДЛЯ ПОЛУЧЕНИЯ НОМЕНКЛАТУРЫ С ХАРАКТЕРИСТИКОЙ                         ///
	//                                                                                                ///
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	НастройкиСвойств.Свойство,
	|	НастройкиСвойств.НеВыгружатьВСвойстваПредложений,
	|	НастройкиСвойств.НеВыгружатьВСвойстваТоваров,
	|	НастройкиСвойств.ВлияетНаЦену,
	|	НастройкиСвойств.ВыгружатьВХИ
	|ПОМЕСТИТЬ НастройкиСвойств
	|ИЗ
	|	&НастройкиСвойств КАК НастройкиСвойств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК СвойствоНоменклатуры,
	|	ВЫБОР
	|		КОГДА ДополнительныеРеквизитыИСведения.Б_Идентификатор = """"
	|			ТОГДА ДополнительныеРеквизитыИСведения.Ссылка
	|		ИНАЧЕ ДополнительныеРеквизитыИСведения.Б_Идентификатор
	|	КОНЕЦ КАК Идентификатор,
	|	ДополнительныеРеквизитыИСведения.ВерсияДанных,
	|	ДополнительныеРеквизитыИСведения.ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА ДополнительныеРеквизитыИСведения.Заголовок = """"
	|			ТОГДА ДополнительныеРеквизитыИСведения.Наименование
	|		ИНАЧЕ ДополнительныеРеквизитыИСведения.Заголовок
	|	КОНЕЦ КАК Наименование,
	|	НастройкиСвойств.НеВыгружатьВСвойстваПредложений,
	|	НастройкиСвойств.НеВыгружатьВСвойстваТоваров,
	|	НастройкиСвойств.ВлияетНаЦену,
	|	НастройкиСвойств.ВыгружатьВХИ
	|ПОМЕСТИТЬ ВремСвойства
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиСвойств КАК НастройкиСвойств
	|		ПО ДополнительныеРеквизитыИСведения.Ссылка = НастройкиСвойств.Свойство
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Ссылка В(&СписокСвойств)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СвойствоНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремСвойства.СвойствоНоменклатуры КАК СвойствоНоменклатуры,
	|	ВремСвойства.Идентификатор КАК ИдентификаторСвойства,
	|	ВремСвойства.Наименование КАК НаименованиеСвойства,
	|	ЗначенияСвойствОбъектов.Ссылка КАК ЗначениеСвойства,
	|	ВЫБОР
	|		КОГДА ЗначенияСвойствОбъектов.Б_Идентификатор = """"
	|				ИЛИ ЗначенияСвойствОбъектов.Б_Идентификатор ЕСТЬ NULL 
	|			ТОГДА ЗначенияСвойствОбъектов.Ссылка
	|		ИНАЧЕ ЗначенияСвойствОбъектов.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторЗначенияСвойства,
	|	ЗначенияСвойствОбъектов.Наименование КАК НаименованиеЗначенияСвойства
	|ПОМЕСТИТЬ ВремЗначенияСвойств
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремСвойства КАК ВремСвойства
	|		ПО (ВремСвойства.СвойствоНоменклатуры = ЗначенияСвойствОбъектов.Владелец)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СвойствоНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НастройкиСвойств";
	
	
	
	
	лМенеджерВременныхТаблиц 		= Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц 	= лМенеджерВременныхТаблиц; 
	Запрос.Текст = ТекстЗапроса;
	запрос.Выполнить();	
	
	Возврат лМенеджерВременныхТаблиц;
	
КонецФункции


// Процедура - выгружает информацию о товарах
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  МассивДанных			 - 	 Массив выгружаеммых данных 
//  СтрокаТаблицыКаталогов	 - 	 Информация о каталоге(инфоблоке), куда выгружается информация 
//  НомерСтроки				 - 	 Номер каталога 
Процедура ВыгрузитьИнформациюОТоварах(ПараметрыОбмена, МассивДанных, Операция, СтрокаТаблицыКаталогов, НомерСтроки)
	
	//получаем все используемые свойства товаров с учетом доп. настроек
	
	Запрос = ПолучитьЗапросПоИспользуемымСвойствамТоваров(ПараметрыОбмена, СтрокаТаблицыКаталогов.ХранилищеНастроекКомпоновки.Получить());
	ТаблицаСвойствБезДопНастроек 	= Запрос.Выполнить().Выгрузить();
	ТаблицаСвойствСДопНастройками 	= ФильтрацияСвойствПоДополнительнымНастройкам(ТаблицаСвойствБезДопНастроек, ПараметрыОбмена);
	
	мСвойства = ТаблицаСвойствСДопНастройками.ВыгрузитьКолонку("Объект");			
				
	Успешно = Ложь;
	
	XDTOКоммерческаяИнформацияТип 	= ПараметрыОбмена.ФайлСхемы.Получить("КоммерческаяИнформация");
	XDTOКаталогТип 					= ПараметрыОбмена.ФайлСхемы.Получить("Каталог");
	XDTOКлассификаторТип 			= ПараметрыОбмена.ФайлСхемы.Получить("Классификатор");
	XDTOПакетПредложенийТип 		= ПараметрыОбмена.ФайлСхемы.Получить("ПакетПредложений");
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакетов каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
	
	лКоличествоСтрок = МассивДанных.Количество();
	КоличествоПакетов = ?(лКоличествоСтрок > 0, МассивДанных[лКоличествоСтрок - 1].Пакет, -1); 
	
	Для Пакет = 1 по КоличествоПакетов Цикл
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Начало выгрузки пакета " + Строка(Пакет) + " каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена);
		
		МассивСтрок = МассивДанных.НайтиСтроки(Новый структура("Пакет", Пакет));	
		
		Если массивСтрок.Количество() > 0 Тогда
					
			МассивКартинок 	= новый Массив;
			МассивФайлов   	= новый Массив;
			УспешноВсе		= Истина;		
			РазбитаяСтруктураДанных 	= РазборМассиваДанныхПоТипамОбъектов(МассивСтрок);
			
			СписокТоваров 				= РазбитаяСтруктураДанных.Номенклатура;
			
			лМенеджерВременныхТаблиц 	= СформироватьВременныеТаблицыПоИнформацииОТоварахПакета(ПараметрыОбмена, СтрокаТаблицыКаталогов.ИдентификаторКаталога, СписокТоваров, мСвойства);
			
			XDTOКаталог 				= ФабрикаXDTO.Создать(XDTOКаталогТип); 
			XDTOКаталог.Ид				= СтрокаТаблицыКаталогов.ИдентификаторКаталога;
			XDTOКаталог.ИдКлассификатора= СтрокаТаблицыКаталогов.ИдентификаторКаталога;
			XDTOКаталог.Наименование	= СтрокаТаблицыКаталогов.Каталог;
			XDTOКаталог.Описание 		= СтрокаТаблицыКаталогов.Каталог;
			XDTOКаталог.СодержитТолькоИзменения = XMLСтрока(Истина);
			
			Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка данных о товарах.", ПараметрыОбмена);
			
			ИмяКаталога = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ?(Пакет > 0, ПараметрыОбмена.КаталогНаДиске + "\goods\" + Строка(Пакет), ПараметрыОбмена.КаталогНаДиске)); 
			
			//выгрузка товаров
			Если ПараметрыОбмена.ВыгружатьТовары Тогда
				
				XDTOКоммерческаяИнформация 	= ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);
				ВыгрузитьТоварыXDTO(ПараметрыОбмена, ИмяКаталога, XDTOКаталог, XDTOКаталогТип, лМенеджерВременныхТаблиц, СтрокаТаблицыКаталогов, МассивКартинок, МассивФайлов);
				XDTOКоммерческаяИнформация.Каталог = XDTOКаталог;

				Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "import" + ?(НомерСтроки > 0 ,Строка(НомерСтроки), ""), "catalog", Пакет);		
				УспешноВсе = ?(УспешноВсе = Истина, Успешно, УспешноВсе);	
			КонецЕсли;
				
			//выгрузка предложений
			Если ПараметрыОбмена.ВыгружатьПредложения Тогда
				XDTOКоммерческаяИнформация 	= ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);
					
				XDTOПакетПредложений						= ФабрикаXDTO.Создать(XDTOПакетПредложенийТип);  
				XDTOПакетПредложений.Ид						= СтрокаТаблицыКаталогов.ИдентификаторКаталога + "#";
				XDTOПакетПредложений.Наименование			= "Пакет предложений (" + СтрокаТаблицыКаталогов.Каталог + ")";
				XDTOПакетПредложений.ИдКаталога				= СтрокаТаблицыКаталогов.ИдентификаторКаталога;
				XDTOПакетПредложений.ИдКлассификатора		= СтрокаТаблицыКаталогов.ИдентификаторКаталога;
				XDTOПакетПредложений.СодержитТолькоИзменения= XMLСтрока(Истина);
				
				ВыгрузитьПредложенияXDTO(ПараметрыОбмена, ИмяКаталога, XDTOПакетПредложений, XDTOПакетПредложенийТип, лМенеджерВременныхТаблиц, МассивКартинок, МассивФайлов);
					
				XDTOКоммерческаяИнформация.ПакетПредложений = XDTOПакетПредложений;
					
				Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "offers" + ?(НомерСтроки > 0 ,Строка(НомерСтроки), ""), "catalog", Пакет);		
				УспешноВсе = ?(УспешноВсе = Истина, Успешно, УспешноВсе);	
			КонецЕсли;
				
			//выгрузка цен
			Если ПараметрыОбмена.ВыгружатьЦены Тогда  
					
				XDTOКоммерческаяИнформация 					= ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);
					
				XDTOПакетПредложений						= ФабрикаXDTO.Создать(XDTOПакетПредложенийТип);  
				XDTOПакетПредложений.Ид						= СтрокаТаблицыКаталогов.ИдентификаторКаталога + "#";
				XDTOПакетПредложений.Наименование			= "Пакет предложений (" + СтрокаТаблицыКаталогов.Каталог + ")";
				XDTOПакетПредложений.ИдКаталога				= СтрокаТаблицыКаталогов.ИдентификаторКаталога;
				XDTOПакетПредложений.ИдКлассификатора		= СтрокаТаблицыКаталогов.ИдентификаторКаталога;
				XDTOПакетПредложений.СодержитТолькоИзменения= XMLСтрока(Истина);
					
				XDTOПредложенияТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOПакетПредложенийТип, "Предложения");
					
				XDTOПредложения 	= ФабрикаXDTO.Создать(XDTOПредложенияТип); 
					
				ВыгрузитьПрайсы(ПараметрыОбмена, XDTOПредложения, XDTOПредложенияТип, лМенеджерВременныхТаблиц);
				XDTOПакетПредложений.Предложения = XDTOПредложения;
					
				XDTOКоммерческаяИнформация.ПакетПредложений = XDTOПакетПредложений;
					
				Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "prices" + ?(НомерСтроки > 0 ,Строка(НомерСтроки), ""), "catalog", Пакет);		
				УспешноВсе = ?(УспешноВсе = Истина, Успешно, УспешноВсе);	
			КонецЕсли;
				
			//выгрузка остатков
			Если ПараметрыОбмена.ВыгружатьОстатки Тогда  
					
				XDTOКоммерческаяИнформация 					= ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип);
					
				XDTOПакетПредложений						= ФабрикаXDTO.Создать(XDTOПакетПредложенийТип);  
				XDTOПакетПредложений.Ид						= СтрокаТаблицыКаталогов.ИдентификаторКаталога + "#";
				XDTOПакетПредложений.Наименование			= "Пакет предложений (" + СтрокаТаблицыКаталогов.Каталог + ")";
				XDTOПакетПредложений.ИдКаталога				= СтрокаТаблицыКаталогов.ИдентификаторКаталога;
				XDTOПакетПредложений.ИдКлассификатора		= СтрокаТаблицыКаталогов.ИдентификаторКаталога;
				XDTOПакетПредложений.СодержитТолькоИзменения= XMLСтрока(Истина);
					
				XDTOПредложенияТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOПакетПредложенийТип, "Предложения");
					
				XDTOПредложения 	= ФабрикаXDTO.Создать(XDTOПредложенияТип); 
					
				ВыгрузитьОстаткиXDTO(ПараметрыОбмена, XDTOПредложения, XDTOПредложенияТип, лМенеджерВременныхТаблиц);
				XDTOПакетПредложений.Предложения = XDTOПредложения;
					
				XDTOКоммерческаяИнформация.ПакетПредложений = XDTOПакетПредложений;
					
				Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталога, "rests" + ?(НомерСтроки > 0 ,Строка(НомерСтроки), ""), "catalog", Пакет);		
				УспешноВсе = ?(УспешноВсе = Истина, Успешно, УспешноВсе);	
			КонецЕсли;
			
			УдалениеПакетовИРегистраций(УспешноВсе, ПараметрыОбмена, Операция, Пакет, СтрокаТаблицыКаталогов.ИдентификаторКаталога, МассивСтрок, МассивКартинок, МассивФайлов);
			
			лМенеджерВременныхТаблиц.Закрыть();
			
		КонецЕсли;
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Завершение выгрузки пакета " + Строка(Пакет) + " каталога: " + СтрокаТаблицыКаталогов.Каталог, ПараметрыОбмена, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция - формирует временные таблицы с информацией о товарах пакета
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена 
//  СписокТоваров	 - 	 Список товаров пакета 
//  СписокСвойств	 - 	 Список используемых свойств 
// Возвращаемое значение:
//   Менеджер временных таблиц, хранящий информацию о товарах 
Функция СформироватьВременныеТаблицыПоИнформацииОТоварахПакета(ПараметрыОбмена, ИдентификаторКаталога, СписокТоваров, СписокСвойств)
	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Узел"	, ПараметрыОбмена.Ссылка);
	Запрос.УстановитьПараметр("ТекДата"	, ТекущаяДата());
	
	Запрос.УстановитьПараметр("СписокТоваров"	, СписокТоваров);
	Запрос.УстановитьПараметр("СписокСвойств"	, СписокСвойств);
	
	
	НайданнаяСтрока = ПараметрыОбмена.КэшДанных.Найти(ИдентификаторКаталога, "ИдентификаторКаталога");
	Если НайданнаяСтрока <> Неопределено Тогда
	
		Запрос.УстановитьПараметр("СписокСкладов"	, НайданнаяСтрока.ОбщийСписокСкладов);
		Запрос.УстановитьПараметр("СписокСоглашений", НайданнаяСтрока.ОбщийСписокСоглашений);
		Запрос.УстановитьПараметр("СписокЕдиниц" 	, НайданнаяСтрока.ОбщийСписокЕдиницИзмерений);
			
	Иначе
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Произошла ошибка в модуле. Информация по складам и остаткам может быть некорректной.", ПараметрыОбмена, Истина);
		
		Запрос.УстановитьПараметр("СписокСкладов"	, "");
		Запрос.УстановитьПараметр("СписокСоглашений", "");
		Запрос.УстановитьПараметр("СписокЕдиниц" 	, "");
	КонецЕсли;
	
	
	
	Запрос.УстановитьПараметр("ВыгружатьВсеКартинки"				, ПараметрыОбмена.ПринудительнаяПолноеОбновлениеДанныхТовара ИЛИ ПараметрыОбмена.ВыполнятьПолнуюВыгрузкуПринудительно);
	Запрос.УстановитьПараметр("ВыгружатьВсеХарактеристики"			, НЕ ПараметрыОбмена.ВыгружатьХарактеристикиТолькоСОстатками);
	Запрос.УстановитьПараметр("ВыгружатьОстаткиСУчетомРезерва"		, ПараметрыОбмена.ВыгружатьОстаткиСУчетомРезерва);
	
	Запрос.УстановитьПараметр("СписокРасширенийКартинок"			, ПараметрыОбмена.РасширенияКартинок);
	
	Запрос.УстановитьПараметр("ВыгружатьТолькоСЦеной"				, ПараметрыОбмена.ВыгружатьПредложенияТолькоСЦеной);
	Запрос.УстановитьПараметр("ВыгружатьНоменклатуруКакПредложение"	, ПараметрыОбмена.ВыгружатьНоменклатуруКакПредложение);
	Запрос.УстановитьПараметр("ИспользоватьУпаковкиНоменклатуры"	, ПараметрыОбмена.ИспользоватьУпаковкиНоменклатуры);
	Запрос.УстановитьПараметр("ВыгружатьКомплектующие"				, ПараметрыОбмена.ВыгружатьКомплектующие);
	Запрос.УстановитьПараметр("НастройкиСвойств"					, ПараметрыОбмена.НастройкаСвойствТоваровИХарактеристик);
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	                                                                                                ///
	//             ПАКЕТ ЗАПРОСОВ ДЛЯ ПОЛУЧЕНИЯ НОМЕНКЛАТУРЫ С ХАРАКТЕРИСТИКОЙ                         ///
	//                                                                                                ///
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВремНоменклатураОтбор
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокТоваров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура КАК Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец КАК Комплект,
	|	ВЫБОР
	|		КОГДА ВариантыКомплектацииНоменклатурыТовары.Характеристика ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ ВариантыКомплектацииНоменклатурыТовары.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ВариантыКомплектацииНоменклатурыТовары.Характеристика ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВариантыКомплектацииНоменклатурыТовары.Характеристика.Б_Идентификатор = """"
	|					ТОГДА ВариантыКомплектацииНоменклатурыТовары.Характеристика.Ссылка
	|				ИНАЧЕ ВариантыКомплектацииНоменклатурыТовары.Характеристика.Б_Идентификатор
	|			КОНЕЦ
	|	КОНЕЦ КАК ИдентификаторХарактеристики,
	|	ВЫБОР
	|		КОГДА ВариантыКомплектацииНоменклатурыТовары.Характеристика ЕСТЬ NULL 
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВариантыКомплектацииНоменклатурыТовары.Характеристика.ВерсияДанных
	|	КОНЕЦ КАК ВерсияДанныхХарактеристики,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	ВЫБОР
	|		КОГДА ВариантыКомплектацииНоменклатурыТовары.Характеристика ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВариантыКомплектацииНоменклатурыТовары.Характеристика.ПометкаУдаления
	|	КОНЕЦ КАК ПометкаУдаленияХарактеристики
	|ПОМЕСТИТЬ ВремНоменклатураКомплектующиеОтбор
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|ГДЕ
	|	&ВыгружатьКомплектующие
	|	И ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец В(&СписокТоваров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Комплект,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремНоменклатураОтбор.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВремНоменклатураОтбораИКомплектующих
	|ИЗ
	|	ВремНоменклатураОтбор КАК ВремНоменклатураОтбор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВремНоменклатураКомплектующие.Номенклатура
	|ИЗ
	|	ВремНоменклатураКомплектующиеОтбор КАК ВремНоменклатураКомплектующие
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремНоменклатураОтбор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремНоменклатураОтбораИКомплектующих.Номенклатура КАК Товар,
	|	УпаковкиНоменклатуры.Вес,
	|	УпаковкиНоменклатуры.Высота,
	|	УпаковкиНоменклатуры.Глубина,
	|	УпаковкиНоменклатуры.Ширина,
	|	УпаковкиНоменклатуры.Объем,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВремИнформацияОБазовойУпаковке
	|ИЗ
	|	ВремНоменклатураОтбораИКомплектующих КАК ВремНоменклатураОтбораИКомплектующих
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО ВремНоменклатураОтбораИКомплектующих.Номенклатура = УпаковкиНоменклатуры.Владелец
	|			И ВремНоменклатураОтбораИКомплектующих.Номенклатура.ЕдиницаИзмерения = УпаковкиНоменклатуры.ЕдиницаИзмерения
	|			И (ВремНоменклатураОтбораИКомплектующих.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры))
	|ГДЕ
	|	УпаковкиНоменклатуры.Числитель = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВремНоменклатураОтбораИКомплектующих.Номенклатура,
	|	УпаковкиНоменклатуры.Вес,
	|	УпаковкиНоменклатуры.Высота,
	|	УпаковкиНоменклатуры.Глубина,
	|	УпаковкиНоменклатуры.Ширина,
	|	УпаковкиНоменклатуры.Объем,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения
	|ИЗ
	|	ВремНоменклатураОтбораИКомплектующих КАК ВремНоменклатураОтбораИКомплектующих
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО ВремНоменклатураОтбораИКомплектующих.Номенклатура.ЕдиницаИзмерения = УпаковкиНоменклатуры.ЕдиницаИзмерения
	|			И ВремНоменклатураОтбораИКомплектующих.Номенклатура.НаборУпаковок = УпаковкиНоменклатуры.Владелец
	|			И (ВремНоменклатураОтбораИКомплектующих.Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры))
	|ГДЕ
	|	УпаковкиНоменклатуры.Числитель = 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Номенклатура.Б_Идентификатор = """"
	|			ТОГДА Номенклатура.Ссылка
	|		ИНАЧЕ Номенклатура.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторНоменклатуры,
	|	Номенклатура.ПометкаУдаления КАК ПометкаУдаленияНоменклатуры,
	|	Номенклатура.ВерсияДанных КАК ВерсияДанныхНоменклатуры,
	|	Номенклатура.Родитель КАК Родитель,
	|	ВЫБОР
	|		КОГДА Номенклатура.Родитель.Б_Идентификатор = """"
	|			ТОГДА Номенклатура.Родитель.Ссылка
	|		ИНАЧЕ Номенклатура.Родитель.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторРодителя,
	|	Номенклатура.ЭтоГруппа,
	|	Номенклатура.Код КАК КодНоменклатуры,
	|	Номенклатура.Наименование КАК НаименованиеНоменклатуры,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Производитель,
	|	Номенклатура.Производитель.Наименование,
	|	Номенклатура.ЦеноваяГруппа,
	|	Номенклатура.ВидНоменклатуры,
	|	Номенклатура.ВидНоменклатуры.НаборСвойств КАК НаборСвойствТоваров,
	|	Номенклатура.ВидНоменклатуры.НаборСвойствХарактеристик КАК НаборСвойствХарактеристик,
	|	ВЫБОР
	|		КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИспользоватьХарактеристики,
	|	Номенклатура.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА Номенклатура.ЕдиницаИзмерения.Б_Идентификатор = """"
	|			ТОГДА Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ Номенклатура.ЕдиницаИзмерения.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторЕдиницыИзмерения,
	|	Номенклатура.НаборУпаковок,
	|	Номенклатура.СтавкаНДС,
	|	Номенклатура.ТипНоменклатуры,
	|	Номенклатура.ФайлКартинки,
	|	ВЫБОР
	|		КОГДА Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ТОГДА ВЫБОР
	|					КОГДА Номенклатура.Ссылка В
	|							(ВЫБРАТЬ
	|								ВремНоменклатураКомплектующиеОтбор.Комплект
	|							ИЗ
	|								ВремНоменклатураКомплектующиеОтбор КАК ВремНоменклатураКомплектующиеОтбор)
	|						ТОГДА 2
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ТипТовара,
	|	Номенклатура.НаименованиеПолное КАК НаименованиеПолноеНоменклатуры,
	|	Номенклатура.ФайлОписанияДляСайта,
	|	Номенклатура.Марка.Наименование,
	|	ВЫБОР
	|		КОГДА Номенклатура.ВесЗнаменатель = 0
	|			ТОГДА Номенклатура.ВесЧислитель
	|		ИНАЧЕ Номенклатура.ВесЧислитель / Номенклатура.ВесЗнаменатель
	|	КОНЕЦ КАК ВесНетто,
	|	ВЫБОР
	|		КОГДА ВремИнформацияОБазовойУпаковке.Вес ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВремИнформацияОБазовойУпаковке.Вес
	|	КОНЕЦ КАК ВесБрутто,
	|	ВЫБОР
	|		КОГДА ВремИнформацияОБазовойУпаковке.Высота ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВремИнформацияОБазовойУпаковке.Высота
	|	КОНЕЦ КАК ВысотаБ,
	|	ВЫБОР
	|		КОГДА ВремИнформацияОБазовойУпаковке.Глубина ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВремИнформацияОБазовойУпаковке.Глубина
	|	КОНЕЦ КАК ГлубинаБ,
	|	ВЫБОР
	|		КОГДА ВремИнформацияОБазовойУпаковке.Ширина ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВремИнформацияОБазовойУпаковке.Ширина
	|	КОНЕЦ КАК ШиринаБ,
	|	ВЫБОР
	|		КОГДА Номенклатура.ПлощадьЗнаменатель = 0
	|			ТОГДА Номенклатура.ОбъемЧислитель
	|		ИНАЧЕ Номенклатура.ОбъемЧислитель / Номенклатура.ПлощадьЗнаменатель
	|	КОНЕЦ КАК ОбъемН,
	|	ВЫБОР
	|		КОГДА ВремИнформацияОБазовойУпаковке.Объем ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВремИнформацияОБазовойУпаковке.Объем
	|	КОНЕЦ КАК ОбъемБ
	|ПОМЕСТИТЬ ВремНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИнформацияОБазовойУпаковке КАК ВремИнформацияОБазовойУпаковке
	|		ПО Номенклатура.Ссылка = ВремИнформацияОБазовойУпаковке.Товар
	|			И Номенклатура.ЕдиницаИзмерения = ВремИнформацияОБазовойУпаковке.ЕдиницаИзмерения
	|ГДЕ
	|	Номенклатура.Ссылка В
	|			(ВЫБРАТЬ
	|				ВремНоменклатураОтбораИКомплектующих.Номенклатура
	|			ИЗ
	|				ВремНоменклатураОтбораИКомплектующих КАК ВремНоменклатураОтбораИКомплектующих)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремИнформацияОБазовойУпаковке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремНоменклатураОтбораИКомплектующих
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад,
	|	ВЫБОР
	|		КОГДА Склады.Б_Идентификатор = """"
	|			ТОГДА Склады.Ссылка
	|		ИНАЧЕ Склады.Б_Идентификатор
	|	КОНЕЦ КАК Идентификатор
	|ПОМЕСТИТЬ ВремСклады
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|	И Склады.Ссылка В(&СписокСкладов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоглашенияСКлиентами.Ссылка КАК Ссылка,
	|	СоглашенияСКлиентами.НалогообложениеНДС КАК НалогообложениеНДС,
	|	СоглашенияСКлиентами.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	СоглашенияСКлиентами.ВидЦен КАК ВидЦен,
	|	СоглашенияСКлиентами.Валюта КАК Валюта,
	|	СоглашенияСКлиентами.Валюта.Наименование КАК ВалютаКод,
	|	ВЫБОР
	|		КОГДА СоглашенияСКлиентами.Б_Идентификатор = """"
	|			ТОГДА СоглашенияСКлиентами.Ссылка
	|		ИНАЧЕ СоглашенияСКлиентами.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторСоглашения,
	|	ВЫБОР
	|		КОГДА СоглашенияСКлиентами.ВидЦен.Б_Идентификатор = """"
	|			ТОГДА СоглашенияСКлиентами.ВидЦен.Ссылка
	|		ИНАЧЕ СоглашенияСКлиентами.ВидЦен.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторВидаЦены
	|ПОМЕСТИТЬ ВремСоглашения
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.Ссылка В(&СписокСоглашений)
	|{ГДЕ
	|	СоглашенияСКлиентами.Ссылка.* КАК Соглашение}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ЕдиницыИзмерения.Б_Идентификатор = """"
	|			ТОГДА ЕдиницыИзмерения.Ссылка
	|		ИНАЧЕ ЕдиницыИзмерения.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторЕдиницыИзмерения
	|ПОМЕСТИТЬ ВремЕдиницыИзмерения
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Ссылка В(&СписокЕдиниц)
	|	И ЕдиницыИзмерения.Ссылка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураСХарактеристиками.Номенклатура КАК Номенклатура,
	|	НоменклатураСХарактеристиками.ИдентификаторНоменклатуры,
	|	НоменклатураСХарактеристиками.Характеристика КАК Характеристика,
	|	НоменклатураСХарактеристиками.ИдентификаторХарактеристики,
	|	НоменклатураСХарактеристиками.ВерсияДанныхНоменклатуры,
	|	НоменклатураСХарактеристиками.ВерсияДанныхХарактеристики,
	|	НоменклатураСХарактеристиками.НаименованиеНоменклатуры,
	|	НоменклатураСХарактеристиками.НаименованиеХарактеристики,
	|	НоменклатураСХарактеристиками.ПометкаУдаленияНоменклатуры,
	|	НоменклатураСХарактеристиками.ПометкаУдаленияХарактеристики,
	|	НоменклатураСХарактеристиками.Родитель,
	|	НоменклатураСХарактеристиками.ИдентификаторРодителя,
	|	НоменклатураСХарактеристиками.ЕдиницаИзмерения,
	|	НоменклатураСХарактеристиками.ИдентификаторЕдиницыИзмерения,
	|	НоменклатураСХарактеристиками.Артикул,
	|	НоменклатураСХарактеристиками.Производитель,
	|	НоменклатураСХарактеристиками.ПроизводительНаименование,
	|	НоменклатураСХарактеристиками.ЦеноваяГруппа,
	|	НоменклатураСХарактеристиками.ВидНоменклатуры,
	|	НоменклатураСХарактеристиками.НаборУпаковок,
	|	НоменклатураСХарактеристиками.СтавкаНДС,
	|	НоменклатураСХарактеристиками.ТипНоменклатуры,
	|	НоменклатураСХарактеристиками.ФайлКартинки,
	|	НоменклатураСХарактеристиками.ЭтоГруппа,
	|	НоменклатураСХарактеристиками.КодНоменклатуры,
	|	НоменклатураСХарактеристиками.ИспользоватьХарактеристики,
	|	НоменклатураСХарактеристиками.НаборСвойствТоваров,
	|	НоменклатураСХарактеристиками.НаборСвойствХарактеристик,
	|	НоменклатураСХарактеристиками.ТипТовара,
	|	НоменклатураСХарактеристиками.Комплектующая
	|ПОМЕСТИТЬ ВремНоменклатураСХарактеристикамиВся
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВремНоменклатура.Номенклатура КАК Номенклатура,
	|		ВремНоменклатура.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|		ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ХарактеристикиНоменклатуры.Б_Идентификатор = """"
	|				ТОГДА ХарактеристикиНоменклатуры.Ссылка
	|			ИНАЧЕ ХарактеристикиНоменклатуры.Б_Идентификатор
	|		КОНЕЦ КАК ИдентификаторХарактеристики,
	|		ВремНоменклатура.ВерсияДанныхНоменклатуры КАК ВерсияДанныхНоменклатуры,
	|		ХарактеристикиНоменклатуры.ВерсияДанных КАК ВерсияДанныхХарактеристики,
	|		ВремНоменклатура.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|		ХарактеристикиНоменклатуры.Наименование КАК НаименованиеХарактеристики,
	|		ВремНоменклатура.ПометкаУдаленияНоменклатуры КАК ПометкаУдаленияНоменклатуры,
	|		ХарактеристикиНоменклатуры.ПометкаУдаления КАК ПометкаУдаленияХарактеристики,
	|		ВремНоменклатура.Родитель КАК Родитель,
	|		ВремНоменклатура.ИдентификаторРодителя КАК ИдентификаторРодителя,
	|		ВремНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ВремНоменклатура.ИдентификаторЕдиницыИзмерения КАК ИдентификаторЕдиницыИзмерения,
	|		ВремНоменклатура.Артикул КАК Артикул,
	|		ВремНоменклатура.Производитель КАК Производитель,
	|		ВремНоменклатура.ПроизводительНаименование КАК ПроизводительНаименование,
	|		ВремНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|		ВремНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|		ВремНоменклатура.НаборУпаковок КАК НаборУпаковок,
	|		ВремНоменклатура.СтавкаНДС КАК СтавкаНДС,
	|		ВремНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		ВремНоменклатура.ФайлКартинки КАК ФайлКартинки,
	|		ВремНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
	|		ВремНоменклатура.КодНоменклатуры КАК КодНоменклатуры,
	|		ВремНоменклатура.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|		ВремНоменклатура.НаборСвойствТоваров КАК НаборСвойствТоваров,
	|		ВремНоменклатура.НаборСвойствХарактеристик КАК НаборСвойствХарактеристик,
	|		ВремНоменклатура.ТипТовара КАК ТипТовара,
	|		ЛОЖЬ КАК Комплектующая
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремНоменклатура КАК ВремНоменклатура
	|			ПО ХарактеристикиНоменклатуры.Владелец = ВремНоменклатура.Номенклатура
	|				И (ВремНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВремНоменклатура.Номенклатура,
	|		ВремНоменклатура.ИдентификаторНоменклатуры,
	|		ХарактеристикиНоменклатуры.Ссылка,
	|		ВЫБОР
	|			КОГДА ХарактеристикиНоменклатуры.Б_Идентификатор = """"
	|				ТОГДА ХарактеристикиНоменклатуры.Ссылка
	|			ИНАЧЕ ХарактеристикиНоменклатуры.Б_Идентификатор
	|		КОНЕЦ,
	|		ВремНоменклатура.ВерсияДанныхНоменклатуры,
	|		ХарактеристикиНоменклатуры.ВерсияДанных,
	|		ВремНоменклатура.НаименованиеНоменклатуры,
	|		ХарактеристикиНоменклатуры.Наименование,
	|		ВремНоменклатура.ПометкаУдаленияНоменклатуры,
	|		ХарактеристикиНоменклатуры.ПометкаУдаления,
	|		ВремНоменклатура.Родитель,
	|		ВремНоменклатура.ИдентификаторРодителя,
	|		ВремНоменклатура.ЕдиницаИзмерения,
	|		ВремНоменклатура.ИдентификаторЕдиницыИзмерения,
	|		ВремНоменклатура.Артикул,
	|		ВремНоменклатура.Производитель,
	|		ВремНоменклатура.ПроизводительНаименование,
	|		ВремНоменклатура.ЦеноваяГруппа,
	|		ВремНоменклатура.ВидНоменклатуры,
	|		ВремНоменклатура.НаборУпаковок,
	|		ВремНоменклатура.СтавкаНДС,
	|		ВремНоменклатура.ТипНоменклатуры,
	|		ВремНоменклатура.ФайлКартинки,
	|		ВремНоменклатура.ЭтоГруппа,
	|		ВремНоменклатура.КодНоменклатуры,
	|		ВремНоменклатура.ИспользоватьХарактеристики,
	|		ВремНоменклатура.НаборСвойствТоваров,
	|		ВремНоменклатура.НаборСвойствХарактеристик,
	|		ВремНоменклатура.ТипТовара,
	|		ЛОЖЬ
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремНоменклатура КАК ВремНоменклатура
	|			ПО (ВремНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры))
	|				И ХарактеристикиНоменклатуры.Владелец = ВремНоменклатура.ВидНоменклатуры
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВремНоменклатура.Номенклатура,
	|		ВремНоменклатура.ИдентификаторНоменклатуры,
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|		ВремНоменклатура.ВерсияДанныхНоменклатуры,
	|		"""",
	|		ВремНоменклатура.НаименованиеНоменклатуры,
	|		"""",
	|		ВремНоменклатура.ПометкаУдаленияНоменклатуры,
	|		ЛОЖЬ,
	|		ВремНоменклатура.Родитель,
	|		ВремНоменклатура.ИдентификаторРодителя,
	|		ВремНоменклатура.ЕдиницаИзмерения,
	|		ВремНоменклатура.ИдентификаторЕдиницыИзмерения,
	|		ВремНоменклатура.Артикул,
	|		ВремНоменклатура.Производитель,
	|		ВремНоменклатура.ПроизводительНаименование,
	|		ВремНоменклатура.ЦеноваяГруппа,
	|		ВремНоменклатура.ВидНоменклатуры,
	|		ВремНоменклатура.НаборУпаковок,
	|		ВремНоменклатура.СтавкаНДС,
	|		ВремНоменклатура.ТипНоменклатуры,
	|		ВремНоменклатура.ФайлКартинки,
	|		ВремНоменклатура.ЭтоГруппа,
	|		ВремНоменклатура.КодНоменклатуры,
	|		ВремНоменклатура.ИспользоватьХарактеристики,
	|		ВремНоменклатура.НаборСвойствТоваров,
	|		ВремНоменклатура.НаборСвойствХарактеристик,
	|		ВремНоменклатура.ТипТовара,
	|		ЛОЖЬ
	|	ИЗ
	|		ВремНоменклатура КАК ВремНоменклатура
	|	ГДЕ
	|		(НЕ ВремНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|					И &ВыгружатьНоменклатуруКакПредложение
	|				ИЛИ ВремНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВремНоменклатура.Номенклатура,
	|		ВремНоменклатура.ИдентификаторНоменклатуры,
	|		ВремНоменклатураКомплектующиеОтбор.Характеристика,
	|		ВЫБОР
	|			КОГДА ВремНоменклатураКомплектующиеОтбор.Характеристика ЕСТЬ NULL 
	|					ИЛИ ВремНоменклатураКомплектующиеОтбор.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ИНАЧЕ ВремНоменклатураКомплектующиеОтбор.ИдентификаторХарактеристики
	|		КОНЕЦ,
	|		ВремНоменклатура.ВерсияДанныхНоменклатуры,
	|		ВЫБОР
	|			КОГДА ВремНоменклатураКомплектующиеОтбор.Характеристика ЕСТЬ NULL 
	|					ИЛИ ВремНоменклатураКомплектующиеОтбор.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ТОГДА """"
	|			ИНАЧЕ ВремНоменклатураКомплектующиеОтбор.ВерсияДанныхХарактеристики
	|		КОНЕЦ,
	|		ВремНоменклатура.НаименованиеНоменклатуры,
	|		ВЫБОР
	|			КОГДА ВремНоменклатураКомплектующиеОтбор.Характеристика ЕСТЬ NULL 
	|					ИЛИ ВремНоменклатураКомплектующиеОтбор.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ТОГДА """"
	|			ИНАЧЕ ВремНоменклатураКомплектующиеОтбор.НаименованиеХарактеристики
	|		КОНЕЦ,
	|		ВремНоменклатура.ПометкаУдаленияНоменклатуры,
	|		ВЫБОР
	|			КОГДА ВремНоменклатураКомплектующиеОтбор.Характеристика ЕСТЬ NULL 
	|					ИЛИ ВремНоменклатураКомплектующиеОтбор.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ВремНоменклатураКомплектующиеОтбор.ПометкаУдаленияХарактеристики
	|		КОНЕЦ,
	|		ВремНоменклатура.Родитель,
	|		ВремНоменклатура.ИдентификаторРодителя,
	|		ВремНоменклатура.ЕдиницаИзмерения,
	|		ВремНоменклатура.ИдентификаторЕдиницыИзмерения,
	|		ВремНоменклатура.Артикул,
	|		ВремНоменклатура.Производитель,
	|		ВремНоменклатура.ПроизводительНаименование,
	|		ВремНоменклатура.ЦеноваяГруппа,
	|		ВремНоменклатура.ВидНоменклатуры,
	|		ВремНоменклатура.НаборУпаковок,
	|		ВремНоменклатура.СтавкаНДС,
	|		ВремНоменклатура.ТипНоменклатуры,
	|		ВремНоменклатура.ФайлКартинки,
	|		ВремНоменклатура.ЭтоГруппа,
	|		ВремНоменклатура.КодНоменклатуры,
	|		ВремНоменклатура.ИспользоватьХарактеристики,
	|		ВремНоменклатура.НаборСвойствТоваров,
	|		ВремНоменклатура.НаборСвойствХарактеристик,
	|		ВремНоменклатура.ТипТовара,
	|		ИСТИНА
	|	ИЗ
	|		ВремНоменклатураКомплектующиеОтбор КАК ВремНоменклатураКомплектующиеОтбор
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВремНоменклатура КАК ВремНоменклатура
	|			ПО ВремНоменклатураКомплектующиеОтбор.Номенклатура = ВремНоменклатура.Номенклатура) КАК НоменклатураСХарактеристиками
	|{ГДЕ
	|	НоменклатураСХарактеристиками.Номенклатура.* КАК Номенклатура}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоглашениеШапка.Ссылка КАК Соглашение,
	|	СоглашениеТовары.Упаковка КАК Упаковка,
	|	СоглашениеТовары.Упаковка.Числитель КАК КоэффициентУпаковкиСоглашения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|			ТОГДА СоглашениеТовары.ВидЦены
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|					ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеШапка.ВидЦен
	|	КОНЕЦ КАК ВидЦены,
	|	ЕСТЬNULL(СоглашениеТовары.Цена, 0) КАК Цена,
	|	ВремНоменклатураСХарактеристикамиВся.Номенклатура,
	|	ВремНоменклатураСХарактеристикамиВся.Характеристика
	|ПОМЕСТИТЬ ВремЦеныПоСоглашениям
	|ИЗ
	|	ВремНоменклатураСХарактеристикамиВся КАК ВремНоменклатураСХарактеристикамиВся
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремСоглашения КАК СоглашениеШапка
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
	|		ПО (СоглашениеШапка.Ссылка = СоглашениеТовары.Ссылка)
	|			И ВремНоменклатураСХарактеристикамиВся.Номенклатура = СоглашениеТовары.Номенклатура
	|			И ВремНоменклатураСХарактеристикамиВся.Характеристика = СоглашениеТовары.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
	|		ПО ВремНоменклатураСХарактеристикамиВся.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
	|			И (СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныСрезПоследних.Номенклатура,
	|	ЦеныСрезПоследних.ВидЦены,
	|	ЦеныСрезПоследних.Характеристика,
	|	ЦеныСрезПоследних.Цена,
	|	ЦеныСрезПоследних.Упаковка,
	|	ЦеныСрезПоследних.Валюта
	|ПОМЕСТИТЬ ВремЦеныСрезПоследних
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			ВидЦены В
	|					(ВЫБРАТЬ
	|						ВремСоглашения.ВидЦен
	|					ИЗ
	|						ВремСоглашения КАК ВремСоглашения)
	|				И (Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ВремНоменклатураСХарактеристикамиВся.Номенклатура,
	|						ВремНоменклатураСХарактеристикамиВся.Характеристика
	|					ИЗ
	|						ВремНоменклатураСХарактеристикамиВся КАК ВремНоменклатураСХарактеристикамиВся)) КАК ЦеныСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЦеныСрезПоследних.Номенклатура,
	|	ЦеныСрезПоследних.Характеристика,
	|	ЦеныСрезПоследних.ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВремЦеныПоСоглашениям.Соглашение КАК Соглашение,
	|	ВремЦеныПоСоглашениям.ВидЦены КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА ВремЦеныПоСоглашениям.Цена > 0
	|			ТОГДА ВремЦеныПоСоглашениям.Упаковка
	|		КОГДА ВремЦеныПоСоглашениям.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ВремЦеныПоСоглашениям.Цена > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		КОГДА ВремЦеныПоСоглашениям.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Валюта
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	КОНЕЦ КАК ВалютаЦены,
	|	ВЫБОР
	|		КОГДА ВремЦеныПоСоглашениям.Цена > 0
	|			ТОГДА ВремЦеныПоСоглашениям.Цена
	|		КОГДА ВремЦеныПоСоглашениям.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	ВремЦеныПоСоглашениям.Номенклатура КАК Номенклатура,
	|	ВремЦеныПоСоглашениям.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ВремЦеныПоСоглашениям.Цена > 0
	|			ТОГДА ВремЦеныПоСоглашениям.Упаковка.Числитель
	|		КОГДА ВремЦеныПоСоглашениям.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК УпаковкаКоэффициент
	|ПОМЕСТИТЬ ВремЦены
	|ИЗ
	|	ВремЦеныПоСоглашениям КАК ВремЦеныПоСоглашениям
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремЦеныСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВремЦеныПоСоглашениям.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
	|			И ВремЦеныПоСоглашениям.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ВремЦеныПоСоглашениям.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВремЦеныПоСоглашениям.Цена > 0
	|				ТОГДА ВремЦеныПоСоглашениям.Цена
	|			КОГДА ВремЦеныПоСоглашениям.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
	|				ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	|			ИНАЧЕ 0
	|		КОНЕЦ > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремЦеныПоСоглашениям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремЦеныСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВремНоменклатураСХарактеристикамиВся.Номенклатура КАК Номенклатура,
	|	ВремНоменклатураСХарактеристикамиВся.ИдентификаторНоменклатуры,
	|	ВремНоменклатураСХарактеристикамиВся.Характеристика КАК Характеристика,
	|	ВремНоменклатураСХарактеристикамиВся.ИдентификаторХарактеристики,
	|	ВремНоменклатураСХарактеристикамиВся.ВерсияДанныхНоменклатуры,
	|	ВремНоменклатураСХарактеристикамиВся.ВерсияДанныхХарактеристики,
	|	ВремНоменклатураСХарактеристикамиВся.НаименованиеНоменклатуры,
	|	ВремНоменклатураСХарактеристикамиВся.НаименованиеХарактеристики,
	|	ВремНоменклатураСХарактеристикамиВся.ПометкаУдаленияНоменклатуры,
	|	ВремНоменклатураСХарактеристикамиВся.ПометкаУдаленияХарактеристики,
	|	ВремНоменклатураСХарактеристикамиВся.Родитель,
	|	ВремНоменклатураСХарактеристикамиВся.ИдентификаторРодителя,
	|	ВремНоменклатураСХарактеристикамиВся.ЕдиницаИзмерения,
	|	ВремНоменклатураСХарактеристикамиВся.ИдентификаторЕдиницыИзмерения,
	|	ВремНоменклатураСХарактеристикамиВся.Артикул,
	|	ВремНоменклатураСХарактеристикамиВся.Производитель,
	|	ВремНоменклатураСХарактеристикамиВся.ПроизводительНаименование,
	|	ВремНоменклатураСХарактеристикамиВся.ЦеноваяГруппа,
	|	ВремНоменклатураСХарактеристикамиВся.ВидНоменклатуры,
	|	ВремНоменклатураСХарактеристикамиВся.НаборУпаковок,
	|	ВремНоменклатураСХарактеристикамиВся.СтавкаНДС,
	|	ВремНоменклатураСХарактеристикамиВся.ТипНоменклатуры,
	|	ВремНоменклатураСХарактеристикамиВся.ФайлКартинки,
	|	ВремНоменклатураСХарактеристикамиВся.ЭтоГруппа,
	|	ВремНоменклатураСХарактеристикамиВся.КодНоменклатуры,
	|	ВремНоменклатураСХарактеристикамиВся.ИспользоватьХарактеристики,
	|	ВремНоменклатураСХарактеристикамиВся.НаборСвойствТоваров,
	|	ВремНоменклатураСХарактеристикамиВся.НаборСвойствХарактеристик,
	|	ВремНоменклатураСХарактеристикамиВся.ТипТовара
	|ПОМЕСТИТЬ ВремНоменклатураСХарактеристиками
	|ИЗ
	|	ВремНоменклатураСХарактеристикамиВся КАК ВремНоменклатураСХарактеристикамиВся
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
	|				,
	|				(Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ВремНоменклатураСХарактеристикамиВся.Номенклатура,
	|							ВремНоменклатураСХарактеристикамиВся.Характеристика
	|						ИЗ
	|							ВремНоменклатураСХарактеристикамиВся КАК ВремНоменклатураСХарактеристикамиВся)
	|					И Склад В
	|						(ВЫБРАТЬ
	|							ВремСклады.Склад
	|						ИЗ
	|							ВремСклады КАК ВремСклады)) КАК Остатки
	|		ПО ВремНоменклатураСХарактеристикамиВся.Номенклатура = Остатки.Номенклатура
	|			И ВремНоменклатураСХарактеристикамиВся.Характеристика = Остатки.Характеристика
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВыгружатьВсеХарактеристики
	|					ИЛИ ВремНоменклатураСХарактеристикамиВся.Комплектующая = ИСТИНА
	|					ИЛИ ВремНоменклатураСХарактеристикамиВся.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВЫБОР
	|							КОГДА &ВыгружатьОстаткиСУчетомРезерва
	|								ТОГДА Остатки.ВНаличииОстаток - Остатки.ВРезервеСоСкладаОстаток - Остатки.ВРезервеПодЗаказОстаток
	|							ИНАЧЕ Остатки.ВНаличииОстаток
	|						КОНЕЦ > 0
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ВыгружатьТолькоСЦеной
	|				ТОГДА (ВремНоменклатураСХарактеристикамиВся.Номенклатура, ВремНоменклатураСХарактеристикамиВся.Характеристика) В
	|						(ВЫБРАТЬ
	|							ВремЦены.Номенклатура,
	|							ВремЦены.Характеристика
	|						ИЗ
	|							ВремЦены КАК ВремЦены)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремНоменклатураСХарактеристикамиВся
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремЦены";
	
	
	Если ПараметрыОбмена.ВыгружатьКомплектующие Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|; 
		|       
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремНоменклатура.Номенклатура КАК Номенклатура,
		|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура КАК Комплектующее,
		|	ВЫБОР
		|		КОГДА ВариантыКомплектацииНоменклатурыТовары.Номенклатура.Б_Идентификатор = """"
		|			ТОГДА ВариантыКомплектацииНоменклатурыТовары.Номенклатура.Ссылка
		|		ИНАЧЕ ВариантыКомплектацииНоменклатурыТовары.Номенклатура.Б_Идентификатор
		|	КОНЕЦ КАК ИдентификаторКомплектующего,
		|	ВариантыКомплектацииНоменклатурыТовары.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ВариантыКомплектацииНоменклатурыТовары.Характеристика.Б_Идентификатор = """"
		|			ТОГДА ВариантыКомплектацииНоменклатурыТовары.Характеристика.Ссылка
		|		ИНАЧЕ ВариантыКомплектацииНоменклатурыТовары.Характеристика.Б_Идентификатор
		|	КОНЕЦ КАК ИдентификаторХарактеристики,
		|	ВариантыКомплектацииНоменклатурыТовары.Упаковка,
		|	ВЫБОР
		|		КОГДА ВариантыКомплектацииНоменклатурыТовары.Упаковка.Б_Идентификатор = """"
		|			ТОГДА ВариантыКомплектацииНоменклатурыТовары.Упаковка.Ссылка
		|		ИНАЧЕ ВариантыКомплектацииНоменклатурыТовары.Упаковка.Б_Идентификатор
		|	КОНЕЦ КАК ИдентификаторУпаковки,
		|	ВариантыКомплектацииНоменклатурыТовары.КоличествоУпаковок,
		|	ВариантыКомплектацииНоменклатурыТовары.Количество КАК Количество,
		|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура.Наименование КАК КомплектующаяНаименование,
		|	ВариантыКомплектацииНоменклатурыТовары.Характеристика.Наименование КАК ХарактеристикаКомплектующейНаименование
		|ПОМЕСТИТЬ ВремКомплектующиеНоменклатуры
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВремНоменклатура КАК ВремНоменклатура
		|		ПО (ВремНоменклатура.Номенклатура = ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура";       
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|; 
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремНоменклатураКомплектующиеОтбор";
	
	
	ЗапросПоСвойствам = "ВЫБРАТЬ
	|	НастройкиСвойств.Свойство,
	|	НастройкиСвойств.НеВыгружатьВСвойстваПредложений,
	|	НастройкиСвойств.НеВыгружатьВСвойстваТоваров,
	|	НастройкиСвойств.ВлияетНаЦену,
	|	НастройкиСвойств.ВыгружатьВХИ
	|ПОМЕСТИТЬ НастройкиСвойств
	|ИЗ
	|	&НастройкиСвойств КАК НастройкиСвойств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК СвойствоНоменклатуры,
	|	ВЫБОР
	|		КОГДА ДополнительныеРеквизитыИСведения.Б_Идентификатор = """"
	|			ТОГДА ДополнительныеРеквизитыИСведения.Ссылка
	|		ИНАЧЕ ДополнительныеРеквизитыИСведения.Б_Идентификатор
	|	КОНЕЦ КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА ДополнительныеРеквизитыИСведения.Заголовок = """"
	|			ТОГДА ДополнительныеРеквизитыИСведения.Наименование
	|		ИНАЧЕ ДополнительныеРеквизитыИСведения.Заголовок
	|	КОНЕЦ КАК Наименование
	|ПОМЕСТИТЬ ВремСвойства
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Ссылка В(&СписокСвойств)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СвойствоНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДопРеквизиты.Номенклатура КАК Номенклатура,
	|	ДопРеквизиты.Свойство КАК Свойство,
	|	ЗначенияДопРеквизитов.Значение КАК Значение,
	|	ВЫБОР
	|		КОГДА ДопРеквизиты.Свойство.Б_Идентификатор = """"
	|			ТОГДА ДопРеквизиты.Свойство.Ссылка
	|		ИНАЧЕ ДопРеквизиты.Свойство.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторСвойства,
	|	ВЫБОР
	|		КОГДА ЗначенияДопРеквизитов.Значение.Б_Идентификатор = """"
	|				ИЛИ ЗначенияДопРеквизитов.Значение.Б_Идентификатор ЕСТЬ NULL 
	|			ТОГДА ЗначенияДопРеквизитов.Значение
	|		ИНАЧЕ ЗначенияДопРеквизитов.Значение.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторЗначения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗначенияДопРеквизитов.Значение) = ТИП(БУЛЕВО)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК БулевоЗначение,
	|	НастройкиСвойств.НеВыгружатьВСвойстваТоваров
	|ПОМЕСТИТЬ ВремЗначенияСвойствТовара
	|ИЗ
	|	НастройкиСвойств КАК НастройкиСвойств
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВремНоменклатура.Номенклатура КАК Номенклатура,
	|			НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Свойство
	|		ИЗ
	|			Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремНоменклатура КАК ВремНоменклатура
	|				ПО НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ВремНоменклатура.НаборСвойствТоваров
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВремНоменклатура.Номенклатура,
	|			НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство
	|		ИЗ
	|			Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремНоменклатура КАК ВремНоменклатура
	|				ПО (НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие))) КАК ДопРеквизиты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ЗначенияДопРеквизитов
	|			ПО ДопРеквизиты.Свойство = ЗначенияДопРеквизитов.Свойство
	|				И ДопРеквизиты.Номенклатура = ЗначенияДопРеквизитов.Ссылка
	|		ПО (ДопРеквизиты.Свойство = НастройкиСвойств.Свойство)
	|ГДЕ
	|	ДопРеквизиты.Свойство В
	|			(ВЫБРАТЬ
	|				ВремСвойства.СвойствоНоменклатуры
	|			ИЗ
	|				ВремСвойства)
	|	И НЕ ДопРеквизиты.Свойство ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДопСведения.Номенклатура,
	|	ДопСведения.Свойство,
	|	ЗначенияДопСведений.Значение,
	|	ВЫБОР
	|		КОГДА ДопСведения.Свойство.Б_Идентификатор = """"
	|			ТОГДА ДопСведения.Свойство.Ссылка
	|		ИНАЧЕ ДопСведения.Свойство.Б_Идентификатор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗначенияДопСведений.Значение.Б_Идентификатор = """"
	|				ИЛИ ЗначенияДопСведений.Значение.Б_Идентификатор ЕСТЬ NULL 
	|			ТОГДА ЗначенияДопСведений.Значение
	|		ИНАЧЕ ЗначенияДопСведений.Значение.Б_Идентификатор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗначенияДопСведений.Значение) = ТИП(БУЛЕВО)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	НастройкиСвойств.НеВыгружатьВСвойстваТоваров
	|ИЗ
	|	НастройкиСвойств КАК НастройкиСвойств
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВремНоменклатура.Номенклатура КАК Номенклатура,
	|			НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство КАК Свойство
	|		ИЗ
	|			Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремНоменклатура КАК ВремНоменклатура
	|				ПО НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = ВремНоменклатура.НаборСвойствТоваров
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВремНоменклатура.Номенклатура,
	|			НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство
	|		ИЗ
	|			Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремНоменклатура КАК ВремНоменклатура
	|				ПО (НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие))) КАК ДопСведения
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияДопСведений
	|			ПО ДопСведения.Свойство = ЗначенияДопСведений.Свойство
	|				И ДопСведения.Номенклатура = ЗначенияДопСведений.Объект
	|		ПО (ДопСведения.Свойство = НастройкиСвойств.Свойство)
	|ГДЕ
	|	ДопСведения.Свойство В
	|			(ВЫБРАТЬ
	|				ВремСвойства.СвойствоНоменклатуры
	|			ИЗ
	|				ВремСвойства)
	|	И НЕ ДопСведения.Свойство ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДопРеквизиты.Номенклатура КАК Номенклатура,
	|	ДопРеквизиты.Свойство КАК Свойство,
	|	ЗначенияДопРеквизитов.Значение КАК Значение,
	|	ВЫБОР
	|		КОГДА ДопРеквизиты.Свойство.Б_Идентификатор = """"
	|			ТОГДА ДопРеквизиты.Свойство.Ссылка
	|		ИНАЧЕ ДопРеквизиты.Свойство.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторСвойства,
	|	ВЫБОР
	|		КОГДА ЗначенияДопРеквизитов.Значение.Б_Идентификатор = """"
	|				ИЛИ ЗначенияДопРеквизитов.Значение.Б_Идентификатор ЕСТЬ NULL 
	|			ТОГДА ЗначенияДопРеквизитов.Значение
	|		ИНАЧЕ ЗначенияДопРеквизитов.Значение.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторЗначения,
	|	ДопРеквизиты.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗначенияДопРеквизитов.Значение) = ТИП(БУЛЕВО)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК БулевоЗначение,
	|	ДопРеквизиты.Свойство.Заголовок КАК СвойствоНаименование,
	|	НастройкиСвойств.НеВыгружатьВСвойстваПредложений,
	|	ВЫБОР
	|		КОГДА ЗначенияДопРеквизитов.Значение ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ЗначенияДопРеквизитов.Значение)
	|	КОНЕЦ КАК ПредставлениеЗначения
	|ПОМЕСТИТЬ ВремЗначенияСвойствХарактеристик
	|ИЗ
	|	НастройкиСвойств КАК НастройкиСвойств
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Свойство,
	|			ВремНоменклатураСХарактеристиками.Номенклатура КАК Номенклатура,
	|			ВремНоменклатураСХарактеристиками.Характеристика КАК Характеристика
	|		ИЗ
	|			Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
	|				ПО НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ВремНоменклатураСХарактеристиками.НаборСвойствХарактеристик
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство,
	|			ВремНоменклатураСХарактеристиками.Номенклатура,
	|			ВремНоменклатураСХарактеристиками.Характеристика
	|		ИЗ
	|			Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
	|				ПО (НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие))) КАК ДопРеквизиты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЗначенияДопРеквизитов
	|			ПО ДопРеквизиты.Свойство = ЗначенияДопРеквизитов.Свойство
	|				И ДопРеквизиты.Характеристика = ЗначенияДопРеквизитов.Ссылка
	|		ПО (ДопРеквизиты.Свойство = НастройкиСвойств.Свойство)
	|ГДЕ
	|	ДопРеквизиты.Свойство В
	|			(ВЫБРАТЬ
	|				ВремСвойства.СвойствоНоменклатуры
	|			ИЗ
	|				ВремСвойства)
	|	И НЕ ДопРеквизиты.Свойство ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДопСведения.Номенклатура,
	|	ДопСведения.Свойство,
	|	ЗначенияДопСведений.Значение,
	|	ВЫБОР
	|		КОГДА ДопСведения.Свойство.Б_Идентификатор = """"
	|			ТОГДА ДопСведения.Свойство.Ссылка
	|		ИНАЧЕ ДопСведения.Свойство.Б_Идентификатор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗначенияДопСведений.Значение.Б_Идентификатор = """"
	|				ИЛИ ЗначенияДопСведений.Значение.Б_Идентификатор ЕСТЬ NULL 
	|			ТОГДА ЗначенияДопСведений.Значение
	|		ИНАЧЕ ЗначенияДопСведений.Значение.Б_Идентификатор
	|	КОНЕЦ,
	|	ДопСведения.Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗначенияДопСведений.Значение) = ТИП(БУЛЕВО)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДопСведения.Свойство.Заголовок,
	|	НастройкиСвойств.НеВыгружатьВСвойстваПредложений,
	|	ВЫБОР
	|		КОГДА ЗначенияДопСведений.Значение ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ЗначенияДопСведений.Значение)
	|	КОНЕЦ
	|ИЗ
	|	НастройкиСвойств КАК НастройкиСвойств
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство КАК Свойство,
	|			ВремНоменклатураСХарактеристиками.Номенклатура КАК Номенклатура,
	|			ВремНоменклатураСХарактеристиками.Характеристика КАК Характеристика
	|		ИЗ
	|			Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
	|				ПО НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = ВремНоменклатураСХарактеристиками.НаборСвойствХарактеристик
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство,
	|			ВремНоменклатураСХарактеристиками.Номенклатура,
	|			ВремНоменклатураСХарактеристиками.Характеристика
	|		ИЗ
	|			Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
	|				ПО (НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие))) КАК ДопСведения
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияДопСведений
	|			ПО ДопСведения.Свойство = ЗначенияДопСведений.Свойство
	|				И ДопСведения.Характеристика = ЗначенияДопСведений.Объект
	|		ПО (ДопСведения.Свойство = НастройкиСвойств.Свойство)
	|ГДЕ
	|	ДопСведения.Свойство В
	|			(ВЫБРАТЬ
	|				ВремСвойства.СвойствоНоменклатуры
	|			ИЗ
	|				ВремСвойства)
	|	И НЕ ДопСведения.Свойство ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Характеристика,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НастройкиСвойств";
	
	
	ЗапросОстатков = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Номенклатура,
	|	ВЫБОР
	|		КОГДА Остатки.Номенклатура.Б_Идентификатор = """"
	|			ТОГДА Остатки.Номенклатура.Ссылка
	|		ИНАЧЕ Остатки.Номенклатура.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторНоменклатуры,
	|	Остатки.Характеристика,
	|	ВЫБОР
	|		КОГДА Остатки.Характеристика.Б_Идентификатор = """"
	|			ТОГДА Остатки.Характеристика.Ссылка
	|		ИНАЧЕ Остатки.Характеристика.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторХарактеристики,
	|	Остатки.Склад,
	|	ВЫБОР
	|		КОГДА Остатки.Склад.Б_Идентификатор = """"
	|			ТОГДА Остатки.Склад.Ссылка
	|		ИНАЧЕ Остатки.Склад.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторСклада,
	|	ВЫБОР
	|		КОГДА &ВыгружатьОстаткиСУчетомРезерва
	|			ТОГДА Остатки.ВНаличииОстаток - Остатки.ВРезервеСоСкладаОстаток - Остатки.ВРезервеПодЗаказОстаток 
	|		ИНАЧЕ Остатки.ВНаличииОстаток
	|	КОНЕЦ КАК Остаток
	|ПОМЕСТИТЬ ВремОстаткиПоСкладам
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(
	|			,
	|			(Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ВремНоменклатураСХарактеристиками.Номенклатура,
	|						ВремНоменклатураСХарактеристиками.Характеристика
	|					ИЗ
	|						ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками)
	|				И Склад В
	|					(ВЫБРАТЬ
	|						ВремСклады.Склад
	|					ИЗ
	|						ВремСклады КАК ВремСклады)) КАК Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.Характеристика";    
	
	ЗапросПоШтрихКодам = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВремНоменклатураСХарактеристиками.Номенклатура КАК Номенклатура,
	|	ВремНоменклатураСХарактеристиками.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Штрихкод
	|ПОМЕСТИТЬ ВремШтрихКоды
	|ИЗ
	|	ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ВремНоменклатураСХарактеристиками.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И ВремНоменклатураСХарактеристиками.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И (НЕ &ИспользоватьУпаковкиНоменклатуры
	|ИЛИ НЕ ВремНоменклатураСХарактеристиками.Номенклатура.ИспользоватьУпаковки 
	|				ИЛИ ВремНоменклатураСХарактеристиками.ЕдиницаИзмерения = ШтрихкодыНоменклатуры.Упаковка.ЕдиницаИзмерения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	
	ЗапросПоПланируемойДатеПоступления = "ВЫБРАТЬ
	|	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикамОстатки.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщикуТовары.Ссылка.ПоступлениеОднойДатой
	|			ТОГДА ЗаказПоставщикуТовары.Ссылка.ДатаПоступления
	|		ИНАЧЕ ЗаказПоставщикуТовары.ДатаПоступления
	|	КОНЕЦ КАК ДатаПоступления,
	|	ЗаказыПоставщикамОстатки.ЗаказаноОстаток КАК Количество
	|ПОМЕСТИТЬ ВремПланируемыеДатыПоступления
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = ЗаказПоставщикуТовары.Ссылка
	|			И ЗаказыПоставщикамОстатки.Номенклатура = ЗаказПоставщикуТовары.Номенклатура
	|			И ЗаказыПоставщикамОстатки.Характеристика = ЗаказПоставщикуТовары.Характеристика
	|ГДЕ
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления >= &ТекДата
	|	И ЗаказПоставщикуТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	ЗапросПоЦенам = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоглашениеШапка.Ссылка КАК Соглашение,
	|	СоглашениеШапка.ИдентификаторСоглашения,
	|	СоглашениеТовары.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА СоглашениеТовары.Упаковка.Б_Идентификатор = """"
	|			ТОГДА СоглашениеТовары.Упаковка.Ссылка
	|		ИНАЧЕ СоглашениеТовары.Упаковка.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторУпаковки,
	|	СоглашениеТовары.Упаковка.Числитель КАК КоэффициентУпаковкиСоглашения,
	|	СоглашениеШапка.НалогообложениеНДС КАК НалогообложениеНДС,
	|	СоглашениеШапка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	СоглашениеШапка.Валюта КАК ВалютаСоглашения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|			ТОГДА СоглашениеТовары.ВидЦены
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|					ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеШапка.ВидЦен
	|	КОНЕЦ КАК ВидЦены,
	|	СоглашениеШапка.ИдентификаторВидаЦены,
	|	ЕСТЬNULL(СоглашениеТовары.Цена, 0) КАК Цена,
	|	ВремНоменклатураСХарактеристиками.Номенклатура,
	|	ВремНоменклатураСХарактеристиками.ИдентификаторНоменклатуры,
	|	ВремНоменклатураСХарактеристиками.Характеристика,
	|	ВремНоменклатураСХарактеристиками.ИдентификаторХарактеристики,
	|	ВремНоменклатураСХарактеристиками.ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВремЦеныПоСоглашениям
	|ИЗ
	|	ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремСоглашения КАК СоглашениеШапка
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
	|		ПО (СоглашениеШапка.Ссылка = СоглашениеТовары.Ссылка)
	|			И ВремНоменклатураСХарактеристиками.Номенклатура = СоглашениеТовары.Номенклатура
	|			И ВремНоменклатураСХарактеристиками.Характеристика = СоглашениеТовары.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
	|		ПО ВремНоменклатураСХарактеристиками.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
	|			И (СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныСрезПоследних.Номенклатура,
	|	ЦеныСрезПоследних.ВидЦены,
	|	ЦеныСрезПоследних.Характеристика,
	|	ЦеныСрезПоследних.Цена,
	|	ЦеныСрезПоследних.Упаковка,
	|	ЦеныСрезПоследних.Валюта
	|ПОМЕСТИТЬ ВремЦеныСрезПоследних
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			(Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					ВремНоменклатураСХарактеристиками.Номенклатура,
	|					ВремНоменклатураСХарактеристиками.Характеристика
	|				ИЗ
	|					ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками)) КАК ЦеныСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЦеныСрезПоследних.Номенклатура,
	|	ЦеныСрезПоследних.Характеристика,
	|	ЦеныСрезПоследних.ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВремЦеныПоСоглашениям.Соглашение КАК Соглашение,
	|	ВремЦеныПоСоглашениям.ИдентификаторСоглашения,
	|	ВремЦеныПоСоглашениям.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВремЦеныПоСоглашениям.ВидЦены КАК ВидЦены,
	|	ВремЦеныПоСоглашениям.ИдентификаторВидаЦены,
	|	ВремЦеныПоСоглашениям.ВалютаСоглашения КАК ВалютаСоглашения,
	|	ВЫБОР
	|		КОГДА ВремЦеныПоСоглашениям.Цена > 0
	|			ТОГДА ВремЦеныПоСоглашениям.Упаковка
	|		КОГДА ВремЦеныПоСоглашениям.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ВремЦеныПоСоглашениям.Цена > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		КОГДА ВремЦеныПоСоглашениям.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Валюта
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	КОНЕЦ КАК ВалютаЦены,
	|	ВЫБОР
	|		КОГДА ВремЦеныПоСоглашениям.Цена > 0
	|			ТОГДА ВремЦеныПоСоглашениям.Цена
	|		КОГДА ВремЦеныПоСоглашениям.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	ВремЦеныПоСоглашениям.Номенклатура,
	|	ВремЦеныПоСоглашениям.ИдентификаторНоменклатуры,
	|	ВремЦеныПоСоглашениям.Характеристика,
	|	ВремЦеныПоСоглашениям.ИдентификаторХарактеристики,
	|	ВЫБОР
	|		КОГДА ВремЦеныПоСоглашениям.Цена > 0
	|			ТОГДА ВремЦеныПоСоглашениям.Упаковка.Числитель
	|		КОГДА ВремЦеныПоСоглашениям.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК УпаковкаКоэффициент,
	|	ВремЦеныПоСоглашениям.ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВремЦены
	|ИЗ
	|	ВремЦеныПоСоглашениям КАК ВремЦеныПоСоглашениям
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремЦеныСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВремЦеныПоСоглашениям.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
	|			И ВремЦеныПоСоглашениям.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ВремЦеныПоСоглашениям.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВремЦеныПоСоглашениям.Цена > 0
	|				ТОГДА ВремЦеныПоСоглашениям.Цена
	|			КОГДА ВремЦеныПоСоглашениям.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
	|				ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	|			ИНАЧЕ 0
	|		КОНЕЦ > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремЦеныПоСоглашениям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремЦеныСрезПоследних";
	
	
	ЗапросПоКартинкамИФайлам = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВремНоменклатура.Номенклатура КАК Номенклатура,
	|	НоменклатураПрисоединенныеФайлы.Ссылка КАК Файл,
	|	НоменклатураПрисоединенныеФайлы.Наименование КАК Наименование,
	|	НоменклатураПрисоединенныеФайлы.Описание КАК Описание,
	|	НоменклатураПрисоединенныеФайлы.ТипХраненияФайла КАК ТипХраненияФайла,
	|	НоменклатураПрисоединенныеФайлы.Расширение КАК Расширение,
	|	ВЫБОР
	|		КОГДА ВремНоменклатура.ФайлКартинки = НоменклатураПрисоединенныеФайлы.Ссылка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Основная,
	|	НоменклатураПрисоединенныеФайлы.ДатаСоздания,
	|	НоменклатураПрисоединенныеФайлы.Том.ПолныйПутьWindows,
	|	НоменклатураПрисоединенныеФайлы.Том.ПолныйПутьLinux,
	|	НоменклатураПрисоединенныеФайлы.ПутьКФайлу
	|ПОМЕСТИТЬ ВремНоменклатураСВсемиПрисоединеннымиФайлами
	|ИЗ
	|	ВремНоменклатура КАК ВремНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|		ПО (НоменклатураПрисоединенныеФайлы.ВладелецФайла = ВремНоменклатура.Номенклатура)
	|			И (НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремНоменклатураСВсемиПрисоединеннымиФайлами.Файл
	|ПОМЕСТИТЬ ВремНоменклатураСНужнымиПрисоединеннымиФайлами
	|ИЗ
	|	ВремНоменклатураСВсемиПрисоединеннымиФайлами КАК ВремНоменклатураСВсемиПрисоединеннымиФайлами
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВыгружатьВсеКартинки
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВремНоменклатураСВсемиПрисоединеннымиФайлами.Файл В
	|					(ВЫБРАТЬ
	|						НоменклатураПрисоединенныеФайлыИзменения.Ссылка
	|					ИЗ
	|						Справочник.НоменклатураПрисоединенныеФайлы.Изменения КАК НоменклатураПрисоединенныеФайлыИзменения
	|					ГДЕ
	|						НоменклатураПрисоединенныеФайлыИзменения.Узел = &Узел)
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВремНоменклатураСВсемиПрисоединеннымиФайлами.Файл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВремНоменклатураСНужнымиПрисоединеннымиФайлами.Файл КАК Файл,
	|	ПрисоединенныеФайлы.ХранимыйФайл КАК ХранимыйФайл
	|ПОМЕСТИТЬ ВремНужныеФайлыНоменклатуры
	|ИЗ
	|	ВремНоменклатураСНужнымиПрисоединеннымиФайлами КАК ВремНоменклатураСНужнымиПрисоединеннымиФайлами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ПО ВремНоменклатураСНужнымиПрисоединеннымиФайлами.Файл = ПрисоединенныеФайлы.ПрисоединенныйФайл
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Файл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремНоменклатураСНужнымиПрисоединеннымиФайлами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремНоменклатураСВсемиПрисоединеннымиФайлами.Номенклатура КАК Номенклатура,
	|	ВремНоменклатураСВсемиПрисоединеннымиФайлами.Файл,
	|	ВремНоменклатураСВсемиПрисоединеннымиФайлами.Наименование,
	|	ВремНоменклатураСВсемиПрисоединеннымиФайлами.Описание,
	|	ВремНоменклатураСВсемиПрисоединеннымиФайлами.ТипХраненияФайла,
	|	ВремНоменклатураСВсемиПрисоединеннымиФайлами.Расширение,
	|	ВремНоменклатураСВсемиПрисоединеннымиФайлами.Основная,
	|	ВремНужныеФайлыНоменклатуры.ХранимыйФайл,
	|	ВремНоменклатураСВсемиПрисоединеннымиФайлами.ДатаСоздания,
	|	ВЫБОР
	|		КОГДА ВремНужныеФайлыНоменклатуры.Файл ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НадоВыгружать,
	|	ВЫБОР
	|		КОГДА ВремНоменклатураСВсемиПрисоединеннымиФайлами.Расширение В (&СписокРасширенийКартинок)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоКартинка,
	|	ВремНоменклатураСВсемиПрисоединеннымиФайлами.ТомПолныйПутьWindows,
	|	ВремНоменклатураСВсемиПрисоединеннымиФайлами.ТомПолныйПутьLinux,
	|	ВремНоменклатураСВсемиПрисоединеннымиФайлами.ПутьКФайлу
	|ПОМЕСТИТЬ ВремФайлыНоменклатуры
	|ИЗ
	|	ВремНоменклатураСВсемиПрисоединеннымиФайлами КАК ВремНоменклатураСВсемиПрисоединеннымиФайлами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремНужныеФайлыНоменклатуры КАК ВремНужныеФайлыНоменклатуры
	|		ПО ВремНоменклатураСВсемиПрисоединеннымиФайлами.Файл = ВремНужныеФайлыНоменклатуры.Файл
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремНоменклатураСВсемиПрисоединеннымиФайлами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремНужныеФайлыНоменклатуры";
	
	
	ЗапросПоКартинкамИФайламПредложений ="ВЫБРАТЬ
	|	Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.Ссылка КАК Файл,
	|	ВремНоменклатураСХарактеристиками.Номенклатура,
	|	ВремНоменклатураСХарактеристиками.Характеристика,
	|	Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.Расширение,
	|	Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.Описание,
	|	Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.Наименование,
	|	Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.Основная КАК Основная,
	|	Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.ДатаСоздания
	|ПОМЕСТИТЬ ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами
	|ИЗ
	|	ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы КАК Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы
	|		ПО ВремНоменклатураСХарактеристиками.Номенклатура = Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.Номенклатура
	|			И ВремНоменклатураСХарактеристиками.Характеристика = Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.ХарактеристикаНоменклатуры
	|			И (НЕ Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.ПометкаУдаления)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Файл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Файл
	|ПОМЕСТИТЬ ВремХарактеристикаНоменклатурыСНужнымиПрисоединеннымиФайлами
	|ИЗ
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами КАК ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВыгружатьВсеКартинки
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Файл В
	|					(ВЫБРАТЬ
	|						Б_ХарактеристикиНоменклатурыПрисоединенныеФайлыИзменения.Ссылка
	|					ИЗ
	|						Справочник.Б_ХарактеристикиНоменклатурыПрисоединенныеФайлы.Изменения КАК Б_ХарактеристикиНоменклатурыПрисоединенныеФайлыИзменения
	|					ГДЕ
	|						Б_ХарактеристикиНоменклатурыПрисоединенныеФайлыИзменения.Узел = &Узел)
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Файл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВремХарактеристикаНоменклатурыСНужнымиПрисоединеннымиФайлами.Файл КАК Файл,
	|	Б_ПрисоединенныеФайлыХарактеристикНоменклатуры.ХранимыйФайл КАК ХранимыйФайл
	|ПОМЕСТИТЬ ВремНужныеФайлыХарактеристикНоменклатуры
	|ИЗ
	|	ВремХарактеристикаНоменклатурыСНужнымиПрисоединеннымиФайлами КАК ВремХарактеристикаНоменклатурыСНужнымиПрисоединеннымиФайлами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б_ПрисоединенныеФайлыХарактеристикНоменклатуры КАК Б_ПрисоединенныеФайлыХарактеристикНоменклатуры
	|		ПО ВремХарактеристикаНоменклатурыСНужнымиПрисоединеннымиФайлами.Файл = Б_ПрисоединенныеФайлыХарактеристикНоменклатуры.ПрисоединенныйФайл
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Файл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремХарактеристикаНоменклатурыСНужнымиПрисоединеннымиФайлами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Номенклатура КАК Номенклатура,
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Файл,
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Наименование,
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Описание,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВИнформационнойБазе) КАК ТипХраненияФайла,
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Расширение,
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Основная,
	|	ВремНужныеФайлыХарактеристикНоменклатуры.ХранимыйФайл,
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.ДатаСоздания,
	|	ВЫБОР
	|		КОГДА ВремНужныеФайлыХарактеристикНоменклатуры.ХранимыйФайл ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НадоВыгружать,
	|	ВЫБОР
	|		КОГДА ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Расширение В (&СписокРасширенийКартинок)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоКартинка,
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВремФайлыХарактеристикНоменклатуры
	|ИЗ
	|	ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами КАК ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремНужныеФайлыХарактеристикНоменклатуры КАК ВремНужныеФайлыХарактеристикНоменклатуры
	|		ПО ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами.Файл = ВремНужныеФайлыХарактеристикНоменклатуры.Файл
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремХарактеристикаНоменклатурыСВсемиПрисоединеннымиФайлами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремНужныеФайлыХарактеристикНоменклатуры";
	
	
	Если ПараметрыОбмена.КлассифицироватьПоВидамНоменклатуры Тогда
		
		ТекстЗапросаГруппы =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВремНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры
		|ИЗ
		|	ВремНоменклатура КАК ВремНоменклатура
		|ГДЕ
		|	(НЕ ВремНоменклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка))
		|ИТОГИ ПО
		|	ВидНоменклатуры ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	Иначе
		
		ТекстЗапросаГруппы =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВремНоменклатура.Номенклатура КАК Номенклатура,
		|	ВремНоменклатура.Номенклатура.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	ВремНоменклатура КАК ВремНоменклатура
		|ИТОГИ ПО
		|	Номенклатура ТОЛЬКО ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	КонецЕсли;
	
	Если ПараметрыОбмена.ВыгружатьСвойства ИЛИ ПараметрыОбмена.ВыгружатьЗначенияСвойствВТовары ИЛИ ПараметрыОбмена.ВыгружатьЗначенияСвойствВПредложения Тогда
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + ЗапросПоСвойствам;

	КонецЕсли;
	
	
	Если ПараметрыОбмена.ВыгружатьКартинкиИФайлы Тогда
		  
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС	+ ЗапросПоКартинкамИФайлам;
		
	КонецЕсли;
	
		Если ПараметрыОбмена.ВыгружатьКартинкиИФайлыПредложений Тогда
		  
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС	+ ЗапросПоКартинкамИФайламПредложений;
		
	КонецЕсли;

	
	Если ПараметрыОбмена.ВыгружатьЦены Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС	+ ЗапросПоЦенам;
	КонецЕсли;
	
	Если ПараметрыОбмена.ВыгружатьОстатки Тогда
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС	+ ЗапросОстатков;
			
	КонецЕсли;
	
	Если ПараметрыОбмена.ВыгружатьШтрихкоды Тогда
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС	+ ЗапросПоШтрихКодам;
			
	КонецЕсли;

	Если ПараметрыОбмена.ВыгружатьПланируемуюДатуПоступленияПредложения Тогда
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС	+ ЗапросПоПланируемойДатеПоступления;
			
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС
		+ ТекстЗапросаГруппы;
		
	
	лМенеджерВременныхТаблиц 		= Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц 	= лМенеджерВременныхТаблиц; 
	Запрос.Текст = ТекстЗапроса;
	запрос.Выполнить();	
	
	Возврат лМенеджерВременныхТаблиц;
	
КонецФункции

// Функция - дополнительно фильтрует свойства по дополнительным настройкам
//
// Параметры:
//  ТаблицаНастройкиСвойств	 - 	 Не отфильтрованная таблица значений свойств 
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
// Возвращаемое значение:
//   Отфильтрованная таблица значений свойств
Функция ФильтрацияСвойствПоДополнительнымНастройкам(ТаблицаНастройкиСвойств, ПараметрыОбмена)
	
	тзнДанных = Новый ТаблицаЗначений;
	тзнДанных.Колонки.Добавить("Объект");
	тзнДанных.Колонки.Добавить("ТипОбъекта");
	
	Если ТаблицаНастройкиСвойств.Колонки.Найти("Объект") = Неопределено Тогда
		Возврат тзнДанных;
	КонецЕсли;
	
	Для Каждого ТекСтрока из ТаблицаНастройкиСвойств Цикл
		
		НайденнаяСтрока = ПараметрыОбмена.НастройкаСвойствТоваровИХарактеристик.Найти(ТекСтрока.Объект);
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			НоваяСтрока = тзнДанных.Добавить();
			НоваяСтрока.Объект 		= ТекСтрока.Объект;
			НоваяСтрока.ТипОбъекта 	= ТекСтрока.ТипОбъекта;
			
		Иначе
			
			Если НЕ( НайденнаяСтрока.НеВыгружатьВСвойстваПредложений И НайденнаяСтрока.НеВыгружатьВСвойстваТоваров) Тогда
				
				НоваяСтрока = тзнДанных.Добавить();
				НоваяСтрока.Объект 		= ТекСтрока.Объект;
				НоваяСтрока.ТипОбъекта 	= ТекСтрока.ТипОбъекта;
				
			КонецЕсли
			
		КонецЕсли;
		
	КонецЦикла;
	
 Возврат тзнДанных;	
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Процедура - выгружает товары в XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  ИмяКаталога				 - 	 Каталог, куда будут выгружены данные XML 
//  Владелец				 - 	 Объект XDTO, куда будет добавлен товар  
//  ВладелецТип				 - 	 Тип объекта XDTO, куда будет добавлен товар 
//  МенеджерВременныхТаблиц  - 	 Менеджер временных таблиц, содержащий информацию о выгружаемых товарах 
//  СтрокаТаблицыКаталогов	 - 	 Информация о каталоге(инфоблоке), куда будет выгружена информация 
//  МассивКартинок			 - 	 Массив, где будут хранитсья выгружаемые картинки  
//  МассивФайлов			 - 	 Массив, где будут хранитсья выгружаемые файлы  
Процедура ВыгрузитьТоварыXDTO(ПараметрыОбмена, ИмяКаталога, Владелец, ВладелецТип, МенеджерВременныхТаблиц, СтрокаТаблицыКаталогов, МассивКартинок, МассивФайлов)
	                        
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	//Временная таблица формируется в функции СформироватьВременныеТаблицыПоИнформацииОТоварахПакета
	ТекстЗапроса = "ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВремНоменклатура КАК ВремНоменклатура";
	
	Запрос.Текст = ТекстЗапроса; 
	
	ТзнТоваров = Запрос.Выполнить().Выгрузить();
	
	Если ТзнТоваров.Количество() > 0 Тогда	
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка товаров в XML.", ПараметрыОбмена);
		
		Итератор = 0;
		ВыгруженоКартинок 	= 0;
		ВыгруженоФайлов		= 0;
		СозданоКартинок		= 0;
		СозданоФайлов		= 0;
		
		ДеревоГрупп = СтрокаТаблицыКаталогов.ДеревоГрупп;  
		ВыгружатьПоДеревуТоваров = НЕ ДеревоГрупп.Строки.Количество() = 0;
		
		Если ВыгружатьПоДеревуТоваров Тогда
			
			ТаблицаДереваГрупп = ПолучитьНоменклатуруГруппДерева(ДеревоГрупп, МенеджерВременныхТаблиц);
			
		КонецЕсли;
		
		XDTOТоварыТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "Товары");
		XDTOТовары 		= ФабрикаXDTO.Создать(XDTOТоварыТип); 
		
		XDTOТоварТип 	= ПараметрыОбмена.ФайлСхемы.Получить("Товар");
		
		XDTOЕдиницаИзмеренияТип = ПараметрыОбмена.ФайлСхемы.Получить("ЕдиницаИзмерения");
		
		XDTOСтавкиНалоговТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOТоварТип, "СтавкиНалогов");	
		XDTOСтавкаНалогаТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOСтавкиНалоговТип, "СтавкаНалога");	
		
		XDTOЗначенияРеквизитовТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOТоварТип, "ЗначенияРеквизитов");
		XDTOЗначениеРеквизитаТип 	= ПараметрыОбмена.ФайлСхемы.Получить("ЗначениеРеквизита");
		
		Для каждого ТекТовар из ТзнТоваров Цикл
			
			XDTOТовар 		= ФабрикаXDTO.Создать(XDTOТоварТип); 
			
			XDTOТовар.Ид 				= XMLСтрока(ТекТовар.ИдентификаторНоменклатуры);
			XDTOТовар.НомерВерсии 		= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, ТекТовар.ВерсияДанныхНоменклатуры, "Товаров");

			XDTOТовар.ПометкаУдаления 	= XMLСтрока(ТекТовар.ПометкаУдаленияНоменклатуры);
			
			XDTOТовар.БазоваяЕдиница	= XMLСтрока(ТекТовар.ИдентификаторЕдиницыИзмерения);
			
			ВыгрузитьГруппыНоменклатурыXDTO(ПараметрыОбмена, XDTOТовар, XDTOТоварТип, ТекТовар, ВыгружатьПоДеревуТоваров, ТаблицаДереваГрупп);
			
			Если ЗначениеЗаполнено(ТекТовар.Производитель) Тогда
				
				XDTOПроизводительТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOТоварТип, "Изготовитель");
				XDTOПроизводитель 		= ФабрикаXDTO.Создать(XDTOПроизводительТип); 
				XDTOПроизводитель.Ид 						= XMLСтрока(ТекТовар.Производитель);
				XDTOПроизводитель.Наименование 				= ТекТовар.ПроизводительНаименование;
				XDTOПроизводитель.ОфициальноеНаименование 	= ТекТовар.ПроизводительНаименование;
				
				XDTOТовар.Изготовитель	= XDTOПроизводитель;
				
			КонецЕсли;
			
			лОписаниеТовара = ТекТовар.Номенклатура.Описание;
			лДополнительноеОписаниеНоменклатуры = ?(СтрДлина(лОписаниеТовара) > 10000, Лев(лОписаниеТовара, 10000), лОписаниеТовара);
			
			Для каждого ТекСтр из ПараметрыОбмена.СоответствиеОсновныхРеквизитовНоменклатуры Цикл
				
				лЗначение = ПолучитьЗначениеПоля1С(ПараметрыОбмена, МенеджерВременныхТаблиц, ТекСтр, ТекТовар, лДополнительноеОписаниеНоменклатуры);
				
				Если лЗначение <> Неопределено Тогда 
					
					XDTOТовар[ТекСтр.НаименованиеПоля]	= ?(лЗначение = NULL, ?(ТекСтр.НаименованиеПоля = "Вес" , 0, ""), лЗначение);
					
				КонецЕсли;
				
			КонецЦикла;
		
			Если ПараметрыОбмена.ВыгружатьЗначенияСвойствВТовары Тогда
				ВыгрузитьСвойстваНоменклатурыXDTO(ПараметрыОбмена, XDTOТовар, XDTOТоварТип, ТекТовар, МенеджерВременныхТаблиц);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекТовар.СтавкаНДС) Тогда
				
				XDTOСтавкиНалогов 		= ФабрикаXDTO.Создать(XDTOСтавкиНалоговТип); 
				XDTOСтавкаНалога 		= ФабрикаXDTO.Создать(XDTOСтавкаНалогаТип); 
				
				XDTOСтавкаНалога.Наименование 	= ПараметрыОбмена.НаименованиеНалога;
				XDTOСтавкаНалога.Ставка 		= Б_ОбменССайтомСервер.ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(ТекТовар.СтавкаНДС);
				
				XDTOСтавкиНалогов.СтавкаНалога.Добавить(XDTOСтавкаНалога);
				XDTOТовар.СтавкиНалогов = XDTOСтавкиНалогов;
				
			КонецЕсли;
			
			XDTOЗначенияРеквизитов 		= ФабрикаXDTO.Создать(XDTOЗначенияРеквизитовТип); 
			
			Если ПараметрыОбмена.ВыгружатьКартинкиИФайлы Тогда
				
				Файлы = Новый Массив;
				ОписаниеФайлов = Новый Соответствие;
				
				ВыгрузкаФайловНоменклатуры(ПараметрыОбмена, ИмяКаталога, XDTOТовар, МенеджерВременныхТаблиц, ТекТовар, Файлы, ОписаниеФайлов, ВыгруженоКартинок, МассивКартинок, ВыгруженоФайлов, МассивФайлов, СозданоКартинок, СозданоФайлов);
				
				Для Каждого Файл Из Файлы Цикл
					
					Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Файл", Файл);				
					
				КонецЦикла;
				
				Для Каждого ОписаниеФайла Из ОписаниеФайлов Цикл
					
					Файл = ОписаниеФайла.Ключ;
					Описание = ОписаниеФайла.Значение;
					
					Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "ОписаниеФайла", Файл + "#" + Описание);
					
				КонецЦикла;
				
			КонецЕсли;
			
			лТипНоменклатуры = "Товар";
			Если ТекТовар.ТипТовара = 2 Тогда
				лТипНоменклатуры = "Комплект";
			ИначеЕсли ТекТовар.ТипТовара = 3 Тогда
				лТипНоменклатуры = "Услуга";
			КонецЕсли;
			
			Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "ВидНоменклатуры", ТекТовар.ВидНоменклатуры.Наименование);
			Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "ТипНоменклатуры", лТипНоменклатуры);
			
			Для каждого ТекСтр из ПараметрыОбмена.СоответствиеДополнительныхРеквизитовНоменклатуры Цикл
				
				лЗначение = ПолучитьЗначениеПоля1С(ПараметрыОбмена, МенеджерВременныхТаблиц, ТекСтр, ТекТовар, лДополнительноеОписаниеНоменклатуры);
				
				Если лЗначение <> Неопределено Тогда 

					Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, ТекСтр.НаименованиеПоля, ?(лЗначение = NULL, "", лЗначение));
					
				КонецЕсли;
				
			КонецЦикла;
			
			XDTOТовар.ЗначенияРеквизитов = XDTOЗначенияРеквизитов;
			
			Итератор = Итератор + 1;
			XDTOТовары.Товар.Добавить(XDTOТовар);   
		КонецЦикла;
		
		Владелец.Товары = XDTOТовары;
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгружено " + Строка(ВыгруженоКартинок) + " картинок в товарах.", ПараметрыОбмена);
		Б_ОбменССайтомСервер.СообщитьПодробно("Создано " + Строка(СозданоКартинок) + " картинок для товаров.", ПараметрыОбмена);
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгружено " + Строка(ВыгруженоФайлов) + " файлов в товарах.", ПараметрыОбмена);
		Б_ОбменССайтомСервер.СообщитьПодробно("Создано " + Строка(СозданоФайлов) + " файлов для товаров.", ПараметрыОбмена);
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка товаров в XML завершено. Выгружено " + Строка(Итератор) + " элементов.", ПараметрыОбмена);

	КонецЕсли;
	
КонецПроцедуры

// Функция - возвращает плановую дату поступления товара и предложения
//
// Параметры:
//  Номенклатура			 - 	 Номенклатура 1С 
//  лМенеджерВременныхТаблиц - 	 Менеджер временных таблиц с данными по плановым закупкам товаров 
//  Характеристика			 - 	 Характеристика номенклатуры 1С 
// Возвращаемое значение:
//   Даты поступления строкой 
Функция ПолучитьДатуПланирования(лМенеджерВременныхТаблиц, Номенклатура, Характеристика = НеОпределено)
	
	мЗапросПоДП = Новый Запрос(	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВремПланируемыеДатыПоступления.ДатаПоступления КАК ДатаПоступления
	|ИЗ
	|	ВремПланируемыеДатыПоступления КАК ВремПланируемыеДатыПоступления
	|ГДЕ
	|	ВремПланируемыеДатыПоступления.Номенклатура = &Номенклатура
	|	И ВремПланируемыеДатыПоступления.Характеристика = &Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоступления");
	
	мЗапросПоДП.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;

	ДатыПоступления = "";
	
	мЗапросПоДП.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		мЗапросПоДП.УстановитьПараметр("Характеристика", Характеристика);
	Иначе
		мЗапросПоДП.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	РезультатЗапроса = мЗапросПоДП.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		ДатыПоступления = ДатыПоступления + Строка(РезультатЗапроса.ДатаПоступления); 	
	КонецЦикла;
	
	Возврат ДатыПоступления;
	
КонецФункции

// Функция - Получить значение поля1 С
//
// Параметры:
//  ПараметрыОбмена						 - 	 Настройки узла обмена 
//  МенеджерВременныхТаблиц				 - 	 Менеджер временных таблиц, содержащий информацию о товарах 
//  ТекСтр								 - 	 Название ключа 
//  ИнформациОТоваре					 - 	 Информация о товаре 
//  ДополнительноеОписаниеНоменклатуры	 - 	 Дополнительное описание товара 
// Возвращаемое значение:
//   Значение, которое должно быть установлено в реквизит номенклатуры 
Функция ПолучитьЗначениеПоля1С(ПараметрыОбмена, МенеджерВременныхТаблиц, ТекСтр, ИнформациОТоваре, ДополнительноеОписаниеНоменклатуры)
	
	лЗначение = "";	
	Если ТекСтр.НаименованиеПоля1С = "Код" Тогда
		лЗначение = СокрЛП(ИнформациОТоваре.КодНоменклатуры);	
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Наименование" Тогда
		лЗначение = ИнформациОТоваре.НаименованиеНоменклатуры;	
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Полное наименование" Тогда
		лЗначение = ИнформациОТоваре.НаименованиеПолноеНоменклатуры;	
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Штрихкод" Тогда
		
		Если ПараметрыОбмена.ВыгружатьШтрихкоды Тогда
			
			лЗначение = ПолучениеШтрихКодаНоменклатурыИХарактеристики(ИнформациОТоваре.Номенклатура, МенеджерВременныхТаблиц);
			
		КонецЕсли;
		
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Артикул" Тогда
		лЗначение = ИнформациОТоваре.Артикул;	
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Описание" Тогда
		
		лЗначение = ДополнительноеОписаниеНоменклатуры;
		
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Вес" Тогда
		лЗначение = ИнформациОТоваре.ВесНетто;
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Вес*1000" Тогда
		лЗначение = ИнформациОТоваре.ВесНетто * 1000;
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "ВесБрутто" Тогда
		лЗначение = ИнформациОТоваре.ВесБрутто;
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "ВесБрутто*1000" Тогда
		лЗначение = ИнформациОТоваре.ВесБрутто * 1000;
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Объем Нетто" Тогда
		лЗначение = ИнформациОТоваре.ОбъемН;
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Объем Брутто" Тогда
		лЗначение = ИнформациОТоваре.ОбъемБ;
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Высота" Тогда
		лЗначение = ИнформациОТоваре.ВысотаБ;
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Глубина" Тогда
		лЗначение = ИнформациОТоваре.ГлубинаБ;
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Ширина" Тогда
		лЗначение = ИнформациОТоваре.ШиринаБ;
		
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Вид номенклатуры" Тогда
		лЗначение = Строка(ИнформациОТоваре.ВидНоменклатуры);	                    
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Родитель" Тогда
		лЗначение = Строка(ИнформациОТоваре.Родитель);	
	ИначеЕсли ТекСтр.НаименованиеПоля1С = "Планируемая дата поступления" Тогда
		
		Если ПараметрыОбмена.ВыгружатьПланируемуюДатуПоступленияПредложения Тогда
			лЗначение = ПолучитьДатуПланирования(МенеджерВременныхТаблиц, ИнформациОТоваре.Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		Иначе
			лЗначение = "";	
		КонецЕсли;
		
	Иначе
		
		Если ТекСтр.НаименованиеПоля1С = "" Тогда
			
			лЗначение = Неопределено;
			
		Иначе
			
			лИтоговоеНазваниеПоля = стрЗаменить(ТекСтр.НаименованиеПоля1С, "Номенклатура", "ИнформациОТоваре.Номенклатура");
			
			Если ЗначениеЗаполнено(лИтоговоеНазваниеПоля) Тогда
				Выполнить("лЗначение = Строка(" + лИтоговоеНазваниеПоля + ")");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат лЗначение;	
	
КонецФункции

// Функция - возвращает иерархию групп номенклатуры
//
// Параметры:
//  ДеревоГрупп				 - 	 Пользовательское дерево групп 
//  МенеджерВременныхТаблиц  - 	 Менеджер временных таблиц, содержащий информацию о товарах 
// Возвращаемое значение:
//   Таблица значений с группами номенклатуры 
Функция ПолучитьНоменклатуруГруппДерева(ДеревоГрупп, МенеджерВременныхТаблиц)
	
	ТаблицаТоваровДереваГрупп = Новый ТаблицаЗначений;
	ТаблицаТоваровДереваГрупп.Колонки.Добавить("ИдГруппы");
	ТаблицаТоваровДереваГрупп.Колонки.Добавить("Номенклатура");
	ТаблицаТоваровДереваГрупп.Индексы.Добавить("Номенклатура");

	ТаблицаГруппНоменклатурыДереваГрупп = Новый ТаблицаЗначений;
	ТаблицаГруппНоменклатурыДереваГрупп.Колонки.Добавить("ИдГруппы");
	ТаблицаГруппНоменклатурыДереваГрупп.Колонки.Добавить("Номенклатура");
	
	ПодготовкаДанныхДереваГруппРекурсивно(ТаблицаТоваровДереваГрупп, ДеревоГрупп.Строки, ТаблицаГруппНоменклатурыДереваГрупп);

	ТаблицаГруппНоменклатурыДереваГрупп.Свернуть("ИдГруппы, Номенклатура");

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВремНоменклатура.Номенклатура
		|ИЗ
		|	ВремНоменклатура КАК ВремНоменклатура
		|ГДЕ
		|	ВремНоменклатура.Номенклатура В ИЕРАРХИИ(&Группа)";
	
	Для Каждого ГруппаНоменклатуры Из ТаблицаГруппНоменклатурыДереваГрупп Цикл
		
		Запрос.УстановитьПараметр("Группа", ГруппаНоменклатуры.Номенклатура);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
				
			НовСтрока = ТаблицаТоваровДереваГрупп.Добавить();
			НовСтрока.ИдГруппы 		= ГруппаНоменклатуры.ИдГруппы; 
			НовСтрока.Номенклатура 	= Выборка.Номенклатура; 
				
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаТоваровДереваГрупп.Свернуть("ИдГруппы, Номенклатура");
	
	Возврат ТаблицаТоваровДереваГрупп;

КонецФункции

// Процедура - подготавливает данные дерева групп рекурсивно
//
Процедура ПодготовкаДанныхДереваГруппРекурсивно(ТаблицаТоваровДереваГрупп, ДеревоГрупп, ТаблицаГруппНоменклатурыДереваГрупп)
	 
	 Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		Для Каждого НоменклатураЭлемент Из СтрокаДерева.Номенклатура Цикл
			
			НоменклатураСсылка = НоменклатураЭлемент.Значение;
			
			Если НЕ ЗначениеЗаполнено(НоменклатураСсылка) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если НоменклатураСсылка.ЭтоГруппа Тогда
				
				НовСтрока = ТаблицаГруппНоменклатурыДереваГрупп.Добавить();
				НовСтрока.ИдГруппы 		= СтрокаДерева.ИдГруппы;
				НовСтрока.Номенклатура 	= НоменклатураСсылка;
				
			КонецЕсли;
			
			НовСтрока = ТаблицаТоваровДереваГрупп.Добавить();
			НовСтрока.ИдГруппы 		= СтрокаДерева.ИдГруппы;
			НовСтрока.Номенклатура 	= НоменклатураСсылка;
	
		КонецЦикла;
		
		ПодготовкаДанныхДереваГруппРекурсивно(ТаблицаТоваровДереваГрупп, СтрокаДерева.Строки, ТаблицаГруппНоменклатурыДереваГрупп);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Выгружает группы номенклатуры XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 XDTO объект, в который добавляются группы номенклатуры 
//  ВладелецТип				 - 	 Тип XDTO объекта, в который добавляются группы номенклатуры 
//  ВыборкаНоменклатуры		 - 	 Информация о номенклатуре 
//  ВыгружатьПоДеревуТоваров - 	 Признак, выгружать группы товара по пользовательскому дереву или или нет 
//  ДеревоГрупп				 - 	 Пользовательское дерево групп 
Процедура ВыгрузитьГруппыНоменклатурыXDTO(ПараметрыОбмена, Владелец, ВладелецТип, ВыборкаНоменклатуры, ВыгружатьПоДеревуТоваров, ДеревоГрупп)
	
	XDTOГруппыТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "Группы");
	
	Если ВыгружатьПоДеревуТоваров Тогда
		
		XDTOГруппы = ФабрикаXDTO.Создать(XDTOГруппыТип);
		Владелец.Группы = XDTOГруппы;
		
			
		МассивГрупп = Новый Массив;
		
		Найдено = ДеревоГрупп.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаНоменклатуры.Номенклатура));
		
		Для Каждого СтрокаНайдено Из Найдено Цикл
			
			МассивГрупп.Добавить(СтрокаНайдено.ИдГруппы);
			
		КонецЦикла;
		
		Если МассивГрупп.Количество() > 0 Тогда
			
			XDTOГруппы = ФабрикаXDTO.Создать(XDTOГруппыТип);
			
			Для Каждого ИдГруппы Из МассивГрупп Цикл
				
				XDTOГруппы.Ид.Добавить(XMLСтрока(ИдГруппы));
			
			КонецЦикла;
			
		КонецЕсли;
			
		Владелец.Группы = XDTOГруппы;

	Иначе
	
		Если ПараметрыОбмена.КлассифицироватьПоВидамНоменклатуры Тогда
			
			Если ЗначениеЗаполнено(ВыборкаНоменклатуры.ВидНоменклатуры) Тогда
				
				XDTOГруппы = ФабрикаXDTO.Создать(XDTOГруппыТип);
								
				XDTOГруппы.Ид.Добавить(XMLСтрока(ВыборкаНоменклатуры.ВидНоменклатуры));
	
				Владелец.Группы = XDTOГруппы;
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ВыборкаНоменклатуры.ИдентификаторРодителя) Тогда
				
				XDTOГруппы = ФабрикаXDTO.Создать(XDTOГруппыТип);
								
				XDTOГруппы.Ид.Добавить(ПолучитьИдентификаторГруппы(XMLСтрока(ВыборкаНоменклатуры.ИдентификаторРодителя)));
					
				Владелец.Группы = XDTOГруппы;

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - возвращает штрих код номенклатуры и характеристики
//
// Параметры:
//  Номенклатура			 - 	 Ссылка на номенклатуру XDTO 
//  МенеджерВременныхТаблиц  - 	 Менеджер временных таблиц, хранящий информацию о штрихкодах товаров 
//  Характеристика	 		 - 	 Ссылка на характеристику XDTO 
// Возвращаемое значение:
//   Штрихкод 
Функция ПолучениеШтрихКодаНоменклатурыИХарактеристики(Номенклатура, МенеджерВременныхТаблиц, Характеристика = НеОпределено)
	
	мЗапросПоШК = Новый Запрос(	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихКоды.Штрихкод
	|ИЗ
	|	ВремШтрихКоды КАК ШтрихКоды
	|ГДЕ
	|	ШтрихКоды.Номенклатура = &Номенклатура
	|	И ШтрихКоды.Характеристика = &Характеристика");
	
	мЗапросПоШК.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	ШтрихКод = "";
	
	мЗапросПоШК.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		мЗапросПоШК.УстановитьПараметр("Характеристика", Характеристика);
	Иначе
		мЗапросПоШК.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	РезультатЗапроса = мЗапросПоШК.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ШтрихКод = РезультатЗапроса.Выгрузить()[0][0];
	КонецЕсли;
	
	Возврат ШтрихКод;
	
КонецФункции

// Процедура - выгружает свойства номенклатуры в XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 XDTO объект, в который добавляются свойства номенклатуры 
//  ВладелецТип				 - 	 Тип XDTO объекта, в который добавляются свойства номенклатуры 
//  ВыборкаНоменклатуры		 - 	 Информация о номенклатуре 
//  МенеджерВременныхТаблиц  - 	 Менеджер временных таблиц, содержащих информацию о свойствах товаров 
Процедура ВыгрузитьСвойстваНоменклатурыXDTO(ПараметрыОбмена, Владелец, ВладелецТип, ВыборкаНоменклатуры, МенеджерВременныхТаблиц);
	
	XDTOЗначенияСвойствТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "ЗначенияСвойств");
	XDTOЗначенияСвойстваТип = ПараметрыОбмена.ФайлСхемы.Получить("ЗначенияСвойства");
	
	Запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	запрос.Текст =  "ВЫБРАТЬ *
	|ИЗ
	|	ВремЗначенияСвойствТовара КАК ВремЗначенияСвойствТовара
	|ГДЕ
	|	(ВремЗначенияСвойствТовара.Номенклатура = &Номенклатура	
	|И НЕ ВремЗначенияСвойствТовара.НеВыгружатьВСвойстваТоваров)";
	
	Запрос.УстановитьПараметр("Номенклатура", ВыборкаНоменклатуры.Номенклатура);
	Выборка = Запрос.Выполнить();
	
	Если НЕ Выборка.Пустой() Тогда	
		ВыборкаСвойств = Выборка.Выбрать();
		XDTOЗначенияСвойств = ФабрикаXDTO.Создать(XDTOЗначенияСвойствТип);
		                                                 
		Пока ВыборкаСвойств.Следующий() Цикл
			
			XDTOЗначенияСвойства = ФабрикаXDTO.Создать(XDTOЗначенияСвойстваТип);
			
			XDTOЗначенияСвойства.Ид = XMLСтрока(ВыборкаСвойств.ИдентификаторСвойства);
			
			XDTOЗначенияСвойства.Значение.Добавить(XMLСтрока(ВыборкаСвойств.ИдентификаторЗначения));
			
			XDTOЗначенияСвойств.ЗначенияСвойства.Добавить(XDTOЗначенияСвойства);	
			
		КонецЦикла;
		Владелец.ЗначенияСвойств = XDTOЗначенияСвойств;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - выгружает файлы номенклатуры
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  ИмяКаталога				 - 	 Каталог. где будут храниться картинки и файлы(без подкаталога) 
//  Владелец				 - 	 Владелец XDTO, куда будет добавлена информация о картинках и файлах 
//  МенеджерВременныхТаблиц  - 	 Менеджер временных таблиц, содержащий информацию о товарах 
//  ИнформацияОНоменклатуре	 - 	 Информация о номенклатуре 
//  Файлы					 - 	 Массив, хранящий адрес к файлам 
//  ОписаниеФайлов			 - 	 Массив, хранящий описание файлов 
//  ВыгруженоКартинок		 - 	 Счетчик выгруженных картинок 
//  МассивКартинок			 - 	 Массив выгруженных картинок 
//  ВыгруженоФайлов			 - 	 Счетчик выгруженных файлов 
//  МассивФайлов			 - 	 Массив выгруженных файлов 
Процедура ВыгрузкаФайловНоменклатуры(ПараметрыОбмена,ИмяКаталога, Владелец, МенеджерВременныхТаблиц, ИнформацияОНоменклатуре, Файлы, ОписаниеФайлов, ВыгруженоКартинок, МассивКартинок, ВыгруженоФайлов, МассивФайлов, СозданоКартинок, СозданоФайлов)

	Запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремФайлыНоменклатуры КАК ВремФайлыНоменклатуры
	| ГДЕ ВремФайлыНоменклатуры.Номенклатура = &Номенклатура
	|УПОРЯДОЧИТЬ ПО
	| ВремФайлыНоменклатуры.ДатаСоздания";
    Запрос.УстановитьПараметр("Номенклатура", ИнформацияОНоменклатуре.Номенклатура);
	
	тзнФайлов = Запрос.Выполнить().Выгрузить();
	
	Если тзнФайлов.Количество() > 0  Тогда
		
		Для каждого ТекФайл из тзнФайлов Цикл
			
			Если ТекФайл.ЭтоКартинка Тогда 
				МассивКартинок.Добавить(ТекФайл.Файл);
			Иначе
				МассивФайлов.Добавить(ТекФайл.Файл);
			КонецЕсли;
			
		КонецЦикла;
		
		тзнФайлов.Сортировать("Основная Убыв, ЭтоКартинка Убыв");
		
		Для Каждого ФайлДляВыгрузки Из тзнФайлов Цикл
			
			АдресКартинки = ВыгрузитьФайлНоменклатуры(ПараметрыОбмена, ИмяКаталога, ИнформацияОНоменклатуре.Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), ФайлДляВыгрузки, СозданоКартинок, СозданоФайлов);
			
			Если ЗначениеЗаполнено(АдресКартинки) Тогда
				
				ОписаниеКартинки = ?(НЕ ПустаяСтрока(ФайлДляВыгрузки.Файл.Описание), ФайлДляВыгрузки.Файл.Описание, ФайлДляВыгрузки.Файл.Наименование);
				
				Если НЕ ПустаяСтрока(ОписаниеКартинки) Тогда
					
					ОписаниеФайлов.Вставить(АдресКартинки, ОписаниеКартинки);
					
				КонецЕсли;
				
				Если ФайлДляВыгрузки.ЭтоКартинка Тогда
					
					Владелец.Картинка.Добавить(АдресКартинки);
					
					ВыгруженоКартинок 	= ВыгруженоКартинок + 1;
				Иначе
					
					Файлы.Добавить(АдресКартинки);
					
					ВыгруженоФайлов 	= ВыгруженоФайлов + 1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; 		
	КонецЕсли; 
КонецПроцедуры


// Процедура - выгружает файлы характеристик номенклатуры
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  ИмяКаталога				 - 	 Каталог. где будут храниться картинки и файлы(без подкаталога) 
//  Владелец				 - 	 Владелец XDTO, куда будет добавлена информация о картинках и файлах 
//  МенеджерВременныхТаблиц  - 	 Менеджер временных таблиц, содержащий информацию о товарах 
//  ИнформацияОНоменклатуре	 - 	 Информация о номенклатуре 
//  Файлы					 - 	 Массив, хранящий адрес к файлам 
//  ОписаниеФайлов			 - 	 Массив, хранящий описание файлов 
//  ВыгруженоКартинок		 - 	 Счетчик выгруженных картинок 
//  МассивКартинок			 - 	 Массив выгруженных картинок 
//  ВыгруженоФайлов			 - 	 Счетчик выгруженных файлов 
//  МассивФайлов			 - 	 Массив выгруженных файлов 
Процедура ВыгрузкаФайловХарактеристикНоменклатуры(ПараметрыОбмена,ИмяКаталога, Владелец, МенеджерВременныхТаблиц, ИнформацияОНоменклатуре, Файлы, ОписаниеФайлов, ВыгруженоКартинок, МассивКартинок, ВыгруженоФайлов, МассивФайлов, СозданоКартинок, СозданоФайлов)

	Запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремФайлыХарактеристикНоменклатуры КАК ВремФайлыХарактеристикНоменклатуры
	| ГДЕ ВремФайлыХарактеристикНоменклатуры.Номенклатура = &Номенклатура
	| И ВремФайлыХарактеристикНоменклатуры.Характеристика = &Характеристика
	|УПОРЯДОЧИТЬ ПО
	| ВремФайлыХарактеристикНоменклатуры.ДатаСоздания";
    Запрос.УстановитьПараметр("Номенклатура", ИнформацияОНоменклатуре.Номенклатура);
    Запрос.УстановитьПараметр("Характеристика", ИнформацияОНоменклатуре.Характеристика);
	
	тзнФайлов = Запрос.Выполнить().Выгрузить();
	
	Если тзнФайлов.Количество() > 0  Тогда
		
		Для каждого ТекФайл из тзнФайлов Цикл
			
			Если ТекФайл.ЭтоКартинка Тогда 
				МассивКартинок.Добавить(ТекФайл.Файл);
			Иначе
				МассивФайлов.Добавить(ТекФайл.Файл);
			КонецЕсли;
			
		КонецЦикла;
		
		тзнФайлов.Сортировать("Основная Убыв, ЭтоКартинка Убыв");
		
		Для Каждого ФайлДляВыгрузки Из тзнФайлов Цикл
			
			АдресКартинки = ВыгрузитьФайлНоменклатуры(ПараметрыОбмена, ИмяКаталога, ИнформацияОНоменклатуре.Номенклатура, ИнформацияОНоменклатуре.Характеристика, ФайлДляВыгрузки, СозданоКартинок, СозданоФайлов);
			
			Если ЗначениеЗаполнено(АдресКартинки) Тогда
				
				ОписаниеКартинки = ?(НЕ ПустаяСтрока(ФайлДляВыгрузки.Файл.Описание), ФайлДляВыгрузки.Файл.Описание, ФайлДляВыгрузки.Файл.Наименование);
				
				Если НЕ ПустаяСтрока(ОписаниеКартинки) И НЕ ФайлДляВыгрузки.Основная Тогда
					
					ОписаниеФайлов.Вставить(АдресКартинки, ОписаниеКартинки);
					
				КонецЕсли;
				
				Если ФайлДляВыгрузки.ЭтоКартинка Тогда
					
					Владелец.Картинка.Добавить(АдресКартинки);
					
					ВыгруженоКартинок 	= ВыгруженоКартинок + 1;
				Иначе
					
					Файлы.Добавить(АдресКартинки);
					
					ВыгруженоФайлов 	= ВыгруженоФайлов + 1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; 		
	КонецЕсли; 
КонецПроцедуры


// Функция - сохраняет файл объекта и возвращает адрес к файлу
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  ИмяКаталога		 - 	 Каталог, где должна лежать картинка 
//  ОбъектКартинки	 - 	 Номенклатура 1С, которому принадлежит картинка 
//  Характеристика	 - 	 Характеристика номенклатуры 1С, которому принадлежит картинка 
//  ФайлДляВыгрузки	 - 	 Данные сохраняемого файла 
// Возвращаемое значение:
//   Адрес к сохраненному файлу    
Функция ВыгрузитьФайлНоменклатуры(ПараметрыОбмена, ИмяКаталога, Номенклатура, Характеристика, ФайлДляВыгрузки, СозданоКартинок, СозданоФайлов)
	
	Результат = НеОпределено;
	
	Если НЕ ЗначениеЗаполнено(ФайлДляВыгрузки.Файл) Тогда
		Возврат Результат;
	КонецЕсли;
	
	пОбъект = ?(ЗначениеЗаполнено(Характеристика), Характеристика, Номенклатура);
	
	ИмяПоНоменклатуре = Строка(пОбъект.УникальныйИдентификатор());
	ИмяПоХранилищу    = Строка(ФайлДляВыгрузки.Файл.УникальныйИдентификатор());
	
	ИмяФайлаКартинки = ИмяПоНоменклатуре + "_" + ИмяПоХранилищу + "." + ?(НРег(ФайлДляВыгрузки.Расширение) = "","jpg", НРег(?(Лев(ФайлДляВыгрузки.Расширение, 1) = ".", Прав(ФайлДляВыгрузки.Расширение, СтрДлина(ФайлДляВыгрузки.Расширение)-1), ФайлДляВыгрузки.Расширение)));
	КаталогПоИмени   = Лев(ИмяПоНоменклатуре, 2);
	КаталогКартинки	 = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, (ИмяКаталога + "\" + ПараметрыОбмена.ПодкаталогФайлов + "\" + КаталогПоИмени));
	
	Если ФайлДляВыгрузки.НадоВыгружать Тогда
		
		СоздатьКаталог(КаталогКартинки);
	
		ПолноеИмяФайлаКартинки = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, (КаталогКартинки + "\" + ИмяФайлаКартинки));
	
		ФайлВХранилище = ФайлДляВыгрузки.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
		
		Если ФайлВХранилище Тогда
			
			Если ФайлДляВыгрузки.ХранимыйФайл = NULL Тогда
				ДвоичныеДанныеФайла = НеОпределено;
			Иначе
				ДвоичныеДанныеФайла = ФайлДляВыгрузки.ХранимыйФайл.Получить();
			КонецЕсли;
			
			Если ДвоичныеДанныеФайла = НеОпределено Тогда
				
				Б_ОбменССайтомСервер.СообщитьПодробно("Не удалось получить данные файла " + Строка(ФайлДляВыгрузки.Файл) + " объекта " + Строка(пОбъект), ПараметрыОбмена);	
						
				Возврат Результат;
				
			КонецЕсли;
			
		Иначе
			
			ИмяФайла = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ?(ПараметрыОбмена.ПлатформаWindows, ФайлДляВыгрузки.ТомПолныйПутьWindows, ФайлДляВыгрузки.ТомПолныйПутьLinux) + "\" + ФайлДляВыгрузки.ПутьКФайлу);
			
			Попытка
				
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
				
			Исключение
				Б_ОбменССайтомСервер.СообщитьПодробно(ОписаниеОшибки() + " Выгрузка файла объекта: " + Строка(пОбъект), ПараметрыОбмена);	
						
				Возврат Результат;
				
			КонецПопытки;
			
		КонецЕсли;
			
		
		Попытка
			ДвоичныеДанныеФайла.Записать(ПолноеИмяФайлаКартинки);
		Исключение
			Б_ОбменССайтомСервер.СообщитьПодробно("Не удалось записать файл картинки на диск. Объект: " + пОбъект, ПараметрыОбмена);
			Возврат Результат;
		КонецПопытки;	
		
		Если ФайлДляВыгрузки.ЭтоКартинка Тогда
			
			СозданоКартинок 	= СозданоКартинок + 1;
		Иначе
			
			СозданоФайлов 		= СозданоФайлов + 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ПараметрыОбмена.ПодкаталогФайлов + "/" + КаталогПоИмени + "/" + ИмяФайлаКартинки;
	
	Возврат Результат;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Процедура - выгружает объект XDTO предложениями 
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 XDTO объект, в который добавляются предложения номенклатуры 
//  ВладелецТип				 - 	 Тип XDTO объекта, в который добавляются предложения номенклатуры 
//  лМенеджерВременныхТаблиц - 	 Менеджер временных таблиц с информацией о предложениях номенклатуры 
Процедура ВыгрузитьПредложенияXDTO(ПараметрыОбмена, ИмяКаталога, Владелец, ВладелецТип, лМенеджерВременныхТаблиц, МассивКартинок, МассивФайлов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
	//Временная таблица формируется в функции СформироватьВременныеТаблицыПоИнформацииОТоварахПакета
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	*
	               |ИЗ
	               |	ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВремНоменклатураСХарактеристиками.ТипТовара";
	
	ТзнПредложений = Запрос.Выполнить().Выгрузить();
	
	Если ТзнПредложений.Количество() > 0 Тогда	
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка предложений в XML.", ПараметрыОбмена);
		
		Итератор 			= 0;
		ВыгруженоКартинок 	= 0;
		ВыгруженоФайлов		= 0;
		СозданоКартинок 	= 0;
		СозданоФайлов		= 0;

		XDTOПредложенияТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "Предложения");
		XDTOПредложения 	= ФабрикаXDTO.Создать(XDTOПредложенияТип); 
		
		XDTOПредложениеТип 	= ПараметрыОбмена.ФайлСхемы.Получить("Предложение");
		
		XDTOХарактеристикиТовараТип 	= ПараметрыОбмена.ФайлСхемы.Получить("ХарактеристикиТовара");
		XDTOХарактеристикаТовараТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOХарактеристикиТовараТип, "ХарактеристикаТовара");
		
		XDTOЗначенияСвойствТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOПредложениеТип, "ЗначенияСвойств");
		XDTOЗначенияСвойстваТип = ПараметрыОбмена.ФайлСхемы.Получить("ЗначенияСвойства");
		
		XDTOЗначенияРеквизитовТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOПредложениеТип, "ЗначенияРеквизитов");
		XDTOЗначениеРеквизитаТип 	= ПараметрыОбмена.ФайлСхемы.Получить("ЗначениеРеквизита");
		
		Для каждого ТекПредложение из ТзнПредложений Цикл
			
			XDTOПредложение 	= ФабрикаXDTO.Создать(XDTOПредложениеТип); 
			
			Если ЗначениеЗаполнено(ТекПредложение.Характеристика) Тогда
				лИд 			= XMLСтрока(ТекПредложение.ИдентификаторНоменклатуры) + "#" + XMLСтрока(ТекПредложение.ИдентификаторХарактеристики); 
				
				Если ПараметрыОбмена.ВыгружатьШтрихкоды Тогда
					лШтрихкод 	= ПолучениеШтрихКодаНоменклатурыИХарактеристики(ТекПредложение.Номенклатура, лМенеджерВременныхТаблиц, ТекПредложение.Характеристика);
				КонецЕсли;
				
				Если ПараметрыОбмена.ВыгружатьПланируемуюДатуПоступленияПредложения Тогда
					лПланируемаяДатаПоступления = ПолучитьДатуПланирования(лМенеджерВременныхТаблиц, ТекПредложение.Номенклатура, ТекПредложение.Характеристика);
				КонецЕсли;
				
				лНаименование   = ТекПредложение.НаименованиеНоменклатуры + " (" + ТекПредложение.НаименованиеХарактеристики + ")";
				//лНаименование   = ТекПредложение.НаименованиеХарактеристики;
				лВерсияДанных   = ТекПредложение.ВерсияДанныхХарактеристики;
				лПометкаУдаления= XMLСтрока(ТекПредложение.ПометкаУдаленияНоменклатуры ИЛИ ТекПредложение.ПометкаУдаленияХарактеристики);
			Иначе
				лИд 			= XMLСтрока(ТекПредложение.ИдентификаторНоменклатуры); 
				
				Если ПараметрыОбмена.ВыгружатьШтрихкоды Тогда
					лШтрихкод 	= ПолучениеШтрихКодаНоменклатурыИХарактеристики(ТекПредложение.Номенклатура, лМенеджерВременныхТаблиц);
				КонецЕсли;
				
				Если ПараметрыОбмена.ВыгружатьПланируемуюДатуПоступленияПредложения Тогда
					лПланируемаяДатаПоступления = ПолучитьДатуПланирования(лМенеджерВременныхТаблиц, ТекПредложение.Номенклатура);
				КонецЕсли;
				
				лНаименование   = ТекПредложение.НаименованиеНоменклатуры;
				лВерсияДанных   = ТекПредложение.ВерсияДанныхНоменклатуры;
				лПометкаУдаления= XMLСтрока(ТекПредложение.ПометкаУдаленияНоменклатуры);
			КонецЕсли;
			
			XDTOПредложение.Ид 				= лИд;
			XDTOПредложение.НомерВерсии 	= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, лВерсияДанных, "Предложений");
			XDTOПредложение.ПометкаУдаления	= лПометкаУдаления;
			
			Если ПараметрыОбмена.ВыгружатьШтрихкоды Тогда
				XDTOПредложение.Штрихкод 	= лШтрихкод;
			КонецЕсли;
			
			Если ПараметрыОбмена.ВыгружатьКомплектующие Тогда
				ВыгрузитьКомплектующиеНоменклатурыXDTO(ПараметрыОбмена, XDTOПредложение, XDTOПредложениеТип, ТекПредложение.Номенклатура, ТекПредложение.Характеристика, лМенеджерВременныхТаблиц, ТекПредложение.ТипТовара);
			КонецЕсли;
			
			
			XDTOЗначенияРеквизитов 		= ФабрикаXDTO.Создать(XDTOЗначенияРеквизитовТип);  
			
			Если ПараметрыОбмена.ВыгружатьПланируемуюДатуПоступленияПредложения Тогда
				
				Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Планируемая дата поступления", лПланируемаяДатаПоступления);
				
			КонецЕсли;
			
			XDTOПредложение.Наименование 	= лНаименование;
			
			
			Если ПараметрыОбмена.ВыгружатьКартинкиИФайлыПредложений Тогда
				
				Файлы = Новый Массив;
				ОписаниеФайлов = Новый Соответствие;
				
				ВыгрузкаФайловХарактеристикНоменклатуры(ПараметрыОбмена, ИмяКаталога, XDTOПредложение, лМенеджерВременныхТаблиц, ТекПредложение, Файлы, ОписаниеФайлов, ВыгруженоКартинок, МассивКартинок, ВыгруженоФайлов, МассивФайлов, СозданоКартинок, СозданоФайлов);
				
				Для Каждого Файл Из Файлы Цикл
					
					Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Файл", Файл);				
					
				КонецЦикла;
				
				Для Каждого ОписаниеФайла Из ОписаниеФайлов Цикл
					
					Файл = ОписаниеФайла.Ключ;
					Описание = ОписаниеФайла.Значение;
					
					Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "ОписаниеФайла", Файл + "#" + Описание);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если XDTOЗначенияРеквизитов.ЗначениеРеквизита.Количество() > 0 Тогда
								
				XDTOПредложение.ЗначенияРеквизитов = XDTOЗначенияРеквизитов;
	
			КонецЕсли;
			
			Если (ТекПредложение.ИспользоватьХарактеристики  И ЗначениеЗаполнено(ТекПредложение.Характеристика))
				И (ПараметрыОбмена.ВыгружатьХарактеристикиПредложений ИЛИ ПараметрыОбмена.ВыгружатьЗначенияСвойствВПредложения) Тогда	
				                                                           
				Запрос = Новый Запрос;
				запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
				запрос.Текст =  "ВЫБРАТЬ
								| *
				                |ИЗ
				                |	ВремЗначенияСвойствХарактеристик КАК ВремЗначенияСвойствХарактеристик
				                |ГДЕ
				                |	ВремЗначенияСвойствХарактеристик.Характеристика = &Характеристика
				                |	И ВремЗначенияСвойствХарактеристик.Номенклатура = &Номенклатура
				                |	И НЕ ВремЗначенияСвойствХарактеристик.НеВыгружатьВСвойстваПредложений";
				
				Запрос.УстановитьПараметр("Номенклатура", ТекПредложение.Номенклатура);
				Запрос.УстановитьПараметр("Характеристика", ТекПредложение.Характеристика);
				РезультатЗапроса = Запрос.Выполнить();

				Если НЕ РезультатЗапроса.Пустой() Тогда
					
					XDTOХарактеристикиТовара 	= ФабрикаXDTO.Создать(XDTOХарактеристикиТовараТип); 
					
					XDTOЗначенияСвойств = ФабрикаXDTO.Создать(XDTOЗначенияСвойствТип);
					
					Выборка = РезультатЗапроса.Выбрать();
					Пока Выборка.Следующий() Цикл
						
						Если Выборка.СвойствоНаименование = NULL Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПараметрыОбмена.ВыгружатьХарактеристикиПредложений Тогда
							
							XDTOХарактеристикаТовара 	= ФабрикаXDTO.Создать(XDTOХарактеристикаТовараТип);
							
							XDTOХарактеристикаТовара.Наименование 	= Выборка.СвойствоНаименование;
							XDTOХарактеристикаТовара.Значение		= Выборка.ПредставлениеЗначения;
							
							XDTOХарактеристикиТовара.ХарактеристикаТовара.Добавить(XDTOХарактеристикаТовара);
							
						КонецЕсли;
						
						Если ПараметрыОбмена.ВыгружатьЗначенияСвойствВПредложения Тогда
							
							XDTOЗначенияСвойства = ФабрикаXDTO.Создать(XDTOЗначенияСвойстваТип);
							
							XDTOЗначенияСвойства.Ид = XMLСтрока(Выборка.ИдентификаторСвойства);
							
							XDTOЗначенияСвойства.Значение.Добавить(XMLСтрока(Выборка.ИдентификаторЗначения));
							
							XDTOЗначенияСвойств.ЗначенияСвойства.Добавить(XDTOЗначенияСвойства);	
							
						КонецЕсли;
						
					КонецЦикла;
					
					XDTOПредложение.ХарактеристикиТовара = XDTOХарактеристикиТовара;
					
					Если XDTOЗначенияСвойств.ЗначенияСвойства.количество() > 0 Тогда
						XDTOПредложение.ЗначенияСвойств = XDTOЗначенияСвойств;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			XDTOПредложения.Предложение.Добавить(XDTOПредложение);
			Итератор = Итератор + 1;
			
		КонецЦикла;
		
		Если ПараметрыОбмена.ВыгружатьКартинкиИФайлыПредложений Тогда
			Б_ОбменССайтомСервер.СообщитьПодробно("Выгружено " + Строка(ВыгруженоКартинок) + " картинок в предложениях.", ПараметрыОбмена);
			Б_ОбменССайтомСервер.СообщитьПодробно("Создано " + Строка(СозданоКартинок) + " картинок для предложений.", ПараметрыОбмена);
			Б_ОбменССайтомСервер.СообщитьПодробно("Выгружено " + Строка(ВыгруженоФайлов) + " файлов в предложениях.", ПараметрыОбмена);
			Б_ОбменССайтомСервер.СообщитьПодробно("Создано " + Строка(СозданоФайлов) + " файлов для предложений.", ПараметрыОбмена);
		КонецЕсли;
		
		Владелец.Предложения = XDTOПредложения;
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка предложений в XML завершено. Выгружено " + Строка(Итератор) + " предложений." , ПараметрыОбмена);
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - Выгрузить комплектующие номенклатуры XDTO
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 XDTO объект, в который добавляются комплектующие номенклатуры 
//  ВладелецТип				 - 	 Тип XDTO объекта, в который добавляются комплектующие номенклатуры 
//  Номенклатура			 - 	 Номенклатура 1С 
//  Характеристика			 - 	 Характеристика номенклатуры 1С 
//  лМенеджерВременныхТаблиц - 	 Менеджер временных таблиц с информацией о комплектующих номенклатуры 
//  ТипТовара				 - 	 Тип товара(товар или предложение) 
Процедура ВыгрузитьКомплектующиеНоменклатурыXDTO(ПараметрыОбмена, Владелец, ВладелецТип, Номенклатура, Характеристика, лМенеджерВременныхТаблиц, ТипТовара)
	
	Если ТипТовара = 2 Тогда
		
		XDTOКомплектующиеТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "Комплектующие");
		XDTOКомплектующееТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOКомплектующиеТип, "Комплектующее");
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ *
		|ИЗ
		|	ВремКомплектующиеНоменклатуры КАК ВремКомплектующиеНоменклатуры
		|ГДЕ
		|	ВремКомплектующиеНоменклатуры.Номенклатура = &Номенклатура
		|	И ВремКомплектующиеНоменклатуры.Характеристика = &Характеристика";
		Запрос.УстановитьПараметр("Номенклатура"	, Номенклатура);
		Запрос.УстановитьПараметр("Характеристика"	, Характеристика);
		Выборка = Запрос.Выполнить();
		
		Если НЕ Выборка.Пустой() Тогда
			
			XDTOКомплектующие 		= ФабрикаXDTO.Создать(XDTOКомплектующиеТип); 

			ВыборкаКомплектов =  Выборка.Выбрать();
			Пока ВыборкаКомплектов.Следующий() Цикл
				
				XDTOКомплектующее 			= ФабрикаXDTO.Создать(XDTOКомплектующееТип); 
				Если ЗначениеЗаполнено(ВыборкаКомплектов.Характеристика) Тогда
					XDTOКомплектующее.Ид 			= XMLСтрока(ВыборкаКомплектов.ИдентификаторКомплектующего) + "#" + XMLСтрока(ВыборкаКомплектов.ИдентификаторХарактеристики);
					XDTOКомплектующее.Наименование 	= Лев(ВыборкаКомплектов.КомплектующаяНаименование + " (" + ВыборкаКомплектов.ХарактеристикаКомплектующейНаименование+ ")", 250);
				Иначе
					XDTOКомплектующее.Ид 			= XMLСтрока(ВыборкаКомплектов.ИдентификаторКомплектующего);
					XDTOКомплектующее.Наименование	= ВыборкаКомплектов.КомплектующаяНаименование;
				КонецЕсли;
				XDTOКомплектующее.Количество= ВыборкаКомплектов.Количество;                     
				
				XDTOКомплектующие.Комплектующее.Добавить(XDTOКомплектующее);   
				                                             
			КонецЦикла;
			
       		Владелец.Комплектующие = XDTOКомплектующие;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Процедура - выгружает объект XDTO с ценами
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 XDTO объект, в который добавляются цены 
//  ВладелецТип				 - 	 Тип XDTO объекта, в который добавляются цены 
//  лМенеджерВременныхТаблиц - 	 Менеджер временных таблиц с данными по ценам товаров и предложений 
Процедура ВыгрузитьПрайсы(ПараметрыОбмена, Владелец, ВладелецТип, лМенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
	//Временная таблица формируется в функции СформироватьВременныеТаблицыПоИнформацииОТоварахПакета
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремЦены КАК ВремЦены
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторНоменклатуры,
	|	ИдентификаторХарактеристики";
	
	ТзнЦен = Запрос.Выполнить().Выгрузить();
	
	Если ТзнЦен.Количество() > 0 Тогда
		
		Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка цен в XML.", ПараметрыОбмена);
		Итератор = 0;
		
		XDTOПредложениеТип 	= ПараметрыОбмена.ФайлСхемы.Получить("Предложение");
		XDTOЦеныТип 		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOПредложениеТип, "Цены");
		XDTOЦенаТип 		= ПараметрыОбмена.ФайлСхемы.Получить("Цена");
	
		XDTOНалогТип 		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOЦенаТип, "Налог");	
	
		КоличествоСтрок = ТзнЦен.Количество() -1 ;
		ИдПредложенияПре= "";
		
		Для НомерСтроки = 0 по  КоличествоСтрок Цикл
			
			ТекЦена = ТзнЦен[НомерСтроки];

			Если ПараметрыОбмена.ИспользоватьУпаковкиНоменклатуры И ЗначениеЗаполнено(ТекЦена.Упаковка) Тогда
				
				Единица 	= ТекЦена.Упаковка;
				Коэффициент = ТекЦена.УпаковкаКоэффициент;
				
			Иначе 
				
				Единица 	= ТекЦена.ЕдиницаИзмерения;
				Коэффициент = 1;
				
			КонецЕсли;                      
			
			ИдПредложения = ?(ЗначениеЗаполнено(ТекЦена.Характеристика), XMLСтрока(ТекЦена.ИдентификаторНоменклатуры) + "#" + XMLСтрока(ТекЦена.ИдентификаторХарактеристики), XMLСтрока(ТекЦена.ИдентификаторНоменклатуры));
			
			Если НомерСтроки = КоличествоСтрок Тогда
				ИдПредложенияСлед = "";
			Иначе
				ТекЦенаСлед = ТзнЦен[НомерСтроки + 1];
				ИдПредложенияСлед = ?(ЗначениеЗаполнено(ТекЦенаСлед.Характеристика), XMLСтрока(ТекЦенаСлед.ИдентификаторНоменклатуры) + "#" + XMLСтрока(ТекЦенаСлед.ИдентификаторХарактеристики), XMLСтрока(ТекЦенаСлед.ИдентификаторНоменклатуры));
			КонецЕсли;
			
			Если НомерСтроки = 0 или ИдПредложения <> ИдПредложенияПре Тогда
				
				XDTOПредложение 	= ФабрикаXDTO.Создать(XDTOПредложениеТип); 
				XDTOПредложение.Ид 	= ИдПредложения;
				
				XDTOЦены 			= ФабрикаXDTO.Создать(XDTOЦеныТип); 
				
			КонецЕсли;
			
			XDTOЦена 			= ФабрикаXDTO.Создать(XDTOЦенаТип); 
			
			ЦенаТовара 			= ТекЦена.Цена/Коэффициент;
			ПредставлениеЦены 	= СокрЛП(ТекЦена.Цена) + " " + СокрЛП(ТекЦена.ВалютаЦены) + " за " + СокрЛП(Единица);

			XDTOЦена.Представление 		= ПредставлениеЦены;
			XDTOЦена.ИдТипаЦены			= XMLСтрока(ТекЦена.ИдентификаторСоглашения);
			XDTOЦена.ЦенаЗаЕдиницу 		= Формат(ЦенаТовара, ПараметрыОбмена.ФорматСуммы);            
			XDTOЦена.Валюта       		= Лев(ТекЦена.ВалютаЦены, 3);
			//XDTOЦена.ИдЕдиницыИзмерения = XMLСтрока(ТекЦена.БазоваяЕдиницаИзмеренияИдентификатор);
		
			XDTOНалог				= ФабрикаXDTO.Создать(XDTOНалогТип);
			XDTOНалог.Наименование 	= ПараметрыОбмена.НаименованиеНалога;
			XDTOНалог.УчтеноВСумме 	= XMLСтрока(ТекЦена.ЦенаВключаетНДС);
		
			XDTOЦена.Налог.Добавить(XDTOНалог);
		
			
			Если ТекЦена.Цена > 0 Тогда
				XDTOЦены.Цена.Добавить(XDTOЦена);
			КонецЕсли;
			
			Если ИдПредложения <> ИдПредложенияСлед Тогда
				XDTOПредложение.Цены = XDTOЦены;
				Владелец.Предложение.Добавить(XDTOПредложение);
			КонецЕсли;
			
			ИдПредложенияПре = ИдПредложения; 
			Итератор 		 = Итератор + 1;
			
		КонецЦикла;
		
	Конецесли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
	Запрос.Текст = "Уничтожить ВремЦены";
	Запрос.Выполнить();
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка цен в XML завершено. Выгружено " + Строка(Итератор) + " цен предложений." , ПараметрыОбмена);
	
КонецПроцедуры

// Процедура - выгружает объект XDTO с остатками
//
// Параметры:
//  ПараметрыОбмена			 - 	 Настройки узла обмена 
//  Владелец				 - 	 XDTO объект, в который добавляются остатки 
//  ВладелецТип				 - 	 Тип XDTO объекта, в который добавляются остатки 
//  лМенеджерВременныхТаблиц - 	 Менеджер временных таблиц с данными по остаткам товаров и предложений 
Процедура ВыгрузитьОстаткиXDTO(ПараметрыОбмена, Владелец, ВладелецТип, лМенеджерВременныхТаблиц)
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка остатков в XML.", ПараметрыОбмена);
	
	лВыгрузкаПоСкладам 	= ПараметрыОбмена.ВыгружатьОстаткиПоСкладам;	
	Итератор 		 = 0;
	ЗапросПоСкладам = Новый Запрос;
	ЗапросПоСкладам.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
	ЗапросПоСкладам.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремСклады КАК ВремСклады";
	ТзнСкладов = ЗапросПоСкладам.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
	//Временная таблица формируется в функции СформироватьВременныеТаблицыПоИнформацииОТоварахПакета
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками";
    Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		ЗапросПоОстаткам = Новый Запрос;
		ЗапросПоОстаткам.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
		//Временная таблица формируется в функции СформироватьВременныеТаблицыПоИнформацииОТоварахПакета
		ЗапросПоОстаткам.Текст = "ВЫБРАТЬ * ИЗ ВремОстаткиПоСкладам КАК ВремОстаткиПоСкладам
		|ГДЕ ВремОстаткиПоСкладам.Номенклатура = &Номенклатура И ВремОстаткиПоСкладам.Характеристика = &Характеристика  
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторНоменклатуры,
		|	ИдентификаторХарактеристики";
		ЗапросПоОстаткам.УстановитьПараметр("Номенклатура",Выборка.Номенклатура);
		ЗапросПоОстаткам.УстановитьПараметр("Характеристика",Выборка.Характеристика);
		
		ТзнОстатков = ЗапросПоОстаткам.Выполнить().Выгрузить();
		
		XDTOПредложениеТип 	= ПараметрыОбмена.ФайлСхемы.Получить("Предложение");
		XDTOОстаткиТип 		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOПредложениеТип, "Остатки");
		XDTOОстатокТип 		= ПараметрыОбмена.ФайлСхемы.Получить("Остаток");
		XDTOСкладТип 		= ПараметрыОбмена.ФайлСхемы.Получить("Склад");
		
		ИдПредложения 		= ?(ЗначениеЗаполнено(Выборка.Характеристика), XMLСтрока(Выборка.ИдентификаторНоменклатуры) + "#" + XMLСтрока(Выборка.ИдентификаторХарактеристики), XMLСтрока(Выборка.ИдентификаторНоменклатуры));
		
		XDTOПредложение 	= ФабрикаXDTO.Создать(XDTOПредложениеТип); 
		XDTOПредложение.Ид 	= ИдПредложения;
				
		XDTOОстатки 		= ФабрикаXDTO.Создать(XDTOОстаткиТип); 
		
		Если лВыгрузкаПоСкладам Тогда
			
			Для Каждого ТекСклад Из ТзнСкладов Цикл 
				
				НайденнаяСтрока = ТзнОстатков.Найти(ТекСклад.Склад);

				XDTOОстаток					= ФабрикаXDTO.Создать(XDTOОстатокТип); 

				Если НайденнаяСтрока = Неопределено Тогда
					
					XDTOСклад				= ФабрикаXDTO.Создать(XDTOСкладТип);	
					XDTOСклад.Ид			= XMLСтрока(ТекСклад.Идентификатор);
					XDTOСклад.Количество	= 0;
					
					XDTOОстаток.Склад		= XDTOСклад;
					
				Иначе
					XDTOСклад				= ФабрикаXDTO.Создать(XDTOСкладТип);	
					XDTOСклад.Ид			= XMLСтрока(ТекСклад.Идентификатор);
					XDTOСклад.Количество	= НайденнаяСтрока.Остаток;
					
					XDTOОстаток.Склад		= XDTOСклад;
					
				КонецЕсли;
				
				XDTOОстатки.Остаток.Добавить(XDTOОстаток);
                Итератор 		 = Итератор + 1;
			КонецЦикла;
			
		Иначе
			
			XDTOОстаток					= ФабрикаXDTO.Создать(XDTOОстатокТип); 

			ТзнОстатков.Свернуть("ИдентификаторНоменклатуры, ИдентификаторХарактеристики", "Остаток");	
			
			Если ТзнОстатков.Количество() > 0 Тогда
				XDTOОстаток.Количество 	= ТзнОстатков[0].Остаток;
			Иначе
				XDTOОстаток.Количество 	= 0;
			Конецесли; 
			XDTOОстатки.Остаток.Добавить(XDTOОстаток);  

			Итератор 		 = Итератор + 1;
			
		КонецЕсли;
		
		XDTOПредложение.Остатки = XDTOОстатки;
    	
		Владелец.Предложение.Добавить(XDTOПредложение);

	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
	Запрос.Текст = "Уничтожить ВремОстаткиПоСкладам";
	Запрос.Выполнить();
	
	Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка остатков в XML завершено. Выгружено " + Строка(Итератор) + " элементов." , ПараметрыОбмена);
	
КонецПроцедуры

#КонецОбласти


#Область ВыгрузкаДокументов

		///////////////////////////////////////////////////////////////////
		//			 			ВЫГРУЗКА ДОКУМЕНТОВ                     //
		/////////////////////////////////////////////////////////////////


		
Функция СформироватьВременныеТаблицыПоДокументам(ПараметрыОбмена, МассивДанных)
	
	ОбщийЗапрос = Новый Запрос;
	
	ОбщийЗапрос.УстановитьПараметр("МассивДанных"			, МассивДанных);
	ОбщийЗапрос.УстановитьПараметр("СвойствоИдМетодаОплаты"	, ПараметрыОбмена.СвойствоИдМетодаОплаты);
	ОбщийЗапрос.УстановитьПараметр("СвойствоИдентификаторОтправления", ПараметрыОбмена.СвойствоИдентификаторОтправления);
	
	МенеджерВременныхТаблицДокументов 	= Новый МенеджерВременныхТаблиц;
	ОбщийЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицДокументов;
	
	ЗапросПоЗаказам = "ВЫБРАТЬ
	|	МассивДанных.Объект КАК Объект
	|ПОМЕСТИТЬ ВремМассивДанных
	|ИЗ
	|	&МассивДанных КАК МассивДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиента.Ссылка КАК Документ,
	|	""Заказ"" КАК ТипДокумента
	|ПОМЕСТИТЬ ВремЗаказы
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремМассивДанных КАК ВремМассивДанных
	|		ПО ЗаказКлиента.Ссылка = ВремМассивДанных.Объект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиента.Ссылка КАК Заказ,
	|	ЗаказКлиента.Валюта,
	|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента
	|ПОМЕСТИТЬ ВремВыгружаемыеЗаказы
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В
	|			(ВЫБРАТЬ
	|				ВремЗаказы.Документ
	|			ИЗ
	|				ВремЗаказы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВремВыгружаемыеЗаказы.Заказ КАК Заказ,
	|	ВремВыгружаемыеЗаказы.Валюта,
	|	ВремВыгружаемыеЗаказы.СуммаДокумента - ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОплаты, 0) КАК ЗаказКОплатеОстаток,
	|	ВремВыгружаемыеЗаказы.СуммаДокумента - ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОтгрузки, 0) КАК ЗаказКОтгрузкеОстаток
	|ПОМЕСТИТЬ ВремЗаказыСВалютой
	|ИЗ
	|	ВремВыгружаемыеЗаказы КАК ВремВыгружаемыеЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|		ПО (СостоянияЗаказовКлиентов.Заказ = ВремВыгружаемыеЗаказы.Заказ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремВыгружаемыеЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Регистратор КАК Отгрузка,
	|	ВложенныйЗапрос.Заказ КАК Заказ,
	|	ВложенныйЗапрос.Регистратор.Дата КАК Дата,
	|	ВложенныйЗапрос.Регистратор.Номер КАК Номер
	|ПОМЕСТИТЬ ВремОтгрузкиЗаказов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВремЗаказыСВалютой.Валюта КАК Валюта,
	|		ВремЗаказыСВалютой.Заказ КАК Заказ,
	|		МАКСИМУМ(Оформлено.Регистратор) КАК Регистратор
	|	ИЗ
	|		ВремЗаказыСВалютой КАК ВремЗаказыСВалютой
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов КАК Оформлено
	|			ПО ВремЗаказыСВалютой.Заказ = Оформлено.ЗаказКлиента
	|				И (Оформлено.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВремЗаказыСВалютой.Валюта,
	|		ВремЗаказыСВалютой.Заказ) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Заказ,
	|	ВложенныйЗапрос.Регистратор.Дата КАК Дата,
	|	ВложенныйЗапрос.Регистратор.Номер КАК Номер
	|ПОМЕСТИТЬ ВремОплатыЗаказов
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(РасчетыСКлиентами.Регистратор) КАК Регистратор,
	|		ВремЗаказыСВалютой.Заказ КАК Заказ
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремЗаказыСВалютой КАК ВремЗаказыСВалютой
	|			ПО (ВремЗаказыСВалютой.Заказ = РасчетыСКлиентами.ЗаказКлиента)
	|				И (РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|				И (РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ОперацияПоПлатежнойКарте)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВремЗаказыСВалютой.Заказ) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремЗаказыСВалютой.Заказ,
	|	ВЫБОР
	|		КОГДА ВремЗаказыСВалютой.Заказ.Б_Идентификатор = """"
	|			ТОГДА ВремЗаказыСВалютой.Заказ
	|		ИНАЧЕ ВремЗаказыСВалютой.Заказ.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторЗаказа,
	|	ЕСТЬNULL(ВремОплатыЗаказов.Номер, """") КАК ЗаказНомерОплаты,
	|	ЕСТЬNULL(ВремОплатыЗаказов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаказДатаОплаты,
	|	ЕСТЬNULL(ВремОтгрузкиЗаказов.Номер, """") КАК ЗаказНомерОтгрузки,
	|	ЕСТЬNULL(ВремОтгрузкиЗаказов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаказДатаОтгрузки,
	|	Валюты.Ссылка КАК Валюта,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК Курс,
	|	ВремЗаказыСВалютой.ЗаказКОплатеОстаток,
	|	ВремЗаказыСВалютой.ЗаказКОтгрузкеОстаток
	|ПОМЕСТИТЬ ВремСсылкиДокументов
	|ИЗ
	|	ВремЗаказыСВалютой КАК ВремЗаказыСВалютой
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремОплатыЗаказов КАК ВремОплатыЗаказов
	|		ПО ВремЗаказыСВалютой.Заказ = ВремОплатыЗаказов.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремОтгрузкиЗаказов КАК ВремОтгрузкиЗаказов
	|		ПО ВремЗаказыСВалютой.Заказ = ВремОтгрузкиЗаказов.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО ВремЗаказыСВалютой.Валюта = Валюты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				,
	|				Валюта В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВремЗаказыСВалютой.Валюта
	|					ИЗ
	|						ВремЗаказыСВалютой КАК ВремЗаказыСВалютой)) КАК КурсыВалютСрезПоследних
	|		ПО ВремЗаказыСВалютой.Валюта = КурсыВалютСрезПоследних.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Отменено КАК Отменено,
	|	ЗаказКлиентаТовары.Ссылка КАК Заказ
	|ПОМЕСТИТЬ ВремНеОтмененныеСтрокиЗаказов
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Отменено = ЛОЖЬ
	|	И ЗаказКлиентаТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ВремЗаказы.Документ
	|			ИЗ
	|				ВремЗаказы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремЗаказыСВалютой
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремОтгрузкиЗаказов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремОплатыЗаказов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремСсылкиДокументов.Заказ КАК Объект,
	|	ЗаказКлиента.Ссылка КАК Заказ,
	|	ВремСсылкиДокументов.ИдентификаторЗаказа КАК ИдентификаторДокумента,
	|	ЗаказКлиента.ВерсияДанных,
	|	ЗаказКлиента.ПометкаУдаления,
	|	ЗаказКлиента.Номер,
	|	ЗаказКлиента.Дата,
	|	ЗаказКлиента.Проведен,
	|	ЗаказКлиента.АдресДоставки,
	|	ВремСсылкиДокументов.Валюта,
	|	ВремСсылкиДокументов.Курс КАК Курс,
	|	ЗаказКлиента.Контрагент,
	|	ЗаказКлиента.Партнер,
	|	ЗаказКлиента.Склад,
	|	ВЫБОР
	|		КОГДА ЗаказКлиента.Склад.Б_Идентификатор = """"
	|			ТОГДА ЗаказКлиента.Склад
	|		ИНАЧЕ ЗаказКлиента.Склад.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторСклада,
	|	ЗаказКлиента.Склад.Наименование КАК НаименованиеСклада,
	|	ЗаказКлиента.Комментарий,
	|	ЗаказКлиента.ЦенаВключаетНДС,
	|	ЗаказКлиента.НалогообложениеНДС,
	|	ЗаказКлиента.Статус,
	|	""Заказ"" КАК ТипДокумента,
	|	ЗаказКлиента.БанковскийСчетКонтрагента,
	|	ЗаказКлиента.Б_Идентификатор КАК НомерССайта,
	|	ЗаказКлиента.Б_ДатаДокумента КАК ДатаССайта,
	|	ВремСсылкиДокументов.ЗаказНомерОтгрузки КАК НомерДокументаОтгрузки,
	|	ВремСсылкиДокументов.ЗаказДатаОтгрузки КАК ДатаДокументаОтгрузки,
	|	ВремСсылкиДокументов.ЗаказНомерОплаты КАК НомерДокументаОплаты,
	|	ВремСсылкиДокументов.ЗаказДатаОплаты КАК ДатаДокументаОплаты,
	|	ВремСсылкиДокументов.ЗаказКОплатеОстаток КАК КОплатеОстаток,
	|	ВремСсылкиДокументов.ЗаказКОтгрузкеОстаток КАК КОтгрузкеОстаток,
	|	"""" КАК ИдентификаторОснования,
	|	ЗаказКлиента.Валюта.Наименование КАК ВалютаКод,
	|	ЗаказКлиента.СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ВремСсылкиДокументов.ЗаказКОплатеОстаток <= 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Оплачен,
	|	ВЫБОР
	|		КОГДА ВремСсылкиДокументов.ЗаказКОтгрузкеОстаток <= 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отгружен,
	|	ВЫБОР
	|		КОГДА НЕ ВремСсылкиДокументов.Заказ В
	|					(ВЫБРАТЬ
	|						ВремНеОтмененныеСтрокиЗаказов.Заказ
	|					ИЗ
	|						ВремНеОтмененныеСтрокиЗаказов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЗаказКлиента.ПометкаУдаления
	|	КОНЕЦ КАК Отменен
	|ПОМЕСТИТЬ ВремИнформацияОЗаказахПромежуточная
	|ИЗ
	|	ВремСсылкиДокументов КАК ВремСсылкиДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ПО ВремСсылкиДокументов.Заказ = ЗаказКлиента.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремНеОтмененныеСтрокиЗаказов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремСсылкиДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК Объект,
	|	ДополнительныеСведения.Значение
	|ПОМЕСТИТЬ ВремИдентификаторыОтправленияЗаказа
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &СвойствоИдентификаторОтправления
	|	И ДополнительныеСведения.Объект В
	|			(ВЫБРАТЬ
	|				ВремЗаказы.Документ
	|			ИЗ
	|				ВремЗаказы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремИнформацияОЗаказахПромежуточная.Объект,
	|	ВремИнформацияОЗаказахПромежуточная.Заказ КАК Заказ,
	|	ВремИнформацияОЗаказахПромежуточная.ИдентификаторДокумента,
	|	ВремИнформацияОЗаказахПромежуточная.ВерсияДанных,
	|	ВремИнформацияОЗаказахПромежуточная.ПометкаУдаления,
	|	ВремИнформацияОЗаказахПромежуточная.Номер,
	|	ВремИнформацияОЗаказахПромежуточная.Дата,
	|	ВремИнформацияОЗаказахПромежуточная.Проведен,
	|	ВремИнформацияОЗаказахПромежуточная.АдресДоставки,
	|	ВремИнформацияОЗаказахПромежуточная.Валюта,
	|	ВремИнформацияОЗаказахПромежуточная.Курс,
	|	ВремИнформацияОЗаказахПромежуточная.Контрагент,
	|	ВремИнформацияОЗаказахПромежуточная.Партнер,
	|	ВремИнформацияОЗаказахПромежуточная.Склад,
	|	ВремИнформацияОЗаказахПромежуточная.ИдентификаторСклада,
	|	ВремИнформацияОЗаказахПромежуточная.НаименованиеСклада,
	|	ВремИнформацияОЗаказахПромежуточная.Комментарий,
	|	ВремИнформацияОЗаказахПромежуточная.ЦенаВключаетНДС,
	|	ВремИнформацияОЗаказахПромежуточная.НалогообложениеНДС,
	|	ВремИнформацияОЗаказахПромежуточная.Статус,
	|	ВремИнформацияОЗаказахПромежуточная.ТипДокумента,
	|	ВремИнформацияОЗаказахПромежуточная.БанковскийСчетКонтрагента,
	|	ВремИнформацияОЗаказахПромежуточная.НомерССайта,
	|	ВремИнформацияОЗаказахПромежуточная.ДатаССайта,
	|	ВремИнформацияОЗаказахПромежуточная.НомерДокументаОтгрузки,
	|	ВремИнформацияОЗаказахПромежуточная.ДатаДокументаОтгрузки,
	|	ВремИнформацияОЗаказахПромежуточная.НомерДокументаОплаты,
	|	ВремИнформацияОЗаказахПромежуточная.ДатаДокументаОплаты,
	|	ВремИнформацияОЗаказахПромежуточная.КОплатеОстаток,
	|	ВремИнформацияОЗаказахПромежуточная.КОтгрузкеОстаток,
	|	ВремИнформацияОЗаказахПромежуточная.ИдентификаторОснования,
	|	ВремИнформацияОЗаказахПромежуточная.ВалютаКод,
	|	ВремИнформацияОЗаказахПромежуточная.СуммаДокумента,
	|	ВремИнформацияОЗаказахПромежуточная.Оплачен,
	|	ВремИнформацияОЗаказахПромежуточная.Отгружен,
	|	ВремИнформацияОЗаказахПромежуточная.Отменен,
	|	ВремИдентификаторыОтправленияЗаказа.Значение КАК ИдентификаторОтправления
	|ПОМЕСТИТЬ ВремИнформацияОЗаказах
	|ИЗ
	|	ВремИнформацияОЗаказахПромежуточная КАК ВремИнформацияОЗаказахПромежуточная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыОтправленияЗаказа КАК ВремИдентификаторыОтправленияЗаказа
	|		ПО ВремИнформацияОЗаказахПромежуточная.Объект = ВремИдентификаторыОтправленияЗаказа.Объект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремИнформацияОЗаказахПромежуточная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремИдентификаторыОтправленияЗаказа";
	
	ЗапросПоОтгрузкам = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	""Отгрузка"" КАК ТипДокумента
	|ПОМЕСТИТЬ ВремОтгрузки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремМассивДанных КАК ВремМассивДанных
	|		ПО (РеализацияТоваровУслуг.Ссылка = ВремМассивДанных.Объект
	|				ИЛИ РеализацияТоваровУслуг.ЗаказКлиента = ВремМассивДанных.Объект)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугДополнительныеРеквизиты.Ссылка КАК Документ,
	|	РеализацияТоваровУслугДополнительныеРеквизиты.Значение,
	|	РеализацияТоваровУслугДополнительныеРеквизиты.Свойство
	|ПОМЕСТИТЬ ВремСуммаДоставкиДокументов
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ДополнительныеРеквизиты КАК РеализацияТоваровУслугДополнительныеРеквизиты
	|ГДЕ
	|	РеализацияТоваровУслугДополнительныеРеквизиты.Свойство.Наименование = ""Сумма доставки""
	|	И РеализацияТоваровУслугДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВремОтгрузки.Документ
	|			ИЗ
	|				ВремОтгрузки)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК Отгрузка,
	|	РеализацияТоваровУслуг.Ссылка КАК Объект,
	|	РеализацияТоваровУслуг.Валюта,
	|	РеализацияТоваровУслуг.Б_Идентификатор КАК Б_Идентификатор,
	|	РеализацияТоваровУслуг.ВерсияДанных КАК ВерсияДанных,
	|	РеализацияТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления,
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслуг.Проведен КАК Проведен,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.Партнер КАК Партнер,
	|	РеализацияТоваровУслуг.Склад КАК Склад,
	|	РеализацияТоваровУслуг.Комментарий КАК Комментарий,
	|	РеализацияТоваровУслуг.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	РеализацияТоваровУслуг.НалогообложениеНДС КАК НалогообложениеНДС,
	|	РеализацияТоваровУслуг.Статус КАК Статус,
	|	РеализацияТоваровУслуг.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	РеализацияТоваровУслуг.Б_ДатаДокумента КАК Б_ДатаДокумента,
	|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента,
	|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента
	|ПОМЕСТИТЬ ВремВыгружаемыеОтгрузки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В
	|			(ВЫБРАТЬ
	|				ВремОтгрузки.Документ
	|			ИЗ
	|				ВремОтгрузки)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Отгрузка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремВыгружаемыеОтгрузки.Отгрузка КАК Объект,
	|	ВремВыгружаемыеОтгрузки.ЗаказКлиента КАК Заказ,
	|	ВЫБОР
	|		КОГДА ВремВыгружаемыеОтгрузки.Б_Идентификатор = """"
	|			ТОГДА ВремВыгружаемыеОтгрузки.Отгрузка
	|		ИНАЧЕ ВремВыгружаемыеОтгрузки.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторДокумента,
	|	ВремВыгружаемыеОтгрузки.ВерсияДанных,
	|	ВремВыгружаемыеОтгрузки.ПометкаУдаления,
	|	ВремВыгружаемыеОтгрузки.Номер,
	|	ВремВыгружаемыеОтгрузки.Дата,
	|	ВремВыгружаемыеОтгрузки.Проведен,
	|	ВремВыгружаемыеОтгрузки.АдресДоставки,
	|	ВремВыгружаемыеОтгрузки.Валюта,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК Курс,
	|	ВремВыгружаемыеОтгрузки.Контрагент,
	|	ВремВыгружаемыеОтгрузки.Партнер,
	|	ВремВыгружаемыеОтгрузки.Склад,
	|	ВЫБОР
	|		КОГДА ВремВыгружаемыеОтгрузки.Склад.Б_Идентификатор = """"
	|			ТОГДА ВремВыгружаемыеОтгрузки.Склад
	|		ИНАЧЕ ВремВыгружаемыеОтгрузки.Склад.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторСклада,
	|	ВремВыгружаемыеОтгрузки.Склад.Наименование КАК НаименованиеСклада,
	|	ВремВыгружаемыеОтгрузки.Комментарий,
	|	ВремВыгружаемыеОтгрузки.ЦенаВключаетНДС,
	|	ВремВыгружаемыеОтгрузки.НалогообложениеНДС,
	|	ВремВыгружаемыеОтгрузки.Статус,
	|	ВремВыгружаемыеОтгрузки.БанковскийСчетКонтрагента,
	|	ВремВыгружаемыеОтгрузки.Б_Идентификатор КАК НомерССайта,
	|	ВремВыгружаемыеОтгрузки.Б_ДатаДокумента КАК ДатаССайта,
	|	ВЫБОР
	|		КОГДА ВремВыгружаемыеОтгрузки.ЗаказКлиента.Б_Идентификатор = """"
	|			ТОГДА ВремВыгружаемыеОтгрузки.ЗаказКлиента
	|		ИНАЧЕ ВремВыгружаемыеОтгрузки.ЗаказКлиента.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторОснования,
	|	ВремВыгружаемыеОтгрузки.Валюта.Наименование КАК ВалютаКод,
	|	ВремВыгружаемыеОтгрузки.СуммаДокумента,
	|	ВремВыгружаемыеОтгрузки.ПометкаУдаления КАК Отменен,
	|	ВЫБОР
	|		КОГДА ВремВыгружаемыеОтгрузки.Проведен
	|				И ВремВыгружаемыеОтгрузки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отгружен,
	|	ВЫБОР
	|		КОГДА ВремСуммаДоставкиДокументов.Значение ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВремСуммаДоставкиДокументов.Значение
	|	КОНЕЦ КАК СуммаДоставки,
	|	""Отгрузка"" КАК ТипДокумента
	|ПОМЕСТИТЬ ВремИнформацияООтгрузках
	|ИЗ
	|	ВремВыгружаемыеОтгрузки КАК ВремВыгружаемыеОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|		ПО ВремВыгружаемыеОтгрузки.Валюта = КурсыВалютСрезПоследних.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремСуммаДоставкиДокументов КАК ВремСуммаДоставкиДокументов
	|		ПО ВремВыгружаемыеОтгрузки.Отгрузка = ВремСуммаДоставкиДокументов.Документ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремВыгружаемыеОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремСуммаДоставкиДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремОтгрузки
	|";
	
	ЗапросПоТоварамЗаказов = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Документ,
	|	Товары.Ссылка КАК Заказ,
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.Б_Идентификатор = """"
	|			ТОГДА Товары.Номенклатура
	|		ИНАЧЕ Товары.Номенклатура.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторНоменклатуры,
	|	Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА Товары.Характеристика.Б_Идентификатор = """"
	|			ТОГДА Товары.Характеристика
	|		ИНАЧЕ Товары.Характеристика.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторХарактеристики,
	|	Товары.Упаковка,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка.Б_Идентификатор = """"
	|			ТОГДА Товары.Упаковка
	|		ИНАЧЕ Товары.Упаковка.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторУпаковки,
	|	Товары.КоличествоУпаковок,
	|	Товары.Количество,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.СуммаСНДС,
	|	Товары.ПроцентРучнойСкидки,
	|	Товары.СуммаРучнойСкидки,
	|	Товары.ПроцентАвтоматическойСкидки,
	|	Товары.СуммаАвтоматическойСкидки,
	|	Товары.Склад,
	|	ВЫБОР
	|		КОГДА Товары.Склад.Б_Идентификатор = """"
	|			ТОГДА Товары.Склад
	|		ИНАЧЕ Товары.Склад.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторСклада,
	|	Товары.Содержание,
	|	Товары.Упаковка.Числитель,
	|	Товары.Упаковка.ЕдиницаИзмерения.Ссылка,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка.ЕдиницаИзмерения.Б_Идентификатор = """"
	|			ТОГДА Товары.Упаковка.ЕдиницаИзмерения.Ссылка
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторЕдиницыИзмеренияУпаковки,
	|	Товары.Отменено,
	|	Товары.Номенклатура.Наименование,
	|	Товары.Характеристика.Наименование КАК ХарактеристикаНаименование,
	|	Товары.Номенклатура.ВидНоменклатуры.Наименование КАК ВидНоменклатуры,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|					ТОГДА 2
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ КАК ТипТовара,
	|	Товары.Номенклатура.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЕдиницаИзмерения.Б_Идентификатор = """"
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ Товары.Номенклатура.ЕдиницаИзмерения.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторБазовойЕдиницыИзмерения,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК НаименованиеБазовойЕдиницыИзмерения,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК НаименованиеПолноеБазовойЕдиницыИзмерения,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК КодБазовойЕдиницыИзмерения,
	|	Товары.КодСтроки
	|ПОМЕСТИТЬ ВремТабТоваров
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В
	|			(ВЫБРАТЬ
	|				ВремИнформацияОЗаказах.Объект
	|			ИЗ
	|				ВремИнформацияОЗаказах)
	|";
	
	ЗапросПоТоварамОтгрузок = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.ЗаказКлиента,
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.Б_Идентификатор = """"
	|			ТОГДА Товары.Номенклатура
	|		ИНАЧЕ Товары.Номенклатура.Б_Идентификатор
	|	КОНЕЦ,
	|	Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА Товары.Характеристика.Б_Идентификатор = """"
	|			ТОГДА Товары.Характеристика
	|		ИНАЧЕ Товары.Характеристика.Б_Идентификатор
	|	КОНЕЦ,
	|	Товары.Упаковка,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка.Б_Идентификатор = """"
	|			ТОГДА Товары.Упаковка
	|		ИНАЧЕ Товары.Упаковка.Б_Идентификатор
	|	КОНЕЦ,
	|	Товары.КоличествоУпаковок,
	|	Товары.Количество,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.СуммаСНДС,
	|	Товары.ПроцентРучнойСкидки,
	|	Товары.СуммаРучнойСкидки,
	|	Товары.ПроцентАвтоматическойСкидки,
	|	Товары.СуммаАвтоматическойСкидки,
	|	Товары.Склад,
	|	ВЫБОР
	|		КОГДА Товары.Склад.Б_Идентификатор = """"
	|			ТОГДА Товары.Склад
	|		ИНАЧЕ Товары.Склад.Б_Идентификатор
	|	КОНЕЦ,
	|	NULL,
	|	Товары.Упаковка.Числитель,
	|	Товары.Упаковка.ЕдиницаИзмерения.Ссылка,
	|	Товары.Номенклатура.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка.ЕдиницаИзмерения.Б_Идентификатор = """"
	|			ТОГДА Товары.Упаковка.ЕдиницаИзмерения.Ссылка
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Б_Идентификатор
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	Товары.Номенклатура.Наименование,
	|	Товары.Характеристика.Наименование,
	|	Товары.Номенклатура.ВидНоменклатуры.Наименование,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|					ТОГДА 2
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ,
	|	Товары.Номенклатура.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЕдиницаИзмерения.Б_Идентификатор = """"
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ Товары.Номенклатура.ЕдиницаИзмерения.Б_Идентификатор
	|	КОНЕЦ,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код,
	|	Товары.КодСтроки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В
	|			(ВЫБРАТЬ
	|				ВремИнформацияООтгрузках.Объект
	|			ИЗ
	|				ВремИнформацияООтгрузках)
	|";
	
	ЗапросПоТоварамКонец = "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|";
	
	ЗапросПоСвойствамТоваров = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТабТоваров.Документ КАК Документ,
	|	ВремТабТоваров.Заказ КАК Заказ,
	|	ВремТабТоваров.Номенклатура КАК Номенклатура,
	|	ВремТабТоваров.Характеристика КАК Характеристика,
	|	Б_СвойстваТоваровДокументов.НаименованиеСвойства,
	|	Б_СвойстваТоваровДокументов.Значение,
	|	Б_СвойстваТоваровДокументов.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ВремСвойстваТоваровДокументов
	|ИЗ
	|	ВремТабТоваров КАК ВремТабТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б_СвойстваТоваровДокументов КАК Б_СвойстваТоваровДокументов
	|		ПО (Б_СвойстваТоваровДокументов.Документ = ВремТабТоваров.Заказ)
	|			И (Б_СвойстваТоваровДокументов.Номенклатура = ВремТабТоваров.Номенклатура)
	|			И (Б_СвойстваТоваровДокументов.Характеристика = ВремТабТоваров.Характеристика)
	|			И (Б_СвойстваТоваровДокументов.КодСтроки = ВремТабТоваров.КодСтроки)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Заказ,
	|	Номенклатура,
	|	Характеристика
	|";
	
	ЗапросПоОплатам = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка КАК Документ,
	|	""Оплата наличными"" КАК ТипДокумента,
	|	ВремМассивДанных.Объект КАК Заказ
	|ПОМЕСТИТЬ ВремОплатыНаличные
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремМассивДанных КАК ВремМассивДанных
	|		ПО (ВремМассивДанных.Объект = ПриходныйКассовыйОрдерРасшифровкаПлатежа.Заказ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Ссылка КАК Документ,
	|	""Эквайринг"" КАК ТипДокумента,
	|	ВремМассивДанных.Объект КАК Заказ
	|ПОМЕСТИТЬ ВремОплатыЭквайринг
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремМассивДанных КАК ВремМассивДанных
	|		ПО (ВремМассивДанных.Объект = ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Заказ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка КАК Документ,
	|	""Оплата безналичными"" КАК ТипДокумента,
	|	ВремМассивДанных.Объект КАК Заказ
	|ПОМЕСТИТЬ ВремОплатыБезнал
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремМассивДанных КАК ВремМассивДанных
	|		ПО (ВремМассивДанных.Объект = ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Заказ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремОплатыНаличные.Документ КАК Объект,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка КАК Документ,
	|	ВЫБОР
	|		КОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Б_Идентификатор = """"
	|			ТОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	|		ИНАЧЕ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторДокумента,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВерсияДанных,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Номер,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен,
	|	""Оплата наличными"" КАК ТипДокумента,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Комментарий,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Контрагент,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Контрагент.Партнер,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Б_Идентификатор КАК НомерССайта,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Б_ДатаДокумента КАК ДатаССайта,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК Курс,
	|	ВЫБОР
	|		КОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.Заказ.Б_Идентификатор = """"
	|			ТОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.Заказ
	|		ИНАЧЕ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Заказ.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторОснования,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ВалютаВзаиморасчетов.Наименование КАК ВалютаКод,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Касса КАК КассаТерминал,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Контрагент.Партнер КАК Партнер,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ПометкаУдаления КАК Отменен,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен КАК Оплачен,
	|	"""" КАК ЭквайринговыйТерминал,
	|	ВремОплатыНаличные.Заказ
	|ПОМЕСТИТЬ ВремОплатыВсе
	|ИЗ
	|	ВремОплатыНаличные КАК ВремОплатыНаличные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|			ПО ПриходныйКассовыйОрдерРасшифровкаПлатежа.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	|		ПО (ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = ВремОплатыНаличные.Документ)
	|			И ВремОплатыНаличные.Заказ = ПриходныйКассовыйОрдерРасшифровкаПлатежа.Заказ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.Заказ ССЫЛКА Документ.ЗаказКлиента
	|				ТОГДА ВЫБОР
	|						КОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВремОплатыЭквайринг.Документ,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка,
	|	ВЫБОР
	|		КОГДА ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.Б_Идентификатор = """"
	|			ТОГДА ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка
	|		ИНАЧЕ ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.Б_Идентификатор
	|	КОНЕЦ,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.ВерсияДанных,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.Номер,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.Дата,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.Проведен,
	|	""Эквайринг"",
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.Комментарий,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.Контрагент,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.Контрагент.Партнер,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.Б_Идентификатор,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.Б_ДатаДокумента,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1),
	|	ВЫБОР
	|		КОГДА ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Заказ.Б_Идентификатор = """"
	|			ТОГДА ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Заказ
	|		ИНАЧЕ ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Заказ.Б_Идентификатор
	|	КОНЕЦ,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.ВалютаВзаиморасчетов.Наименование,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.СуммаВзаиморасчетов,
	|	"""",
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.Контрагент.Партнер,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.Проведен,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.ЭквайринговыйТерминал,
	|	ВремОплатыЭквайринг.Заказ
	|ИЗ
	|	ВремОплатыЭквайринг КАК ВремОплатыЭквайринг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ОперацияПоПлатежнойКартеРасшифровкаПлатежа
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|			ПО ОперацияПоПлатежнойКартеРасшифровкаПлатежа.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	|		ПО (ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка = ВремОплатыЭквайринг.Документ)
	|			И ВремОплатыЭквайринг.Заказ = ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Заказ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Заказ ССЫЛКА Документ.ЗаказКлиента
	|				ТОГДА ВЫБОР
	|						КОГДА ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВремОплатыБезнал.Документ,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка,
	|	ВЫБОР
	|		КОГДА ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Б_Идентификатор = """"
	|			ТОГДА ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка
	|		ИНАЧЕ ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Б_Идентификатор
	|	КОНЕЦ,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.ВерсияДанных,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Номер,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Дата,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Проведен,
	|	""Оплата безналичными"",
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Комментарий,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Контрагент,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Контрагент.Партнер,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Б_Идентификатор,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Б_ДатаДокумента,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1),
	|	ВЫБОР
	|		КОГДА ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Заказ.Б_Идентификатор = """"
	|			ТОГДА ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Заказ
	|		ИНАЧЕ ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Заказ.Б_Идентификатор
	|	КОНЕЦ,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.ВалютаВзаиморасчетов.Наименование,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.СуммаВзаиморасчетов,
	|	"""",
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Контрагент.Партнер,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.ПометкаУдаления,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Проведен,
	|	"""",
	|	ВремОплатыБезнал.Заказ
	|ИЗ
	|	ВремОплатыБезнал КАК ВремОплатыБезнал
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|			ПО ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	|		ПО (ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка = ВремОплатыБезнал.Документ)
	|			И ВремОплатыБезнал.Заказ = ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Заказ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Заказ ССЫЛКА Документ.ЗаказКлиента
	|				ТОГДА ВЫБОР
	|						КОГДА ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремОплатыНаличные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремОплатыЭквайринг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремОплатыБезнал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Объект,
	|	ДополнительныеСведения.Значение
	|ПОМЕСТИТЬ ВремСведенияОМетодеОплаты
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &СвойствоИдМетодаОплаты
	|	И ДополнительныеСведения.Объект В
	|			(ВЫБРАТЬ
	|				ВремОплатыВсе.Объект
	|			ИЗ
	|				ВремОплатыВсе)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремОплатыВсе.Объект,
	|	ВремОплатыВсе.Документ,
	|	ВремОплатыВсе.ИдентификаторДокумента,
	|	ВремОплатыВсе.ВерсияДанных,
	|	ВремОплатыВсе.ПометкаУдаления,
	|	ВремОплатыВсе.Номер,
	|	ВремОплатыВсе.Дата,
	|	ВремОплатыВсе.Проведен,
	|	ВремОплатыВсе.ТипДокумента,
	|	ВремОплатыВсе.Комментарий,
	|	ВремОплатыВсе.Контрагент,
	|	ВремОплатыВсе.КонтрагентПартнер,
	|	ВремОплатыВсе.НомерССайта,
	|	ВремОплатыВсе.ДатаССайта,
	|	ВремОплатыВсе.Курс,
	|	ВремОплатыВсе.ИдентификаторОснования,
	|	ВремОплатыВсе.Валюта,
	|	ВремОплатыВсе.ВалютаКод,
	|	ВремОплатыВсе.СуммаВзаиморасчетов,
	|	ВремОплатыВсе.КассаТерминал,
	|	ВремОплатыВсе.Партнер,
	|	ВремОплатыВсе.Отменен,
	|	ВремОплатыВсе.Оплачен,
	|	ВремОплатыВсе.ЭквайринговыйТерминал,
	|	ВремОплатыВсе.Заказ КАК Заказ,
	|	ВремСведенияОМетодеОплаты.Значение КАК ИдМетодаОплаты
	|ПОМЕСТИТЬ ВремИнформацияООплатах
	|ИЗ
	|	ВремОплатыВсе КАК ВремОплатыВсе
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремСведенияОМетодеОплаты КАК ВремСведенияОМетодеОплаты
	|		ПО (ВремОплатыВсе.Объект = ВремСведенияОМетодеОплаты.Объект)
	|ГДЕ
	|	ВремОплатыВсе.Номер <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б_ИнформацияОЧеках.Документ КАК Документ,
	|	Б_ИнформацияОЧеках.НомерЧека,
	|	Б_ИнформацияОЧеках.ИдСвойства,
	|	Б_ИнформацияОЧеках.Значение
	|ПОМЕСТИТЬ ВремСведенияОЧеках
	|ИЗ
	|	РегистрСведений.Б_ИнформацияОЧеках КАК Б_ИнформацияОЧеках
	|ГДЕ
	|	Б_ИнформацияОЧеках.Документ В
	|			(ВЫБРАТЬ
	|				ВремОплатыВсе.Объект
	|			ИЗ
	|				ВремОплатыВсе)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремСведенияОМетодеОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремОплатыВсе";
	
	КонецЗапроса = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремМассивДанных";
	
	
	
	
	
	
	
	
	
	ТекстЗапроса = ЗапросПоЗаказам;	
	
	Если ПараметрыОбмена.ВыгрузкаОтгрузок Тогда
		
		ТекстЗапроса = ТекстЗапроса + ЗапросПоОтгрузкам;
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ЗапросПоТоварамЗаказов;
	
	Если ПараметрыОбмена.ВыгрузкаОтгрузок Тогда
		
		ТекстЗапроса = ТекстЗапроса + ЗапросПоТоварамОтгрузок;
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ЗапросПоТоварамКонец;
	ТекстЗапроса = ТекстЗапроса + ЗапросПоСвойствамТоваров;
	
	
	
	Если ПараметрыОбмена.ВыгрузкаОплат Тогда
		
		ТекстЗапроса = ТекстЗапроса + ЗапросПоОплатам;
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + КонецЗапроса;
		
	//ЗапросПоЗаказам
	//ЗапросПоОтгрузкам
	//ЗапросПоТоварамЗаказов
	//ЗапросПоТоварамОтгрузок
	//ЗапросПоТоварамКонец
	//ЗапросПоСвойствамТоваров
	//ЗапросПоОплатам
	//КонецЗапроса
	
	
	ОбщийЗапрос.Текст = ТекстЗапроса;  	
	
	ОбщийЗапрос.Выполнить();	
	
	Возврат МенеджерВременныхТаблицДокументов;
	
КонецФункции		

// Процедура - собирает общую информацию о документах и выгружает их
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  МассивДанных	 - 	 Таблица значений пакетов документов 
Процедура ВыгрузитьДокументы(ПараметрыОбмена, ТаблицаДокументов)
	
	ТаблицаДокументов.Колонки.Добавить("Дата");
	Для каждого ТекСтрока из ТаблицаДокументов Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.Объект) Тогда
			ТекСтрока.Дата = ТекСтрока.Объект.Дата;	
		КонецЕсли;
		
	КонецЦикла;           
	
	лКоличествоСтрок 	= ТаблицаДокументов.Количество();
	КоличествоПакетов 	= ?(лКоличествоСтрок > 0, ТаблицаДокументов[лКоличествоСтрок - 1].Пакет, 0); 
	
	ТаблицаДокументов.Сортировать("Дата");
	
	лИмяСохраняемогоФайла = "";
	
	Если КоличествоПакетов > 0 Тогда
		
		XDTOКоммерческаяИнформацияТип 	= ПараметрыОбмена.ФайлСхемы.Получить("КоммерческаяИнформация");  
		XDTOКонтейнерТип				= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOКоммерческаяИнформацияТип, "Контейнер");
		
		Для Пакет = 1 по КоличествоПакетов Цикл

			КоличествоКонтейнеров 	= 0;
			КоличествоЗаказов 		= 0;
			КоличествоОтгрузок 		= 0;
			КоличествоОплат 		= 0;
			
			ВыгруженныеДокументы = Новый ТаблицаЗначений;
			ВыгруженныеДокументы.Колонки.Добавить("Объект");
			
			НайденныеДокументы = ТаблицаДокументов.НайтиСтроки(Новый Структура("Пакет",Пакет));

			ВремТаб = ТаблицаДокументов.СкопироватьКолонки("Объект");
			Для каждого НайденныйДокумент из НайденныеДокументы Цикл
				ВремТаб.Добавить().Объект = НайденныйДокумент.Объект;
			КонецЦикла;

			лМенеджерВременныхТаблиц 	= СформироватьВременныеТаблицыПоДокументам(ПараметрыОбмена, ВремТаб);

			XDTOКоммерческаяИнформация 	= ПолучитьXDTOКоммерческаяИнформация(ПараметрыОбмена, XDTOКоммерческаяИнформацияТип); 
			
			Для каждого ТекДокумент из НайденныеДокументы Цикл
				
				XDTOКонтейнер = ФабрикаXDTO.Создать(XDTOКонтейнерТип);
			                                                                                         
				Если ТекДокумент.ТипОбъекта = "Заказ" Тогда
					
					Запрос = Новый Запрос();
					Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
					Запрос.УстановитьПараметр("Заказ", ТекДокумент.Объект);
					Запрос.Текст = "ВЫБРАТЬ *
					|ИЗ
					|	ВремИнформацияОЗаказах КАК ВремИнформацияОЗаказах
					|ГДЕ
					|ВремИнформацияОЗаказах.Заказ = &Заказ";
					МассивЗаказов = Запрос.Выполнить().Выгрузить();
					
					Для каждого ТекЗаказ из МассивЗаказов Цикл 
						
						XDTOДокумент = ВыгрузитьЗаказXDTO(ПараметрыОбмена, лМенеджерВременныхТаблиц, ТекЗаказ, КоличествоЗаказов);
						XDTOКонтейнер.Документ.Добавить(XDTOДокумент);
						
						ВыгруженныеДокументы.Добавить().Объект =  ТекЗаказ.Объект;
						
					КонецЦикла;
					
					Если ПараметрыОбмена.ВыгрузкаОтгрузок Тогда
					
						Запрос = Новый Запрос();
						Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
						Запрос.УстановитьПараметр("Заказ", ТекДокумент.Объект);
						Запрос.Текст = "ВЫБРАТЬ *
						|ИЗ
						|	ВремИнформацияООтгрузках КАК ВремИнформацияООтгрузках
						|ГДЕ
						|ВремИнформацияООтгрузках.Заказ = &Заказ";
						МассивОтгрузок = Запрос.Выполнить().Выгрузить();
						
						Для каждого ТекОтгрузка из МассивОтгрузок Цикл 
							
							XDTOДокумент = ВыгрузитьОтгрузкуXDTO(ПараметрыОбмена, лМенеджерВременныхТаблиц, ТекОтгрузка, КоличествоОтгрузок);
							XDTOКонтейнер.Документ.Добавить(XDTOДокумент);
							
							ВыгруженныеДокументы.Добавить().Объект =  ТекОтгрузка.Объект;
							
						КонецЦикла;
					КонецЕсли;
					
					Если ПараметрыОбмена.ВыгрузкаОплат Тогда
						
						Запрос = Новый Запрос();
						Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
						Запрос.УстановитьПараметр("Заказ", ТекДокумент.Объект);
						Запрос.Текст = "ВЫБРАТЬ *
						|ИЗ
						|	ВремИнформацияООплатах КАК ВремИнформацияООплатах
						|ГДЕ
						|ВремИнформацияООплатах.Заказ = &Заказ";
						МассивОплат = Запрос.Выполнить().Выгрузить();
						
						Для каждого ТекОплата из МассивОплат Цикл 
							
							XDTOДокумент = ВыгрузитьОплатуXDTO(ПараметрыОбмена, лМенеджерВременныхТаблиц, ТекОплата, КоличествоОплат); 						
							XDTOКонтейнер.Документ.Добавить(XDTOДокумент);
							
							ВыгруженныеДокументы.Добавить().Объект =  ТекОплата.Объект;
							
						КонецЦикла;
					КонецЕсли;
					
				ИначеЕсли ТекДокумент.ТипОбъекта = "Отгрузка" Тогда
					
					Запрос = Новый Запрос();
					Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
					Запрос.УстановитьПараметр("Документ", ТекДокумент.Объект);
					Запрос.Текст = "ВЫБРАТЬ *
					|ИЗ
					|	ВремИнформацияООтгрузках КАК ВремИнформацияООтгрузках
					|ГДЕ
					|ВремИнформацияООтгрузках.Объект = &Документ";
					МассивОтгрузок = Запрос.Выполнить().Выгрузить();
					
					Для каждого ТекОтгрузка из МассивОтгрузок Цикл 
						
						XDTOДокумент = ВыгрузитьОтгрузкуXDTO(ПараметрыОбмена, лМенеджерВременныхТаблиц, ТекОтгрузка, КоличествоОтгрузок);
						XDTOКонтейнер.Документ.Добавить(XDTOДокумент);
							
						ВыгруженныеДокументы.Добавить().Объект =  ТекОтгрузка.Объект;
							
					КонецЦикла;
					
				КонецЕсли;

				XDTOКоммерческаяИнформация.Контейнер.Добавить(XDTOКонтейнер);
						
				КоличествоКонтейнеров = КоличествоКонтейнеров + 1;	
	
			КонецЦикла;
			
			ИмяКаталогаXMLфайлов = Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогНаДиске + "\documents\" +  Строка(Пакет)); 
			
			Успешно = ЗаписьИОтправкаXMLДанныхНаСайт(ПараметрыОбмена, XDTOКоммерческаяИнформация, ИмяКаталогаXMLфайлов, "documents", "sale", Пакет);		
			
			УдалениеПакетовИРегистраций(Успешно, ПараметрыОбмена, "Документы", Пакет, "Документы", ВыгруженныеДокументы);
			
			Б_ОбменССайтомСервер.СообщитьПодробно("Выгрузка пакета " + Строка(Пакет) + " контейнеров документов завершено. Выгружено " + Строка(КоличествоКонтейнеров) + " контейнеров.", ПараметрыОбмена);
		
			лМенеджерВременныхТаблиц.Закрыть();
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры 

// Функция - возвращает сформированный документ XDTO по данным 1С
//
// Параметры:
//  ПараметрыОбмена		 - 	 Настройки узла обмена 
//  Документ			 - 	 Документ 1С 
//  МассивТоваров		 - 	 Таблица значений с позициями табличной части "Товары" документа 
//  КоличествоЗаказов	 - 	 Счетчик выгруженных заказов 
//  КоличествоОтгрузок	 - 	 Счетчик выгруженных отгрузок 
// Возвращаемое значение:
//   XDTO документ 
Функция ВыгрузитьЗаказXDTO(ПараметрыОбмена, МенеджерВременныхТаблиц, Документ, КоличествоЗаказов)

	XDTOДокументТип		= ПараметрыОбмена.ФайлСхемы.Получить("Документ");
	XDTOНалогиТип 		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOДокументТип, "Налоги");	
	XDTOНалогТип   		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOНалогиТип, "Налог");
	
	XDTOКонтрагентыТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOДокументТип, "Контрагенты");  	
	XDTOКонтрагентТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOКонтрагентыТип, "Контрагент"); 
	
	XDTOТоварыТип		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOДокументТип, "Товары");
	
	XDTOСкладыТип		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOДокументТип, "Склады");
	XDTOСкладТип		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOСкладыТип, "Склад");
	
	XDTOЗначенияРеквизитовТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOДокументТип, "ЗначенияРеквизитов");
	XDTOЗначениеРеквизитаТип 	= ПараметрыОбмена.ФайлСхемы.Получить("ЗначениеРеквизита");
	
	XDTOДокумент		= ФабрикаXDTO.Создать(XDTOДокументТип);
	
	XDTOДокумент.Ид 			= XMLСтрока(Документ.ИдентификаторДокумента);
	XDTOДокумент.Номер1С 		= Документ.Номер;
	XDTOДокумент.Дата1С 		= XMLСтрока(Формат(Документ.Дата,"ДФ=yyyy-MM-dd"));
	
	//Если ЗначениеЗаполнено(Документ.НомерССайта) Тогда
		XDTOДокумент.Номер 			= Документ.НомерССайта;
	//КонецЕсли;
	
	//Если ЗначениеЗаполнено(Документ.ДатаССайта) Тогда
		лДатаВремяЭлДокумента  		= ?(ЗначениеЗаполнено(Документ.ДатаССайта), Документ.ДатаССайта, Дата(1,1,1,0,0,1));
		XDTOДокумент.Дата 			= XMLСтрока(Формат(лДатаВремяЭлДокумента,"ДФ=yyyy-MM-dd"));
		XDTOДокумент.Время			= XMLСтрока(Формат(лДатаВремяЭлДокумента,"ДФ=ЧЧ:мм:сс"));	
	//КонецЕсли;
	
	XDTOДокумент.ПометкаУдаления= XMLСтрока(Документ.ПометкаУдаления);
	
	XDTOДокумент.НомерВерсии 	= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, Документ.ВерсияДанных, "Документов"); 
	XDTOДокумент.Комментарий 	= Документ.Комментарий;
	
	XDTOДокумент.ХозОперация= "Заказ товара";
		
	КоличествоЗаказов 		= КоличествоЗаказов + 1;
	
	XDTOДокумент.Роль 			= "Продавец";
	Если НЕ ЗначениеЗаполнено(Документ.ВалютаКод) Тогда
		Б_ОбменССайтомСервер.СообщитьПодробно("У документа: " + Документ.Номер + " не заполнена валюта." , ПараметрыОбмена);
	Иначе	
		XDTOДокумент.Валюта			= Лев(Документ.ВалютаКод, 3);
	КонецЕсли;

	XDTOДокумент.Курс			= Формат(Документ.Курс, "ЧЦ=10; ЧДЦ=4; ЧРД=.");
	XDTOДокумент.Сумма			= Формат(Документ.СуммаДокумента , ПараметрыОбмена.ФорматСуммы); 
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремТабТоваров КАК ВремТабТоваров
	|ГДЕ
	|	ВремТабТоваров.Документ =&Документ";
	ЗапросПоТоварам.УстановитьПараметр("Документ", Документ.Объект);
	МассивТоваров = ЗапросПоТоварам.Выполнить().Выгрузить();
	
	Если Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
		
		СуммаНДС = МассивТоваров.Итог("СуммаНДС");
		
		Если СуммаНДС > 0 Тогда
			
			XDTOНалоги	= ФабрикаXDTO.Создать(XDTOНалогиТип);
			XDTOНалог	= ФабрикаXDTO.Создать(XDTOНалогТип);
			XDTOНалог.Наименование = ПараметрыОбмена.НаименованиеНалога;
			XDTOНалог.УчтеноВСумме = XMLСтрока(Документ.ЦенаВключаетНДС);
			XDTOНалог.Сумма        = Формат(СуммаНДС , ПараметрыОбмена.ФорматСуммы); 		
			XDTOНалоги.Налог.Добавить(XDTOНалог);
			XDTOДокумент.Налоги = XDTOНалоги; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыОбмена.ИспользоватьПартнеровИКонтрагентов Тогда
		
		Если Документ.Контрагент <> Null Тогда
			
			XDTOКонтрагенты	= ФабрикаXDTO.Создать(XDTOКонтрагентыТип);
			XDTOКонтрагенты.Контрагент.Добавить(ВыгрузитьКонтрагентаВДокументXDTO(ПараметрыОбмена, XDTOКонтрагентыТип, Документ.Контрагент));
			
			XDTOДокумент.Контрагенты 	= XDTOКонтрагенты;
		Иначе
			Б_ОбменССайтомСервер.СообщитьПодробно("Не найден контрагент в документе: " + Строка(Документ.Объект), ПараметрыОбмена);
		КонецЕсли;
		
	Иначе
		
		Если Документ.Партнер <> Null Тогда
			
			XDTOКонтрагенты	= ФабрикаXDTO.Создать(XDTOКонтрагентыТип);
			XDTOКонтрагенты.Контрагент.Добавить(ВыгрузитьКонтрагентаВДокументXDTO(ПараметрыОбмена, XDTOКонтрагентыТип, Документ.Партнер));
			
			XDTOДокумент.Контрагенты 	= XDTOКонтрагенты;
		Иначе
			Б_ОбменССайтомСервер.СообщитьПодробно("Не найден контрагент в документе: " + Строка(Документ.Объект), ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Документ.ИдентификаторСклада <> Null Тогда
		XDTOСклады	= ФабрикаXDTO.Создать(XDTOСкладыТип);
		
			XDTOСклад				= ФабрикаXDTO.Создать(XDTOСкладТип);
			XDTOСклад.Ид 			= XMLСтрока(Документ.ИдентификаторСклада); 
			XDTOСклад.Наименование 	= Документ.НаименованиеСклада; 
			
		XDTOСклады.Склад.Добавить(XDTOСклад);
		XDTOДокумент.Склады 		= XDTOСклады;	
	КонецЕсли;
	
	XDTOЗначенияРеквизитов 		= ФабрикаXDTO.Создать(XDTOЗначенияРеквизитовТип); 
	
	Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Отменен"	, Документ.Отменен);
		
	Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Проведен", XMLСтрока(Документ.Проведен));
		
	Если ЗначениеЗаполнено(Документ.АдресДоставки) Тогда
		Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Адрес доставки"	, Документ.АдресДоставки);
	КонецЕсли;
	
	Если Документ.Оплачен И ЗначениеЗаполнено(Документ.НомерДокументаОплаты) Тогда   			
		Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Номер оплаты по 1С", ?(ЗначениеЗаполнено(Документ.НомерДокументаОплаты), Документ.НомерДокументаОплаты, "Расчет не по заказам"));
		Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Дата оплаты по 1С"	, XMLСтрока(?(ЗначениеЗаполнено(Документ.ДатаДокументаОплаты), Документ.ДатаДокументаОплаты, Документ.Дата)));
	КонецЕсли;
	
	Если Документ.Отгружен И ЗначениеЗаполнено(Документ.НомерДокументаОтгрузки) Тогда
		Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Номер отгрузки по 1С"	, ?(ЗначениеЗаполнено(Документ.НомерДокументаОтгрузки), Документ.НомерДокументаОтгрузки, "Расчет не по заказам"));
		Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Дата отгрузки по 1С"	, XMLСтрока(?(ЗначениеЗаполнено(Документ.ДатаДокументаОтгрузки), Документ.ДатаДокументаОтгрузки, Документ.Дата)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.ИдентификаторОтправления) Тогда
		Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Идентификатор отправления"	, XMLСтрока(Документ.ИдентификаторОтправления));
	КонецЕсли;
	
	
	Если Документ.ТипДокумента  = "Заказ" Тогда
		
		Если ПараметрыОбмена.СоответствиеСтатусовЗаказов <> Неопределено Тогда 
			НайденныйСтатус = ПараметрыОбмена.СоответствиеСтатусовЗаказов.Найти(Документ.Статус);
			
			Если НайденныйСтатус <> Неопределено Тогда
				Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Статуса заказа ИД"	, НайденныйСтатус.ИдСтатуса);
			КонецЕсли;
		КонецЕсли;
		
	Иначе  
		
		Если ПараметрыОбмена.СоответствиеСтатусовОтгрузок <> Неопределено Тогда 
			НайденныйСтатус = ПараметрыОбмена.СоответствиеСтатусовОтгрузок.Найти(Документ.Статус);
			
			Если НайденныйСтатус <> Неопределено Тогда
				Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Статуса заказа ИД"	, НайденныйСтатус.ИдСтатуса);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	XDTOДокумент.ЗначенияРеквизитов = XDTOЗначенияРеквизитов;
	
	ЕстьТовары 	= МассивТоваров.Количество() 	> 0;
	
	Если ЕстьТовары Тогда
		
		XDTOТовары		= ФабрикаXDTO.Создать(XDTOТоварыТип);
	
		Если ЕстьТовары Тогда
			ЗаполнениеТабличнойЧастиДокумента(ПараметрыОбмена, МенеджерВременныхТаблиц, XDTOТовары, XDTOТоварыТип, Документ, МассивТоваров);     			
		КонецЕсли;
		
       XDTOДокумент.Товары = XDTOТовары;
	КонецЕсли;
	
	Возврат XDTOДокумент;
	
КонецФункции

// Функция - возвращает сформированный документ XDTO по данным 1С
//
// Параметры:
//  ПараметрыОбмена		 - 	 Настройки узла обмена 
//  Документ			 - 	 Документ 1С 
//  МассивТоваров		 - 	 Таблица значений с позициями табличной части "Товары" документа 
//  КоличествоЗаказов	 - 	 Счетчик выгруженных заказов 
//  КоличествоОтгрузок	 - 	 Счетчик выгруженных отгрузок 
// Возвращаемое значение:
//   XDTO документ 
Функция ВыгрузитьОтгрузкуXDTO(ПараметрыОбмена, МенеджерВременныхТаблиц, Документ, КоличествоОтгрузок)
	
	XDTOДокументТип		= ПараметрыОбмена.ФайлСхемы.Получить("Документ");
	XDTOНалогиТип 		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOДокументТип, "Налоги");	
	XDTOНалогТип   		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOНалогиТип, "Налог");
	
	XDTOКонтрагентыТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOДокументТип, "Контрагенты");  	
	XDTOКонтрагентТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOКонтрагентыТип, "Контрагент"); 
	
	XDTOТоварыТип		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOДокументТип, "Товары");
	
	XDTOСкладыТип		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOДокументТип, "Склады");
	XDTOСкладТип		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOСкладыТип, "Склад");
	
	XDTOЗначенияРеквизитовТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOДокументТип, "ЗначенияРеквизитов");
	XDTOЗначениеРеквизитаТип 	= ПараметрыОбмена.ФайлСхемы.Получить("ЗначениеРеквизита");
	
	XDTOДокумент		= ФабрикаXDTO.Создать(XDTOДокументТип);
	
	XDTOДокумент.Ид 			= XMLСтрока(Документ.ИдентификаторДокумента);
	XDTOДокумент.Номер1С 		= Документ.Номер;
	XDTOДокумент.Дата1С 		= XMLСтрока(Формат(Документ.Дата,"ДФ=yyyy-MM-dd"));
	
	XDTOДокумент.Номер 			= Документ.НомерССайта;
	
	лДатаВремяЭлДокумента  		= ?(ЗначениеЗаполнено(Документ.ДатаССайта), Документ.ДатаССайта, Дата(1, 1,1, 0,0,1));
	XDTOДокумент.Дата 			= XMLСтрока(Формат(лДатаВремяЭлДокумента,"ДФ=yyyy-MM-dd"));
	XDTOДокумент.Время			= XMLСтрока(Формат(лДатаВремяЭлДокумента,"ДФ=ЧЧ:мм:сс"));	
	
	XDTOДокумент.ПометкаУдаления= XMLСтрока(Документ.ПометкаУдаления);
	XDTOДокумент.НомерВерсии 	= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, Документ.ВерсияДанных, "Документов"); 
	XDTOДокумент.Комментарий 	= Документ.Комментарий;
	
		
	XDTOДокумент.ХозОперация= "Отпуск товара";	
		
	КоличествоОтгрузок 		= КоличествоОтгрузок + 1;
		
	XDTOДокумент.Основание	= XMLСтрока(Документ.ИдентификаторОснования);
	
	XDTOДокумент.Роль 			= "Продавец";
	
	Если НЕ ЗначениеЗаполнено(Документ.ВалютаКод) Тогда
		Б_ОбменССайтомСервер.СообщитьПодробно("У документа: " + Документ.Номер + " не заполнена валюта." , ПараметрыОбмена);
	Иначе	
		XDTOДокумент.Валюта		= Лев(Документ.ВалютаКод, 3);
	КонецЕсли;

	XDTOДокумент.Курс			= Формат(Документ.Курс, "ЧЦ=10; ЧДЦ=4; ЧРД=.");
	XDTOДокумент.Сумма			= Формат(Документ.СуммаДокумента , ПараметрыОбмена.ФорматСуммы); 
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремТабТоваров КАК ВремТабТоваров
	|ГДЕ
	|	ВремТабТоваров.Документ =&Документ";
	ЗапросПоТоварам.УстановитьПараметр("Документ", Документ.Объект);
	МассивТоваров = ЗапросПоТоварам.Выполнить().Выгрузить();
	
	Если Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
		
		СуммаНДС = МассивТоваров.Итог("СуммаНДС");
		
		Если СуммаНДС > 0 Тогда
			
			XDTOНалоги	= ФабрикаXDTO.Создать(XDTOНалогиТип);
			XDTOНалог	= ФабрикаXDTO.Создать(XDTOНалогТип);
			XDTOНалог.Наименование 	= ПараметрыОбмена.НаименованиеНалога;
			XDTOНалог.УчтеноВСумме 	= XMLСтрока(Документ.ЦенаВключаетНДС);
			XDTOНалог.Сумма        	= Формат(СуммаНДС , ПараметрыОбмена.ФорматСуммы); 		
			XDTOНалоги.Налог.Добавить(XDTOНалог);
			XDTOДокумент.Налоги 	= XDTOНалоги; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыОбмена.ИспользоватьПартнеровИКонтрагентов Тогда
		
		Если Документ.Контрагент <> Null Тогда
			
			XDTOКонтрагенты	= ФабрикаXDTO.Создать(XDTOКонтрагентыТип);
			XDTOКонтрагенты.Контрагент.Добавить(ВыгрузитьКонтрагентаВДокументXDTO(ПараметрыОбмена, XDTOКонтрагентыТип, Документ.Контрагент));
			
			XDTOДокумент.Контрагенты 	= XDTOКонтрагенты;
		Иначе
			Б_ОбменССайтомСервер.СообщитьПодробно("Не найден контрагент в документе: " + Строка(Документ.Объект), ПараметрыОбмена);
		КонецЕсли;
		
	Иначе
		
		Если Документ.Партнер <> Null Тогда
			
			XDTOКонтрагенты	= ФабрикаXDTO.Создать(XDTOКонтрагентыТип);
			XDTOКонтрагенты.Контрагент.Добавить(ВыгрузитьКонтрагентаВДокументXDTO(ПараметрыОбмена, XDTOКонтрагентыТип, Документ.Партнер));
			
			XDTOДокумент.Контрагенты 	= XDTOКонтрагенты;
		Иначе
			Б_ОбменССайтомСервер.СообщитьПодробно("Не найден контрагент в документе: " + Строка(Документ.Объект), ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Документ.ИдентификаторСклада <> Null Тогда
		XDTOСклады	= ФабрикаXDTO.Создать(XDTOСкладыТип);
		
			XDTOСклад				= ФабрикаXDTO.Создать(XDTOСкладТип);
			XDTOСклад.Ид 			= XMLСтрока(Документ.ИдентификаторСклада); 
			XDTOСклад.Наименование 	= Документ.НаименованиеСклада; 
			
		XDTOСклады.Склад.Добавить(XDTOСклад);
		XDTOДокумент.Склады 		= XDTOСклады;	
	КонецЕсли;
	
	XDTOЗначенияРеквизитов 		= ФабрикаXDTO.Создать(XDTOЗначенияРеквизитовТип); 
			
		Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Проведен", XMLСтрока(Документ.Проведен));
		
		Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Отменен"	, Документ.Отменен);
		Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Отгружен", Документ.Отгружен);
		
		Если ЗначениеЗаполнено(Документ.АдресДоставки) Тогда
			Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Адрес доставки"	, Документ.АдресДоставки);
		КонецЕсли;
		
		Если ПараметрыОбмена.СоответствиеСтатусовОтгрузок <> Неопределено Тогда 
			НайденныйСтатус = ПараметрыОбмена.СоответствиеСтатусовОтгрузок.Найти(Документ.Статус);
			
			Если НайденныйСтатус <> Неопределено Тогда
				Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Статуса заказа ИД"	, НайденныйСтатус.ИдСтатуса);
			КонецЕсли;
		КонецЕсли;
		
	XDTOДокумент.ЗначенияРеквизитов = XDTOЗначенияРеквизитов;
	
	ЕстьТовары 	= МассивТоваров.Количество() 	> 0;
	
	Если ЕстьТовары И НЕ Документ.Отменен Тогда
		
		XDTOТовары		= ФабрикаXDTO.Создать(XDTOТоварыТип);
	
		Если ЕстьТовары Тогда
			
			СоздаватьДоставкуАвтоматически = Истина;
			
			ЗаполнениеТабличнойЧастиДокумента(ПараметрыОбмена, МенеджерВременныхТаблиц, XDTOТовары, XDTOТоварыТип, Документ, МассивТоваров, СоздаватьДоставкуАвтоматически);
			
			Если Число(Документ.СуммаДоставки) > 0 И СоздаватьДоставкуАвтоматически Тогда
				ДобавитьВТабличнуюЧастьДокументаДоставкуТовара(ПараметрыОбмена, XDTOТовары, XDTOТоварыТип, Документ);
			КонецЕсли;			

		КонецЕсли;
		
       XDTOДокумент.Товары = XDTOТовары;
	КонецЕсли;
	
	Возврат XDTOДокумент;
	
КонецФункции

// Функция - возвращает сформированный документ XDTO по данным 1С
//
// Параметры:
//  ПараметрыОбмена		 - 	 Настройки узла обмена 
//  Документ			 - 	 Документ 1С 
//  МассивТоваров		 - 	 Таблица значений с позициями табличной части "Товары" документа 
//  КоличествоЗаказов	 - 	 Счетчик выгруженных заказов 
//  КоличествоОтгрузок	 - 	 Счетчик выгруженных отгрузок 
// Возвращаемое значение:
//   XDTO документ 
Функция ВыгрузитьОплатуXDTO(ПараметрыОбмена, МенеджерВременныхТаблиц, Документ, КоличествоОплат)
	
	XDTOДокументТип		= ПараметрыОбмена.ФайлСхемы.Получить("Документ");
	XDTOДокумент		= ФабрикаXDTO.Создать(XDTOДокументТип);
	
	XDTOНалогиТип 		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOДокументТип,"Налоги");	
	XDTOНалогТип   		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOНалогиТип, "Налог");
	                                                            
	XDTOКонтрагентыТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOДокументТип, "Контрагенты");  	
	XDTOКонтрагентТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOКонтрагентыТип, "Контрагент"); 
	
	
	XDTOЗначенияРеквизитовТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOДокументТип,"ЗначенияРеквизитов");
	XDTOЗначениеРеквизитаТип 	= ПараметрыОбмена.ФайлСхемы.Получить("ЗначениеРеквизита");
	
	
	XDTOДокумент.Ид 			= XMLСтрока(Документ.ИдентификаторДокумента);
	XDTOДокумент.Номер1С 		= Документ.Номер;
	XDTOДокумент.Дата1С 		= XMLСтрока(Формат(Документ.Дата,"ДФ=yyyy-MM-dd"));
	
	XDTOДокумент.Номер 			= Документ.НомерССайта;
	
	лДатаВремяЭлДокумента  		= ?(ЗначениеЗаполнено(Документ.ДатаССайта), Документ.ДатаССайта, Дата(1, 1,1));
	XDTOДокумент.Дата 			= XMLСтрока(Формат(лДатаВремяЭлДокумента,"ДФ=yyyy-MM-dd"));
	XDTOДокумент.Время			= XMLСтрока(Формат(лДатаВремяЭлДокумента,"ДФ=ЧЧ:мм:сс"));	
	
	XDTOДокумент.ПометкаУдаления= XMLСтрока(Документ.ПометкаУдаления);
	XDTOДокумент.НомерВерсии 	= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, Документ.ВерсияДанных, "Документов"); 
	XDTOДокумент.Комментарий 	= Документ.Комментарий;
	
	КоличествоОплат 			= КоличествоОплат + 1;
	
	Если Документ.ТипДокумента  = "Оплата безналичными" Тогда
		XDTOДокумент.ХозОперация= "Выплата безналичных денег";
	ИначеЕсли Документ.ТипДокумента  = "Оплата наличными" Тогда
		XDTOДокумент.ХозОперация= "Выплата наличных денег";	
	ИначеЕсли Документ.ТипДокумента  = "Эквайринг" Тогда
		XDTOДокумент.ХозОперация= "Эквайринговая операция";	
	КонецЕсли;
	
	XDTOДокумент.Основание	= XMLСтрока(Документ.ИдентификаторОснования);
	
	XDTOДокумент.Роль 			= "Продавец";
	Если НЕ ЗначениеЗаполнено(Документ.ВалютаКод) Тогда
		Б_ОбменССайтомСервер.СообщитьПодробно("У документа: " + Документ.Номер + " не заполнена валюта." , ПараметрыОбмена);
	Иначе	
		XDTOДокумент.Валюта			= Лев(Документ.ВалютаКод, 3);
	КонецЕсли;

	XDTOДокумент.Курс			= Формат(Документ.Курс, "ЧЦ=10; ЧДЦ=4; ЧРД=.");
	XDTOДокумент.Сумма			= Формат(Документ.СуммаВзаиморасчетов , ПараметрыОбмена.ФорматСуммы); 
	
	
	Если ПараметрыОбмена.ИспользоватьПартнеровИКонтрагентов Тогда
		
		Если Документ.Контрагент <> Null Тогда
			
			XDTOКонтрагенты	= ФабрикаXDTO.Создать(XDTOКонтрагентыТип);
			XDTOКонтрагенты.Контрагент.Добавить(ВыгрузитьКонтрагентаВДокументXDTO(ПараметрыОбмена, XDTOКонтрагентыТип, Документ.Контрагент));
			
			XDTOДокумент.Контрагенты 	= XDTOКонтрагенты;
		Иначе
			Б_ОбменССайтомСервер.СообщитьПодробно("Не найден контрагент в документе: " + Строка(Документ.Объект), ПараметрыОбмена);
		КонецЕсли;
		
	Иначе
		
		Если Документ.Партнер <> Null Тогда
			
			XDTOКонтрагенты	= ФабрикаXDTO.Создать(XDTOКонтрагентыТип);
			XDTOКонтрагенты.Контрагент.Добавить(ВыгрузитьКонтрагентаВДокументXDTO(ПараметрыОбмена, XDTOКонтрагентыТип, Документ.Партнер));
			
			XDTOДокумент.Контрагенты 	= XDTOКонтрагенты;
		Иначе
			Б_ОбменССайтомСервер.СообщитьПодробно("Не найден контрагент в документе: " + Строка(Документ.Объект), ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;	
	
	XDTOЗначенияРеквизитов 		= ФабрикаXDTO.Создать(XDTOЗначенияРеквизитовТип); 
			
		Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Проведен", XMLСтрока(Документ.Проведен));
		Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Отменен"	, Документ.Отменен);
		Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Оплачен"	, Документ.Оплачен);
		
		Если Документ.Оплачен Тогда   			
			Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Номер оплаты по 1С", Документ.Номер);
			Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Дата оплаты по 1С"	, XMLСтрока(Формат(Документ.Дата,"ДФ=yyyy-MM-dd")));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.ИдМетодаОплаты) Тогда
			Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Метод оплаты ИД"	, Документ.ИдМетодаОплаты);
		Иначе
			Если ПараметрыОбмена.СоответствиеПлатежныхСистемИКасс <> Неопределено Тогда 
				
				Если Документ.ТипДокумента  = "Оплата наличными" Тогда
					
					НайденныйСтатус = ПараметрыОбмена.СоответствиеПлатежныхСистемИКасс.Найти(Документ.КассаТерминал);
				
					Если НайденныйСтатус <> Неопределено Тогда
						Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Метод оплаты ИД"	, НайденныйСтатус.ИдПлатежнойСистемы);
					КонецЕсли;
				ИначеЕсли Документ.ТипДокумента  = "Эквайринг" Тогда
					
					НайденныйСтатус = ПараметрыОбмена.СоответствиеПлатежныхСистемИКасс.Найти(Документ.ЭквайринговыйТерминал);
				
					Если НайденныйСтатус <> Неопределено Тогда
						Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "Метод оплаты ИД"	, НайденныйСтатус.ИдПлатежнойСистемы);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	XDTOДокумент.ЗначенияРеквизитов = XDTOЗначенияРеквизитов;
	
	Если Документ.ТипДокумента  = "Оплата наличными" ИЛИ Документ.ТипДокумента  = "Эквайринг" 
		И Константы.Б_ИспользоватьМеханизмПечатиЧеков.Получить() И ЗначениеЗаполнено(Документ.НомерССайта) Тогда
		ЗаполнитьИнформациюОЧеке(ПараметрыОбмена, МенеджерВременныхТаблиц, XDTOДокумент, Документ, XDTOДокументТип);		
	КонецЕсли;
	
	Возврат XDTOДокумент;
	
КонецФункции

// Процедура - заполняет табличную часть документа XDTO
//
// Параметры:
//  ПараметрыОбмена		 - 	 Настройки узла обмена 
//  Владелец			 - 	 XDTO объект, в который добавляются позиции товара 
//  ВладелецТип			 - 	 Тип XDTO объекта, в который добавляются позиции товара  
//  Документ			 - 	 Документ 1С, данные которого выгружаются в XDTO объект. 
//  МассивНоменклатуры	 - 	 Таблица значений с позициями табличной части "Товары" документа 
Процедура ЗаполнениеТабличнойЧастиДокумента(ПараметрыОбмена, МенеджерВременныхТаблиц, Владелец, ВладелецТип, Документ, МассивНоменклатуры, СоздаватьДоставкуАвтоматически = Истина)
	
	XDTOТоварТип		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "Товар");
	XDTOНалогиТип 		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOТоварТип, "Налоги");	
	XDTOНалогТип   		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOНалогиТип, "Налог");
	
	XDTOСтавкиНалоговТип= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOТоварТип, "СтавкиНалогов");	
	XDTOСтавкаНалогаТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOСтавкиНалоговТип, "СтавкаНалога");
	
	XDTOСкидкиТип 		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOТоварТип, "Скидки");	
	XDTOСкидкаТип   	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOСкидкиТип, "Скидка");
	
	XDTOЕдиницаИзмеренияТип	= ПараметрыОбмена.ФайлСхемы.Получить("ЕдиницаИзмерения");
	
	XDTOЗначенияРеквизитовТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOТоварТип, "ЗначенияРеквизитов");
	XDTOЗначениеРеквизитаТип 	= ПараметрыОбмена.ФайлСхемы.Получить("ЗначениеРеквизита");
	
	Для каждого ТекНоменклатура из МассивНоменклатуры Цикл 	
		
		Если ТекНоменклатура.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		XDTOТовар	= ФабрикаXDTO.Создать(XDTOТоварТип);
		
		Если ЗначениеЗаполнено(ТекНоменклатура.Характеристика)  Тогда
			лИд = XMLСтрока(ТекНоменклатура.ИдентификаторНоменклатуры) + "#" + XMLСтрока(ТекНоменклатура.ИдентификаторХарактеристики); 
			лНаименование   	= ТекНоменклатура.НоменклатураНаименование + " (" + ТекНоменклатура.ХарактеристикаНаименование + ")";
		Иначе
			лИд = XMLСтрока(ТекНоменклатура.ИдентификаторНоменклатуры); 
			лНаименование   	= ТекНоменклатура.НоменклатураНаименование;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(лНаименование) Тогда
			Продолжить;
		КонецЕсли;
		
		XDTOТовар.Ид 			= лИд;
		XDTOТовар.Наименование 	= лНаименование;
		
		//комплекты не выгружаем, т.к выгружать и комплектующие нереально. Счиатем, что это товар.
		Если ТекНоменклатура.ТипТовара = 1 Тогда
			лТипНоменклатуры = "Товар";
		ИначеЕсли ТекНоменклатура.ТипТовара = 2 Тогда
			лТипНоменклатуры = "Услуга";
		КонецЕсли;
		
		XDTOЗначенияРеквизитов 		= ФабрикаXDTO.Создать(XDTOЗначенияРеквизитовТип); 
			
		Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "ВидНоменклатуры", ТекНоменклатура.ВидНоменклатуры);
		Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "ТипНоменклатуры", лТипНоменклатуры);
		
		ДобавитьСвойстваПозицийТовараДокумента(ПараметрыОбмена, Документ, МенеджерВременныхТаблиц, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, ТекНоменклатура);
		
		XDTOТовар.ЗначенияРеквизитов = XDTOЗначенияРеквизитов;
		
		Если ЗначениеЗаполнено(ТекНоменклатура.НоменклатураСтавкаНДС) Тогда
			
			XDTOСтавкиНалогов	= ФабрикаXDTO.Создать(XDTOСтавкиНалоговТип);
			
				XDTOСтавкаНалога	= ФабрикаXDTO.Создать(XDTOСтавкаНалогаТип);
				
				XDTOСтавкаНалога.Наименование 	= ПараметрыОбмена.НаименованиеНалога;
				XDTOСтавкаНалога.Ставка 		= Б_ОбменССайтомСервер.ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(ТекНоменклатура.СтавкаНДС);
			
			XDTOСтавкиНалогов.СтавкаНалога.Добавить(XDTOСтавкаНалога);
			
			XDTOТовар.СтавкиНалогов = XDTOСтавкиНалогов;
			
		КонецЕсли;
		
		Если ТекНоменклатура.СуммаНДС > 0 Тогда
			
			XDTOНалоги	= ФабрикаXDTO.Создать(XDTOНалогиТип);
			
				XDTOНалог	= ФабрикаXDTO.Создать(XDTOНалогТип);
				
				XDTOНалог.Наименование 	= ПараметрыОбмена.НаименованиеНалога;
				XDTOНалог.УчтеноВСумме 	= Документ.ЦенаВключаетНДС;
				XDTOНалог.Сумма 		= Формат(ТекНоменклатура.СуммаНДС , ПараметрыОбмена.ФорматСуммы);
				XDTOНалог.Ставка 		= Б_ОбменССайтомСервер.ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(ТекНоменклатура.СтавкаНДС);
			
			XDTOНалоги.Налог.Добавить(XDTOНалог);
			
			XDTOТовар.Налоги = XDTOНалоги;
			
		КонецЕсли;
		
		XDTOТовар.Цена			= Формат(ТекНоменклатура.Цена		, ПараметрыОбмена.ФорматСуммы);   
		XDTOТовар.Количество	= Формат(ТекНоменклатура.Количество	, ПараметрыОбмена.ФорматКоличества);
		XDTOТовар.Сумма			= Формат(ТекНоменклатура.Сумма		, ПараметрыОбмена.ФорматСуммы);
		
		XDTOТовар.Коэффициент 	= "1";
		
		Если ЗначениеЗаполнено(ТекНоменклатура.ИдентификаторБазовойЕдиницыИзмерения) Тогда
			XDTOЕдиницаИзмерения	= ФабрикаXDTO.Создать(XDTOЕдиницаИзмеренияТип);
				XDTOЕдиницаИзмерения.Ид 				= XMLСтрока(ТекНоменклатура.ИдентификаторБазовойЕдиницыИзмерения);
				XDTOЕдиницаИзмерения.Код				= Лев(ТекНоменклатура.КодБазовойЕдиницыИзмерения, 4);
				XDTOЕдиницаИзмерения.НаименованиеКраткое= Лев(ТекНоменклатура.НаименованиеБазовойЕдиницыИзмерения, 3);
				XDTOЕдиницаИзмерения.НаименованиеПолное	= ТекНоменклатура.НаименованиеПолноеБазовойЕдиницыИзмерения;
			XDTOТовар.Единица 		= XDTOЕдиницаИзмерения;
		КонецЕсли;
		
		ПроцентРучнойСкидки = 0;
		СуммаРучнойСкидки   = 0;
		Если ПараметрыОбмена.ИспользоватьРучныеСкидкиВПродажах Тогда
			ПроцентРучнойСкидки = ТекНоменклатура.ПроцентРучнойСкидки;
			СуммаРучнойСкидки   = ТекНоменклатура.СуммаРучнойСкидки;
		КонецЕсли;
		
		ПроцентАвтоматическойСкидки = 0;
		СуммаАвтоматическойСкидки   = 0;
		Если ПараметрыОбмена.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			ПроцентАвтоматическойСкидки = ТекНоменклатура.ПроцентАвтоматическойСкидки;
			СуммаАвтоматическойСкидки   = ТекНоменклатура.СуммаАвтоматическойСкидки;
		КонецЕсли;
		
		Скидка = ПроцентРучнойСкидки + ПроцентАвтоматическойСкидки;
		СуммаСкидки = СуммаРучнойСкидки + СуммаАвтоматическойСкидки;
		
		Если Скидка <> 0 И СуммаСкидки <> 0 Тогда
			
			XDTOСкидки	= ФабрикаXDTO.Создать(XDTOСкидкиТип);
				
				XDTOСкидка	= ФабрикаXDTO.Создать(XDTOСкидкаТип);
				
				XDTOСкидка.Наименование = "Скидка";
				
				XDTOСкидка.Сумма 		= Формат(СуммаСкидки, ПараметрыОбмена.ФорматСуммы);	
				XDTOСкидка.Процент 		= Формат(Скидка, ПараметрыОбмена.ФорматСуммы);	
				XDTOСкидка.УчтеноВСумме = XMLСтрока(истина);
				
			XDTOСкидки.Скидка.Добавить(XDTOСкидка);
			
			XDTOТовар.Скидки = XDTOСкидки;
			
		КонецЕсли;
		
		Если ТекНоменклатура.ИдентификаторНоменклатуры = "ORDER_DELIVERY" Тогда
			СоздаватьДоставкуАвтоматически = Ложь;
		КонецЕсли;
		
		Владелец.Товар.Добавить(XDTOТовар);	
		
	КонецЦикла;	
	
КонецПроцедуры 

Процедура ДобавитьСвойстваПозицийТовараДокумента(ПараметрыОбмена, ИнформацияОДокументе, МенеджерВременныхТаблиц, XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, ПозицияТовара);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВремСвойстваТоваровДокументов КАК ВремСвойстваТоваровДокументов
	|ГДЕ
	|   НЕ ВремСвойстваТоваровДокументов.НаименованиеСвойства ЕСТЬ NULL
	|	И ВремСвойстваТоваровДокументов.Заказ = &Заказ
	|	И ВремСвойстваТоваровДокументов.Документ = &Документ
	|	И ВремСвойстваТоваровДокументов.Номенклатура = &Номенклатура
	|	И ВремСвойстваТоваровДокументов.КодСтроки = &КодСтроки
	|	И ВремСвойстваТоваровДокументов.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("Заказ"		, ИнформацияОДокументе.Заказ);
	Запрос.УстановитьПараметр("Документ"	, ИнформацияОДокументе.Объект);
	
	Запрос.УстановитьПараметр("Номенклатура"	, ПозицияТовара.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика"	, ПозицияТовара.Характеристика);
	Запрос.УстановитьПараметр("КодСтроки"		, ПозицияТовара.КодСтроки);
	
	Выборка = Запрос.Выполнить().Выбрать();	
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НаименованиеСвойства <> "НомерПозицииКорзины" Тогда
			Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "СвойствоКорзины#" + Выборка.НаименованиеСвойства, Выборка.Значение);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Процедура - добавляет в табличную часть отгрузки  документа доставку товара XDTO
//
// Параметры:
//  ПараметрыОбмена		 - 	 Настройки узла обмена 
//  Владелец			 - 	 XDTO объект, в который добавляются позиции товара 
//  ВладелецТип			 - 	 Тип XDTO объекта, в который добавляются позиции товара  
//  Документ			 - 	 Документ 1С, данные которого выгружаются в XDTO объект. 
Процедура ДобавитьВТабличнуюЧастьДокументаДоставкуТовара(ПараметрыОбмена, Владелец, ВладелецТип, Документ)
	
	XDTOТоварТип		= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "Товар");
	
	XDTOЕдиницаИзмеренияТип	= ПараметрыОбмена.ФайлСхемы.Получить("ЕдиницаИзмерения");
	
	XDTOЗначенияРеквизитовТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOТоварТип, "ЗначенияРеквизитов");
	XDTOЗначениеРеквизитаТип 	= ПараметрыОбмена.ФайлСхемы.Получить("ЗначениеРеквизита");
	
	
		XDTOТовар	= ФабрикаXDTO.Создать(XDTOТоварТип);
		
		XDTOТовар.Ид 			= "ORDER_DELIVERY";
		XDTOТовар.Наименование 	= "Доставка заказа";
		
		XDTOЗначенияРеквизитов 		= ФабрикаXDTO.Создать(XDTOЗначенияРеквизитовТип); 
			
		Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "ВидНоменклатуры", "Услуга");
		Б_ОбменССайтомСервер.ДобавитьЗначениеРеквизитаXDTO(XDTOЗначенияРеквизитов, XDTOЗначениеРеквизитаТип, "ТипНоменклатуры", "Услуга");
		
		XDTOТовар.ЗначенияРеквизитов = XDTOЗначенияРеквизитов;
		
		XDTOТовар.Цена			= Формат(Документ.СуммаДоставки		, ПараметрыОбмена.ФорматСуммы);   
		XDTOТовар.Количество	= Формат(1							, ПараметрыОбмена.ФорматКоличества);
		XDTOТовар.Сумма			= Формат(Документ.СуммаДоставки		, ПараметрыОбмена.ФорматСуммы);
	
		Владелец.Товар.Добавить(XDTOТовар);	
	
КонецПроцедуры 

Процедура ЗаполнитьИнформациюОЧеке(ПараметрыОбмена, МенеджерВременныхТаблиц, XDTOДокумент, Документ, XDTOДокументТип)
	
	XDTOИнформацияОЧекахТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOДокументТип, "ИнформацияОЧеках");
	XDTOИнформацияОЧекеТип 	= ПараметрыОбмена.ФайлСхемы.Получить("ИнформацияОЧеке");
	
	XDTOЗначенияСвойствТип 	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOИнформацияОЧекеТип, "ЗначенияСвойств");
	XDTOЗначениеСвойстваТип = ПараметрыОбмена.ФайлСхемы.Получить("ЗначенияСвойства");
	
	XDTOИнформацияОЧеках 	= ФабрикаXDTO.Создать(XDTOИнформацияОЧекахТип); 
	
	XDTOИнформацияОЧеке 	= ФабрикаXDTO.Создать(XDTOИнформацияОЧекеТип);
	
	лИдЧека = "";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Документ", Документ.Объект);
	Запрос.Текст = "ВЫБРАТЬ
	|	ВремСведенияОЧеках.ИдСвойства,
	|	ВремСведенияОЧеках.НомерЧека,
	|	ВремСведенияОЧеках.Значение
	|ИЗ
	|	ВремСведенияОЧеках КАК ВремСведенияОЧеках
	|ГДЕ
	|	ВремСведенияОЧеках.Документ = &Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремСведенияОЧеках.ИдСвойства";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	XDTOЗначенияСвойств 	= ФабрикаXDTO.Создать(XDTOЗначенияСвойствТип);
	
	Пока Выборка.Следующий() Цикл;
		
		Если Выборка.ИдСвойства = "" Тогда
			лИдЧека = Выборка.НомерЧека;
			XDTOИнформацияОЧеке.Ид = XMLСтрока(лИдЧека);
		КонецЕсли;
		
		Если Выборка.НомерЧека = лИдЧека И Выборка.ИдСвойства <> "" Тогда
			
			Б_ОбменССайтомСервер.ДобавитьЗначениеСвойстваXDTO(ПараметрыОбмена, XDTOЗначенияСвойств, XDTOЗначениеСвойстваТип, Выборка.ИдСвойства, "", Выборка.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	XDTOИнформацияОЧеке.ЗначенияСвойств = XDTOЗначенияСвойств;
	XDTOИнформацияОЧеках.ИнформацияОЧеке.Добавить(XDTOИнформацияОЧеке);
	//Возврат XDTOИнформацияОЧеках;
	
	XDTOДокумент.ИнформацияОЧеках = XDTOИнформацияОЧеках;
	
КонецПроцедуры

// Функция - формирует контрагента XDTO по данным 1С
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена 
//  ВладелецТип		 - 	 Тип владельца XDTO, для которого нужно формировать контрагента XDTO 
//  Покупатель		 - 	 Контрагент 1С 
// Возвращаемое значение:
//   Контрагент в формате XDTO 
Функция ВыгрузитьКонтрагентаВДокументXDTO(ПараметрыОбмена, ВладелецТип, Покупатель)
	
	XDTOКонтрагентТип				= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ВладелецТип, "Контрагент"); 
	
	XDTOКонтактнаяИнформацияТип 	= ПараметрыОбмена.ФайлСхемы.Получить("КонтактнаяИнформация");
	XDTOКонтактТип 					= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOКонтактнаяИнформацияТип, "Контакт");
	
	XDTOПредставителиТип 			= ПолучитьТипСвойстваОтТипаОбъектаXDTO(XDTOКонтрагентТип, "Представители");
	XDTOПредставительТип 			= ПараметрыОбмена.ФайлСхемы.Получить("Представитель");
	
	XDTOКонтрагент	= ФабрикаXDTO.Создать(XDTOКонтрагентТип); 
	
	МенеджерВременныхТаблицКонтрагентов = Новый МенеджерВременныхТаблиц;
	
	ОбщийЗапрос = Новый Запрос;
	ОбщийЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтрагентов;
	
	ОбщийЗапрос.УстановитьПараметр("Покупатель",Покупатель);
	
	Если ПараметрыОбмена.ИспользоватьПартнеровИКонтрагентов Тогда
		
		НачалоЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Покупатель.Ссылка КАК Контрагент,
		|	ВЫБОР
		|		КОГДА Покупатель.Б_Идентификатор = """"
		|			ТОГДА Покупатель.Ссылка
		|		ИНАЧЕ Покупатель.Б_Идентификатор
		|	КОНЕЦ КАК Идентификатор
		|ПОМЕСТИТЬ ВремКонтрагенты
		|ИЗ
		|	Справочник.Контрагенты КАК Покупатель
		|ГДЕ
		|	Покупатель.Ссылка = &Покупатель
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	Иначе
		
		НачалоЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Покупатель.Ссылка КАК Партнер
		|ПОМЕСТИТЬ ВремПартнеры
		|ИЗ
		|	Справочник.Партнеры КАК Покупатель
		|ГДЕ
		|	Покупатель.Ссылка = &Покупатель
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Партнер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка КАК Контрагент,
		|	ВЫБОР
		|		КОГДА Контрагенты.Б_Идентификатор = """"
		|			ТОГДА Контрагенты.Ссылка
		|		ИНАЧЕ Контрагенты.Б_Идентификатор
		|	КОНЕЦ КАК Идентификатор
		|
		|ПОМЕСТИТЬ ВремКонтрагенты
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВремПартнеры КАК ВремПартнеры
		|		ПО (ВремПартнеры.Партнер = Контрагенты.Партнер)
		|ГДЕ
		|	Контрагенты.Партнер В
		|			(ВЫБРАТЬ
		|				ВремПартнеры.Партнер
		|			ИЗ
		|				ВремПартнеры)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	КонецЗапроса = "ВЫБРАТЬ
	|	БанковскиеСчетаКонтрагентов.НомерСчета,
	|	БанковскиеСчетаКонтрагентов.Банк,
	|	БанковскиеСчетаКонтрагентов.Банк.Код КАК БИКБанка,
	|	БанковскиеСчетаКонтрагентов.Банк.КоррСчет КАК КоррСчетБанка,
	|	БанковскиеСчетаКонтрагентов.Банк.Адрес КАК АдресБанка,
	|	БанковскиеСчетаКонтрагентов.Банк.Город КАК ГородБанка,
	|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов,
	|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Код КАК БИКБанкаДляРасчетов,
	|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов.КоррСчет КАК КоррСчетБанкаДляРасчетов,
	|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Город КАК ГородБанкаДляРасчетов,
	|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Адрес КАК АдресБанкаДляРасчетов,
	|	БанковскиеСчетаКонтрагентов.Банк.Наименование КАК НаименованиеБанка,
	|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Наименование КАК НаименованиеБанкаДляРасчетов,
	|	БанковскиеСчетаКонтрагентов.Владелец КАК Покупатель
	|ПОМЕСТИТЬ ВремБанковскиеСчета
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|ГДЕ
	|	БанковскиеСчетаКонтрагентов.Владелец В
	|			(ВЫБРАТЬ
	|				ВремКонтрагенты.Контрагент
	|			ИЗ
	|				ВремКонтрагенты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Покупатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КонтактныеЛицаПартнеров.Б_Идентификатор = """"
	|			ТОГДА КонтактныеЛицаПартнеров.Ссылка
	|		ИНАЧЕ КонтактныеЛицаПартнеров.Б_Идентификатор
	|	КОНЕЦ КАК ИдентификаторКонтактногоЛица,
	|	КонтактныеЛицаПартнеров.Наименование КАК НаименованиеКонтактногоЛица,
	|	КонтактныеЛицаПартнеров.Владелец КАК Покупатель
	|ПОМЕСТИТЬ ВремКонтактныеЛица
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Владелец В
	|			(ВЫБРАТЬ
	|				ВремКонтрагенты.Контрагент.Партнер
	|			ИЗ
	|				ВремКонтрагенты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Покупатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПокупательКонтактнаяИнформация.Ссылка КАК Покупатель,
	|	ПокупательКонтактнаяИнформация.Тип,
	|	ПокупательКонтактнаяИнформация.Вид,
	|	ПокупательКонтактнаяИнформация.Представление,
	|	ПокупательКонтактнаяИнформация.ЗначенияПолей,
	|	ПокупательКонтактнаяИнформация.Страна,
	|	ПокупательКонтактнаяИнформация.Регион,
	|	ПокупательКонтактнаяИнформация.Город,
	|	ПокупательКонтактнаяИнформация.АдресЭП,
	|	ПокупательКонтактнаяИнформация.ДоменноеИмяСервера,
	|	ПокупательКонтактнаяИнформация.НомерТелефона,
	|	ПокупательКонтактнаяИнформация.НомерТелефонаБезКодов
	|ПОМЕСТИТЬ ВремКонтактнаяИнформация
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК ПокупательКонтактнаяИнформация
	|ГДЕ
	|	ПокупательКонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				ВремКонтрагенты.Контрагент
	|			ИЗ
	|				ВремКонтрагенты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Покупатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремКонтрагенты.Идентификатор КАК ИдентификаторПокупателя,
	|	ВремКонтрагенты.Контрагент.ВерсияДанных КАК ВерсияДанныхПокупателя,
	|	ВремКонтрагенты.Контрагент.ПометкаУдаления КАК ПометкаУдаленияПокупателя,
	|	"""" КАК КодПокупателя,
	|	ВремКонтрагенты.Контрагент.Наименование КАК НаименованиеПокупателя,
	|	ВремКонтрагенты.Контрагент.ИНН КАК ИННПокупателя,
	|	ВремКонтрагенты.Контрагент.КодПоОКПО КАК КодПоОКПОПокупателя,
	|	"""" КАК КомментарийПокупателя,
	|	ВремКонтрагенты.Контрагент.КПП КАК КПППокупателя,
	|	ВремКонтрагенты.Контрагент.НаименованиеПолное КАК НаименованиеПолноеПокупателя,
	|	""Контрагенты"" КАК ТипПокупателя,
	|	ВремКонтрагенты.Контрагент.ЮрФизЛицо КАК ЮрФизЛицоПокупателя
	|ПОМЕСТИТЬ МассивДанныхСПакетами
	|ИЗ
	|	ВремКонтрагенты КАК ВремКонтрагенты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремКонтрагенты";
	
	ОбщийЗапрос.Текст = НачалоЗапроса + КонецЗапроса;	
	ОбщийЗапрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц  = МенеджерВременныхТаблицКонтрагентов;
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	МассивДанныхСПакетами КАК МассивДанныхСПакетамит";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		XDTOКонтрагент.Ид 				= XMLСтрока(Выборка.ИдентификаторПокупателя);
		XDTOКонтрагент.НомерВерсии 		= Б_ОбменССайтомСервер.ПолучитьВерсиюОбъекта(ПараметрыОбмена, Выборка.ВерсияДанныхПокупателя, "Контрагентов");
		XDTOКонтрагент.ПометкаУдаления 	= XMLСтрока(Выборка.ПометкаУдаленияПокупателя);
		XDTOКонтрагент.Наименование 	= Выборка.НаименованиеПокупателя;
		
		Если Выборка.ЮрФизЛицоПокупателя 		= Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			XDTOКонтрагент.ОфициальноеНаименование	= Выборка.НаименованиеПолноеПокупателя;
		Иначе
			XDTOКонтрагент.ПолноеНаименование		= Выборка.НаименованиеПолноеПокупателя;
		КонецЕсли;
		
		XDTOКонтрагент.Роль 	= "Покупатель";
			
		XDTOКонтрагент.ИНН		= Выборка.ИННПокупателя;
		XDTOКонтрагент.КПП		= Выборка.КПППокупателя;
		XDTOКонтрагент.КодПоОКПО= Выборка.КодПоОКПОПокупателя;
			
		//выгрузка банковских счетов
		Запрос = Новый Запрос;
		запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтрагентов;
		Запрос.Текст = "ВЫБРАТЬ 
		|	*
		|ИЗ
		|	ВремБанковскиеСчета КАК ВремБанковскиеСчета";
		
		тзнВрем = Запрос.Выполнить().Выгрузить();
		
		Если тзнВрем.Количество() > 0 Тогда
			
			ВыгрузитьБанковскийСчетXDTO(ПараметрыОбмена, XDTOКонтрагент, XDTOКонтрагентТип, тзнВрем);
			
		КонецЕсли;
		
		//выгрузка контактов
		Запрос = Новый Запрос;
		запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтрагентов;
		Запрос.Текст = "ВЫБРАТЬ 
		|	*
		|ИЗ
		|	ВремКонтактныеЛица КАК ВремКонтактныеЛица";
		
		тзнВрем = Запрос.Выполнить().Выгрузить();
		
		Если тзнВрем.Количество() > 0 Тогда
			
			XDTOПредставители = ФабрикаXDTO.Создать(XDTOПредставителиТип);
			
			Для каждого ТекКонтакт из тзнВрем Цикл 
				
				XDTOПредставитель 				= ФабрикаXDTO.Создать(XDTOПредставительТип);
				XDTOПредставитель.Отношение 	= "Контактное лицо";
				XDTOПредставитель.Ид 			= XMLСтрока(ТекКонтакт.ИдентификаторКонтактногоЛица);
				XDTOПредставитель.Наименование 	= ТекКонтакт.НаименованиеКонтактногоЛица;
				
				XDTOПредставители.Представитель.Добавить(XDTOПредставитель);
				
			КонецЦикла;
			
			Если XDTOПредставители.Представитель.количество() > 0 Тогда
				XDTOКонтрагент.Представители = XDTOПредставители;
			КонецЕсли;

		КонецЕсли;
		
		//выгрузка контактной информации
		Запрос = Новый Запрос;
		запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтрагентов;
		Запрос.Текст = "ВЫБРАТЬ 
		|	*
		|ИЗ
		|	ВремКонтактнаяИнформация КАК ВремКонтактнаяИнформация";
										  
		тзнВрем = Запрос.Выполнить().Выгрузить();
		
		Если тзнВрем.Количество() > 0 Тогда
			
			XDTOКонтактнаяИнформация = ФабрикаXDTO.Создать(XDTOКонтактнаяИнформацияТип);
			
			Для каждого ТекКонтИнформация из тзнВрем Цикл 
				
				Если ТекКонтИнформация.Вид 			= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
					XDTOКонтрагент.АдресРегистрации	= ПолучитьАдресXDTO(ПараметрыОбмена, ТекКонтИнформация);
				ИначеЕсли ТекКонтИнформация.Вид 	= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
					XDTOКонтрагент.Адрес			= ПолучитьАдресXDTO(ПараметрыОбмена, ТекКонтИнформация);
				ИначеЕсли ТекКонтИнформация.Вид 	= Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
					XDTOКонтактнаяИнформация.Контакт.Добавить(Б_ОбменССайтомСервер.ПолучитьКонтактнуюИнформациюXDTO(ПараметрыОбмена, XDTOКонтактТип, "Телефон рабочий", ТекКонтИнформация.Представление));
				ИначеЕсли ТекКонтИнформация.Вид 	= Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
					
					Если СокрЛП(ТекКонтИнформация.Представление) <> "@Mail.ru" Тогда	
						XDTOКонтактнаяИнформация.Контакт.Добавить(Б_ОбменССайтомСервер.ПолучитьКонтактнуюИнформациюXDTO(ПараметрыОбмена, XDTOКонтактТип, "Электронная почта", ТекКонтИнформация.Представление));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
				
			Если XDTOКонтактнаяИнформация.Контакт.количество() > 0 Тогда
				XDTOКонтрагент.Контакты = XDTOКонтактнаяИнформация;
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	Возврат XDTOКонтрагент;
		
КонецФункции


#КонецОбласти
